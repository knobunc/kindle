$VAR1 = [
          [
            1,
            '[23:57] Pro Git - Scott Chacon.epub (OEBPS/B-embedding-git-in-your-applications.xhtml) - 23:57',
            "from dulwich import porcelain
porcelain.log('.', max_entries=1)

#commit: 57fbe010446356833a6ad1600059d80b1e731e15
#Author: Jelmer Vernoo\x{133} <jelmer\@jelmer.uk>
#Date:   Sat Apr 29 2017 <<23:57|2>>:34 +0000






The official API documentation is available at https://www.dulwich.io/apidocs/dulwich.html


Official tutorial at https://www.dulwich.io/docs/tutorial has many examples of how to do specific tasks with Dulwich",
          ],
          [
            1,
            '[21:52] Pro Git - Scott Chacon.epub (OEBPS/ch02-git-basics-chapter.xhtml) - 21:52',
            "\$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon\@gee-mail.com>
Date:   Mon Mar 17 <<21:52|2>>:11 2008 -<<0700|18:0>>

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon\@gee-mail.com>
Date:   Sat Mar 15 <<16:40|2>>:33 2008 -<<0700|18:0>>

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon\@gee-mail.com>
Date:   Sat Mar 15 <<10:31|2>>:28 2008 -<<0700|18:0>>

    first commit

By default, with no arguments, git log lists the commits made in that repository in reverse chronological order\x{2009}\x{2014}\x{2009}that is, the most recent commits show up first.
As you can see, this command lists each commit with its SHA-1 checksum, the author\x{2019}s name and email, the date written, and the commit message.",
          ],
          [
            1,
            '[21:52] Pro Git - Scott Chacon.epub (OEBPS/ch02-git-basics-chapter.xhtml) - 21:52',
            '$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 <<21:52|2>>:11 2008 -<<0700|18:0>>

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require \'rake/gempackagetask\'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 <<16:40|2>>:33 2008 -<<0700|18:0>>

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end

This option displays the same information but with a diff directly following each entry.
This is very helpful for code review or to quickly browse what happened during a series of commits that a collaborator has added.
You can also use a series of summarizing options with git log.
For example, if you want to see some abbreviated stats for each commit, you can use the --stat option:',
          ],
          [
            1,
            '[21:52] Pro Git - Scott Chacon.epub (OEBPS/ch02-git-basics-chapter.xhtml) - 21:52',
            '$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 <<21:52|2>>:11 2008 -<<0700|18:0>>

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 <<16:40|2>>:33 2008 -<<0700|18:0>>

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 <<10:31|2>>:28 2008 -<<0700|18:0>>

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)

As you can see, the --stat option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed.
It also puts a summary of the information at the end.',
          ],
          [
            1,
            '[20:19] Pro Git - Scott Chacon.epub (OEBPS/ch02-git-basics-chapter.xhtml) - 20:19',
            '$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 <<20:19|2>>:12 2014 -<<0700|18:0>>

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 <<21:52|2>>:11 2008 -<<0700|18:0>>

    changed the version number

That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information.',
          ],
          [
            1,
            '[21:52] Pro Git - Scott Chacon.epub (OEBPS/ch02-git-basics-chapter.xhtml) - 21:52',
            "\$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon\@gee-mail.com>
Date:   Mon Mar 17 <<21:52|2>>:11 2008 -<<0700|18:0>>

    changed the version number




You can also tag commits after you\x{2019}ve moved past them.
Suppose your commit history looks like this:",
          ],
          [
            1,
            '[15:32] Pro Git - Scott Chacon.epub (OEBPS/ch02-git-basics-chapter.xhtml) - 15:32',
            "\$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

\$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon\@gee-mail.com>
Date:   Mon Feb 9 <<15:32|2>>:16 2009 -<<0800|18:0>>

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon\@gee-mail.com>
Date:   Sun Apr 27 <<20:43|2>>:35 2008 -<<0700|18:0>>

    updated rakefile
...




By default, the git push command doesn\x{2019}t transfer tags to remote servers.
You will have to explicitly push tags to a shared server after you have created them.
This process is just like sharing remote branches\x{2009}\x{2014}\x{2009}you can run git push origin <tagname>.",
          ],
          [
            1,
            '[ap 02:05] Pro Git - Scott Chacon.epub (OEBPS/ch02-git-basics-chapter.xhtml) - 2.05',
            '$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), <<2.05|5a:0>> KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5

If you have a lot of tags that you want to push up at once, you can also use the --tags option to the git push command.
This will transfer all of your tags to the remote server that are not already there.',
          ],
          [
            1,
            '[19:48] Pro Git - Scott Chacon.epub (OEBPS/ch02-git-basics-chapter.xhtml) - 19:48',
            '$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 <<19:48|2>>:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>

As you can tell, Git simply replaces the new command with whatever you alias it for.
However, maybe you want to run an external command, rather than a Git subcommand.
In that case, you start the command with a ! character.
This is useful if you write your own tools that work with a Git repository.
We can demonstrate by aliasing git visual to run gitk:',
          ],
          [
            1,
            '[14:04] Pro Git - Scott Chacon.epub (OEBPS/ch04-git-on-the-server.xhtml) - 14.04',
            "Until LTS <<14.04|5a:0>>, Ubuntu used upstart service unit configuration.
Therefore, on Ubuntu \x{21d0} <<14.04|5a:0>> you can use an Upstart script.
So, in the following file",
          ],
          [
            1,
            '[ap 10:02] Pro Git - Scott Chacon.epub (OEBPS/ch04-git-on-the-server.xhtml) - 10:02',
            "\$ git instaweb --httpd=webrick
[2009-02-21 <<10:02|2>>:21] INFO  WEBrick 1.3.1
[2009-02-21 <<10:02|2>>:21] INFO  ruby 1.8.6 (2008-03-03) [universal-darwin9.0]

That starts up an HTTPD server on port 1234 and then automatically starts a web browser that opens on that page.
It\x{2019}s pretty easy on your part.
When you\x{2019}re done and want to shut down the server, you can run the same command with the --stop option:",
          ],
          [
            1,
            '[16:01] Pro Git - Scott Chacon.epub (OEBPS/ch05-distributed-git.xhtml) - 16:01',
            "\$ git log --no-merges issue54..origin/master
commit 738ee872852dfaa9d6634e0dea7a324040193016
Author: John Smith <jsmith\@example.com>
Date:   Fri May 29 <<16:01|2>>:27 2009 -<<0700|18:0>>

   remove invalid default value

The issue54..origin/master syntax is a log filter that asks Git to display only those commits that are on the latter branch (in this case origin/master) that are not on the first branch (in this case issue54).
We\x{2019}ll go over this syntax in detail in Commit Ranges.",
          ],
          [
            1,
            '[19:57] Pro Git - Scott Chacon.epub (OEBPS/ch05-distributed-git.xhtml) - 19:57',
            "\$ git log featureA..origin/featureA
commit aad881d154acdaeb2b6b18ea0e827ed8a6d671e6
Author: John Smith <jsmith\@example.com>
Date:   Fri May 29 <<19:57|2>>:33 2009 -<<0700|18:0>>

    changed log output to 30 from 25

If Jessica likes what she sees, she can merge John\x{2019}s new work into her local featureA branch with:",
          ],
          [
            1,
            '[00:00] Pro Git - Scott Chacon.epub (OEBPS/ch05-distributed-git.xhtml) - 00:00',
            "\$ cat 0001-add-limit-to-log-function.patch
From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 <<00:00|2>>:00 2001
From: Jessica Smith <jessica\@example.com>
Date: Sun, 6 Apr 2008 <<10:17|2>>:23 -<<0700|18:0>>
Subject: [PATCH 1/2] add limit to log function

Limit log functionality to the first 20

---
 lib/simplegit.rb |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index 76f47bc..f9815f1 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
\@\@ -14,7 +14,7 \@\@ class SimpleGit
   end

   def log(treeish = 'master')
-    command(\"git log #{treeish}\")
+    command(\"git log -n 20 #{treeish}\")
   end

   def ls_tree(treeish = 'master')
--
2.1.0

You can also edit these patch files to add more information for the email list that you don\x{2019}t want to show up in the commit message.
If you add text between the --- line and the beginning of the patch (the diff --git line), the developers can read it, but that content is ignored by the patching process.",
          ],
          [
            1,
            '[13:29] Pro Git - Scott Chacon.epub (OEBPS/ch05-distributed-git.xhtml) - 13:29',
            "(mbox) Adding cc: Jessica Smith <jessica\@example.com> from
  \\line 'From: Jessica Smith <jessica\@example.com>'
OK. Log says:
Sendmail: /usr/sbin/sendmail -i jessica\@example.com
From: Jessica Smith <jessica\@example.com>
To: jessica\@example.com
Subject: [PATCH 1/2] added limit to log function
Date: Sat, 30 May 2009 <<13:29|2>>:15 -<<0700|18:0>>
Message-Id: <1243715356-61726-1-git-send-email-jessica\@example.com>
X-Mailer: git-send-email 1.6.2.rc1.20.g8c5b.dirty
In-Reply-To: <y>
References: <y>

Result: OK




This section has covered a number of common workflows for dealing with several very different types of Git projects you\x{2019}re likely to encounter, and introduced a couple of new tools to help you manage this process.
Next, you\x{2019}ll see how to work the other side of the coin: maintaining a Git project.
You\x{2019}ll learn how to be a benevolent dictator or integration manager.",
          ],
          [
            1,
            '[00:00] Pro Git - Scott Chacon.epub (OEBPS/ch05-distributed-git.xhtml) - 00:00',
            'From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 <<00:00|2>>:00 2001
From: Jessica Smith <jessica@example.com>
Date: Sun, 6 Apr 2008 <<10:17|2>>:23 -<<0700|18:0>>
Subject: [PATCH 1/2] add limit to log function

Limit log functionality to the first 20

This is the beginning of the output of the git format-patch command that you saw in the previous section; it also represents a valid mbox email format.
If someone has emailed you the patch properly using git send-email, and you download that into an mbox format, then you can point git am to that mbox file, and it will start applying all the patches it sees.
If you run a mail client that can save several emails out in mbox format, you can save entire patch series into a file and then use git am to apply them one at a time.',
          ],
          [
            1,
            '[ap 10:17] Pro Git - Scott Chacon.epub (OEBPS/ch05-distributed-git.xhtml) - 10:17',
            '$ git log --pretty=fuller -1
commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
Author:     Jessica Smith <jessica@example.com>
AuthorDate: Sun Apr 6 <<10:17|2>>:23 2008 -<<0700|18:0>>
Commit:     Scott Chacon <schacon@gmail.com>
CommitDate: Thu Apr 9 <<09:19|2>>:06 2009 -<<0700|18:0>>

   add limit to log function

   Limit log functionality to the first 20

The Commit information indicates the person who applied the patch and the time it was applied.
The Author information is the individual who originally created the patch and when it was originally created.',
          ],
          [
            1,
            '[00:01] Pro Git - Scott Chacon.epub (OEBPS/ch05-distributed-git.xhtml) - 0001',
            "\$ git am 0001-seeing-if-this-helps-the-gem.patch
Applying: seeing if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Patch failed at <<0001|9c:0>>.
When you have resolved this problem run \"git am --resolved\".
If you would prefer to skip this patch, instead run \"git am --skip\".
To restore the original branch and stop patching run \"git am --abort\".

This command puts conflict markers in any files it has issues with, much like a conflicted merge or rebase operation.
You solve this issue much the same way\x{2009}\x{2014}\x{2009}edit the file to resolve the conflict, stage the new file, and then run git am --resolved to continue to the next patch:",
          ],
          [
            1,
            '[ap 09:53] Pro Git - Scott Chacon.epub (OEBPS/ch05-distributed-git.xhtml) - 09:53',
            '$ git log contrib --not master
commit 5b6235bd297351589efc4d73316f0a68d484f118
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Oct 24 <<09:53|2>>:59 2008 -<<0700|18:0>>

    seeing if this helps the gem

commit 7482e0d16d04bea79d0dba8988cc78df655f16a0
Author: Scott Chacon <schacon@gmail.com>
Date:   Mon Oct 22 <<19:38|2>>:36 2008 -<<0700|18:0>>

    updated the gemspec to hopefully work better

To see what changes each commit introduces, remember that you can pass the -p option to git log and it will append the diff introduced to each commit.',
          ],
          [
            1,
            '[ap 09:52] Pro Git - Scott Chacon.epub (OEBPS/ch05-distributed-git.xhtml) - 8 to 10',
            "The git describe command favors annotated tags (tags created with the -a or -s flag), so release tags should be created this way if you\x{2019}re using git describe, to ensure the commit is named properly when described.
You can also use this string as the target of a checkout or show command, although it relies on the abbreviated SHA-1 value at the end, so it may not be valid forever.
For instance, the Linux kernel recently jumped from <<8 to 10|10a:0>> characters to ensure SHA-1 object uniqueness, so older git describe output names were invalidated.",
          ],
          [
            1,
            '[18:32] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 18:32',
            "\$ git log
commit 734713bc047d87bf7eac9674765ae793478c50d3
Author: Scott Chacon <schacon\@gmail.com>
Date:   Fri Jan 2 <<18:32|2>>:33 2009 -<<0800|18:0>>

    fixed refs handling, added gc auto, updated tests

commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon\@gmail.com>
Date:   Thu Dec 11 <<15:08|2>>:43 2008 -<<0800|18:0>>

    Merge commit 'phedders/rdocs'

commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
Author: Scott Chacon <schacon\@gmail.com>
Date:   Thu Dec 11 <<14:58|2>>:32 2008 -<<0800|18:0>>

    added some blame and merge stuff

In this case, say you\x{2019}re interested in the commit whose hash begins with 1c002dd....
You can inspect that commit with any of the following variations of git show (assuming the shorter versions are unambiguous):",
          ],
          [
            1,
            '[ap 09:52] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - eight to ten',
            '$ git log --abbrev-commit --pretty=oneline
ca82a6d changed the version number
085bb3b removed unnecessary test code
a11bef0 first commit

Generally, <<eight to ten|10a:0>> characters are more than enough to be unique within a project.
For example, as of June 2018, the Linux kernel (which is a fairly sizable project) has over 700,000 commits and almost six and a half million objects in its object database, with no two objects whose SHA-1s are identical in the first 11 characters.',
          ],
          [
            1,
            '[18:32] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 18:32',
            "\$ git log -g master
commit 734713bc047d87bf7eac9674765ae793478c50d3
Reflog: master\@{0} (Scott Chacon <schacon\@gmail.com>)
Reflog message: commit: fixed refs handling, added gc auto, updated
Author: Scott Chacon <schacon\@gmail.com>
Date:   Fri Jan 2 <<18:32|2>>:33 2009 -<<0800|18:0>>

    fixed refs handling, added gc auto, updated tests

commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Reflog: master\@{1} (Scott Chacon <schacon\@gmail.com>)
Reflog message: merge phedders/rdocs: Merge made by recursive.
Author: Scott Chacon <schacon\@gmail.com>
Date:   Thu Dec 11 <<15:08|2>>:43 2008 -<<0800|18:0>>

    Merge commit 'phedders/rdocs'

It\x{2019}s important to note that reflog information is strictly local\x{2009}\x{2014}\x{2009}it\x{2019}s a log only of what you\x{2019}ve done in your repository.
The references won\x{2019}t be the same on someone else\x{2019}s copy of the repository; also, right after you initially clone a repository, you\x{2019}ll have an empty reflog, as no activity has occurred yet in your repository.
Running git show HEAD\@{2.months.ago} will show you the matching commit only if you cloned the project at least two months ago\x{2009}\x{2014}\x{2009}if you cloned it any more recently than that, you\x{2019}ll see only your first local commit.",
          ],
          [
            1,
            '[15:08] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 15:08',
            '$ git show HEAD^
commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 <<15:08|2>>:43 2008 -<<0800|18:0>>

    Merge commit \'phedders/rdocs\'


Escaping the caret on Windows

On Windows in cmd.exe, ^ is a special character and needs to be treated differently. You can either double it or put the commit reference in quotes:',
          ],
          [
            1,
            '[14:58] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 14:58',
            "\$ git show d921970^
commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
Author: Scott Chacon <schacon\@gmail.com>
Date:   Thu Dec 11 <<14:58|2>>:32 2008 -<<0800|18:0>>

    added some blame and merge stuff

\$ git show d921970^2
commit 35cfb2b795a55793d7cc56a6cc2060b4bb732548
Author: Paul Hedderly <paul+git\@mjr.org>
Date:   Wed Dec 10 <<22:22|2>>:03 2008 +0000

    Some rdoc changes

The other main ancestry specification is the ~ (tilde).
This also refers to the first parent, so HEAD~ and HEAD^ are equivalent.
The difference becomes apparent when you specify a number.
HEAD~2 means \x{201c}the first parent of the first parent,\x{201d} or \x{201c}the grandparent\x{201d}\x{2009}\x{2014}\x{2009}it traverses the first parents the number of times you specify.
For example, in the history listed earlier, HEAD~3 would be",
          ],
          [
            1,
            '[13:47] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 13:47',
            '$ git show HEAD~3
commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
Author: Tom Preston-Werner <tom@mojombo.com>
Date:   Fri Nov 7 <<13:47|2>>:59 2008 -<<0500|18:0>>

    ignore *.gem

This can also be written HEAD~~~, which again is the first parent of the first parent of the first parent:',
          ],
          [
            1,
            '[13:47] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 13:47',
            "\$ git show HEAD~~~
commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
Author: Tom Preston-Werner <tom\@mojombo.com>
Date:   Fri Nov 7 <<13:47|2>>:59 2008 -<<0500|18:0>>

    ignore *.gem

You can also combine these syntaxes\x{2009}\x{2014}\x{2009}you can get the second parent of the previous reference (assuming it was a merge commit) by using HEAD~3^2, and so on.",
          ],
          [
            1,
            '[20:29] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 20:29',
            "\$ git show v1.5
tag v1.5
Tagger: Ben Straub <ben\@straub.cc>
Date:   Sat May 3 <<20:29|2>>:41 2014 -<<0700|18:0>>

my signed 1.5 tag
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAABAgAGBQJTZbQlAAoJEF0+sviABDDrZbQH/09PfE51KPVPlanr6q1v4/Ut
LQxfojUWiLQdg2ESJItkcuweYg+kc3HCyFejeDIBw9dpXt00rY26p05qrpnG+85b
hM1/PswpPLuBSr+oCIDj5GMC2r2iEKsfv2fJbNW8iWAXVLoWZRF8B0MfqX/YTMbm
ecorc4iXzQu7tupRihslbNkfvfciMnSDeSvzCpWAHl7h8Wj6hhqePmLm9lAYqnKp
8S5B/1SSQuEAjRZgI4IexpZoeKGVDptPHxLLS38fozsyi0QyDyzEgJxcJQVMXxVi
RUysgqjcpT8+iQM1PblGfHR4XAhuOqN5Fx06PSaFZhqvWFezJ28/CLyX5q+oIVk=
=EFTF
-----END PGP SIGNATURE-----

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon\@gee-mail.com>
Date:   Mon Mar 17 <<21:52|2>>:11 2008 -<<0700|18:0>>

    changed the version number




To verify a signed tag, you use git tag -v <tag-name>.
This command uses GPG to verify the signature.
You need the signer\x{2019}s public key in your keyring for this to work properly:",
          ],
          [
            1,
            '[ap 07:00] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 0700',
            "\$ git tag -v v1.4.2.1
object 883653babd8ee7ea23e6a5c392bb739348b1eb61
type commit
tag v1.4.2.1
tagger Junio C Hamano <junkio\@cox.net> 1158138501 -<<0700|18:0>>

GIT 1.4.2.1

Minor fixes since 1.4.2, including git-mv and git-http with alternates.
gpg: Signature made Wed Sep 13 <<02:08|2>>:25 2006 PDT using DSA key ID F3119B9A
gpg: Good signature from \"Junio C Hamano <junkio\@cox.net>\"
gpg:                 aka \"[jpeg image of size 1513]\"
Primary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A

If you don\x{2019}t have the signer\x{2019}s public key, you get something like this instead:",
          ],
          [
            1,
            '[ap 02:08] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 02:08',
            "gpg: Signature made Wed Sep 13 <<02:08|2>>:25 2006 PDT using DSA key ID F3119B9A
gpg: Can't check signature: public key not found
error: could not verify the tag 'v1.4.2.1'




In more recent versions of Git (v1.7.9 and above), you can now also sign individual commits.
If you\x{2019}re interested in signing commits directly instead of just the tags, all you need to do is add a -S to your git commit command.",
          ],
          [
            1,
            '[19:49] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 19:49',
            '$ git log --show-signature -1
commit 5c3386cf54bba0a33a32da706aa52bc0155503c2
gpg: Signature made Wed Jun  4 <<19:49|2>>:17 2014 PDT using RSA key ID 0A46826A
gpg: Good signature from "Scott Chacon (Git signing key) <schacon@gmail.com>"
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Jun 4 <<19:49|2>>:17 2014 -<<0700|18:0>>

    signed commit

Additionally, you can configure git log to check any signatures it finds and list them in its output with the %G? format.',
          ],
          [
            1,
            '[ap 11:52] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 11:52',
            "\$ git log -L :git_deflate_bound:zlib.c
commit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca
Author: Junio C Hamano <gitster\@pobox.com>
Date:   Fri Jun 10 <<11:52|2>>:15 2011 -<<0700|18:0>>

    zlib: zlib can only process 4GB at a time

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
\@\@ -85,5 +130,5 \@\@
-unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+unsigned long git_deflate_bound(git_zstream *strm, unsigned long size)
 {
-       return deflateBound(strm, size);
+       return deflateBound(&strm->z, size);
 }


commit 225a6f1068f71723a910e8565db4e252b3ca21fa
Author: Junio C Hamano <gitster\@pobox.com>
Date:   Fri Jun 10 <<11:18|2>>:17 2011 -<<0700|18:0>>

    zlib: wrap deflateBound() too

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
\@\@ -81,0 +85,5 \@\@
+unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+{
+       return deflateBound(strm, size);
+}
+

If Git can\x{2019}t figure out how to match a function or method in your programming language, you can also provide it with a regular expression (or regex).
For example, this would have done the same thing as the example above: git log -L '/unsigned long git_deflate_bound/',/^}/:zlib.c.
You could also give it a range of lines or a single line number and you\x{2019}ll get the same sort of output.",
          ],
          [
            1,
            '[ap 07:00] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 0700',
            "\$ git cat-file -p HEAD
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
author Scott Chacon  1301511835 -<<0700|18:0>>
committer Scott Chacon  1301511835 -<<0700|18:0>>

initial commit

\$ git ls-tree -r HEAD
100644 blob a906cb2a4a904a152...   README
100644 blob 8f94139338f9404f2...   Rakefile
040000 tree 99f1a6d12cb4b6f19...   lib

The Git cat-file and ls-tree commands are \x{201c}plumbing\x{201d} commands that are used for lower level things and not really used in day-to-day work, but they help us see what\x{2019}s going on here.",
          ],
          [
            1,
            '[18:14] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 18:14',
            "\$ git log --cc -p -1
commit 14f41939956d80b9e17bb8721354c33f8d5b5a79
Merge: f1270f7 e3eb223
Author: Scott Chacon <schacon\@gmail.com>
Date:   Fri Sep 19 <<18:14|2>>:49 2014 +0200

    Merge branch 'mundo'

    Conflicts:
        hello.rb

diff --cc hello.rb
index 0399cd5,59727f0..e1d0799
--- a/hello.rb
+++ b/hello.rb
\@\@\@ -1,7 -1,7 +1,7 \@\@\@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end

  hello()





Now that you know how to create a merge commit, you\x{2019}ll probably make some by mistake.
One of the great things about working with Git is that it\x{2019}s okay to make mistakes, because it\x{2019}s possible (and in many cases easy) to fix them.",
          ],
          [
            1,
            '[00:01] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 0001',
            "\$ git checkout i18n-world
Switched to branch 'i18n-world'

\$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: i18n one word
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Resolved 'hello.rb' using previous resolution.
Failed to merge in the changes.
Patch failed at <<0001|18:0>> i18n one word

Now, we got the same merge conflict like we expected, but take a look at the Resolved FILE using previous resolution line.
If we look at the file, we\x{2019}ll see that it\x{2019}s already been resolved, there are no merge conflict markers in it.",
          ],
          [
            1,
            '[16:03] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 16:03',
            "\$ git blame -L 69,82 Makefile
b8b0618cf6fab (Cheng Renquan  2009-05-26 <<16:03|2>>:07 +0800 69) ifeq (\"\$(origin V)\", \"command line\")
b8b0618cf6fab (Cheng Renquan  2009-05-26 <<16:03|2>>:07 +0800 70)   KBUILD_VERBOSE = \$(V)
^1da177e4c3f4 (Linus Torvalds 2005-04-16 <<15:20|2>>:36 -<<0700|18:0>> 71) endif
^1da177e4c3f4 (Linus Torvalds 2005-04-16 <<15:20|2>>:36 -<<0700|18:0>> 72) ifndef KBUILD_VERBOSE
^1da177e4c3f4 (Linus Torvalds 2005-04-16 <<15:20|2>>:36 -<<0700|18:0>> 73)   KBUILD_VERBOSE = 0
^1da177e4c3f4 (Linus Torvalds 2005-04-16 <<15:20|2>>:36 -<<0700|18:0>> 74) endif
^1da177e4c3f4 (Linus Torvalds 2005-04-16 <<15:20|2>>:36 -<<0700|18:0>> 75)
066b7ed955808 (Michal Marek   2014-07-04 <<14:29|2>>:30 +0200 76) ifeq (\$(KBUILD_VERBOSE),1)
066b7ed955808 (Michal Marek   2014-07-04 <<14:29|2>>:30 +0200 77)   quiet =
066b7ed955808 (Michal Marek   2014-07-04 <<14:29|2>>:30 +0200 78)   Q =
066b7ed955808 (Michal Marek   2014-07-04 <<14:29|2>>:30 +0200 79) else
066b7ed955808 (Michal Marek   2014-07-04 <<14:29|2>>:30 +0200 80)   quiet=quiet_
066b7ed955808 (Michal Marek   2014-07-04 <<14:29|2>>:30 +0200 81)   Q = \@
066b7ed955808 (Michal Marek   2014-07-04 <<14:29|2>>:30 +0200 82) endif

Notice that the first field is the partial SHA-1 of the commit that last modified that line.
The next two fields are values extracted from that commit\x{2009}\x{2014}\x{2009}the author name and the authored date of that commit\x{2009}\x{2014}\x{2009}so you can easily see who modified that line and when.
After that come the line number and the content of the file.
Also note the ^1da177e4c3f4 commit lines, where the ^ prefix designates lines that were introduced in the repository\x{2019}s initial commit and have remained unchanged ever since.
This is a tad confusing, because now you\x{2019}ve seen at least three different ways that Git uses the ^ to modify a commit SHA-1, but that is what it means here.",
          ],
          [
            1,
            '[14:48] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 14:48',
            "\$ git bisect good
b047b02ea83310a70fd603dc8cd7a6cd13d15c04 is first bad commit
commit b047b02ea83310a70fd603dc8cd7a6cd13d15c04
Author: PJ Hyett <pjhyett\@example.com>
Date:   Tue Jan 27 <<14:48|2>>:32 2009 -<<0800|18:0>>

    secure this thing

:040000 040000 40ee3e7821b895e52c1695092db9bdc4c61d1730
f24d3c6ebcfc639b1a3814550e62d60b8e68a8e4 M  config

When you\x{2019}re finished, you should run git bisect reset to reset your HEAD to where you were before you started, or you\x{2019}ll end up in a weird state:",
          ],
          [
            1,
            '[15:21] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 15:21',
            '$ git clone https://github.com/chaconinc/MainProject
Cloning into \'MainProject\'...
remote: Counting objects: 14, done.
remote: Compressing objects: 100% (13/13), done.
remote: Total 14 (delta 1), reused 13 (delta 0)
Unpacking objects: 100% (14/14), done.
Checking connectivity... done.
$ cd MainProject
$ ls -la
total 16
drwxr-xr-x   9 schacon  staff  306 Sep 17 <<15:21|2>> .
drwxr-xr-x   7 schacon  staff  238 Sep 17 <<15:21|2>> ..
drwxr-xr-x  13 schacon  staff  442 Sep 17 <<15:21|2>> .git
-rw-r--r--   1 schacon  staff   92 Sep 17 <<15:21|2>> .gitmodules
drwxr-xr-x   2 schacon  staff   68 Sep 17 <<15:21|2>> DbConnector
-rw-r--r--   1 schacon  staff  756 Sep 17 <<15:21|2>> Makefile
drwxr-xr-x   3 schacon  staff  102 Sep 17 <<15:21|2>> includes
drwxr-xr-x   4 schacon  staff  136 Sep 17 <<15:21|2>> scripts
drwxr-xr-x   4 schacon  staff  136 Sep 17 <<15:21|2>> src
$ cd DbConnector/
$ ls
$

The DbConnector directory is there, but empty.
You must run two commands: git submodule init to initialize your local configuration file, and git submodule update to fetch all the data from that project and check out the appropriate commit listed in your superproject:',
          ],
          [
            1,
            '[16:37] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 16:37',
            '$ git log -p --submodule
commit 0a24cfc121a8a3c118e0105ae4ae4c00281cf7ae
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Sep 17 <<16:37|2>>:02 2014 +0200

    updating DbConnector for bug fixes

diff --git a/.gitmodules b/.gitmodules
index 6fc0b3d..fd1cc29 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,4 @@
 [submodule "DbConnector"]
        path = DbConnector
        url = https://github.com/chaconinc/DbConnector
+       branch = stable
Submodule DbConnector c3f01dc..c87d55d:
  > catch non-null terminated lines
  > more robust error handling
  > more efficient db routine
  > better connection routine

Git will by default try to update all of your submodules when you run git submodule update --remote so if you have a lot of them, you may want to pass the name of just the submodule you want to try to update.',
          ],
          [
            1,
            '[ap 07:34] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 07:34',
            "\$ git log
commit 9a466c572fe88b195efd356c3f2bbeccdb504102
Author: Scott Chacon <schacon\@gmail.com>
Date:   Wed Mar 10 <<07:34|2>>:10 2010 -0800

    second commit

commit b1ec3248f39900d2a406049d762aa68e9641be25
Author: Scott Chacon <schacon\@gmail.com>
Date:   Wed Mar 10 <<07:34|2>>:01 2010 -<<0800|18:0>>

    first commit

If you want to send that repository to someone and you don\x{2019}t have access to a repository to push to, or simply don\x{2019}t want to set one up, you can bundle it with git bundle create.",
          ],
          [
            1,
            '[ap 07:00] Pro Git - Scott Chacon.epub (OEBPS/ch07-git-tools.xhtml) - 0700',
            '$ git cat-file -p 81a708d
tree 7bc544cf438903b65ca9104a1e30345eee6c083d
parent 9c68fdceee073230f19ebb8b5e7fc71b479c0252
author Scott Chacon <schacon@gmail.com> 1268712581 -<<0700|18:0>>
committer Scott Chacon <schacon@gmail.com> 1268712581 -0700

fourth commit

Remember that the actual parent of 81a708d was our placeholder commit (622e88e), not 9c68fdce as it states here.',
          ],
          [
            1,
            '[ap 04:21] Pro Git - Scott Chacon.epub (OEBPS/ch08-customizing-git.xhtml) - 04:21',
            'diff --git a/image.png b/image.png
index 88839c4..4afcb7c 100644
--- a/image.png
+++ b/image.png
@@ -1,12 +1,12 @@
 ExifTool Version Number         : 7.74
-File Size                       : 70 kB
-File Modification Date/Time     : 2009:<<04:21|2>> <<07:02|2>>:45-07:00
+File Size                       : 94 kB
+File Modification Date/Time     : 2009:<<04:21|2>> <<07:02|2>>:43-07:00
 File Type                       : PNG
 MIME Type                       : image/png
-Image Width                     : 1058
-Image Height                    : 889
+Image Width                     : 1056
+Image Height                    : 827
 Bit Depth                       : 8
 Color Type                      : RGB with Alpha

You can easily see that the file size and image dimensions have both changed.',
          ],
          [
            1,
            '[ap 07:26] Pro Git - Scott Chacon.epub (OEBPS/ch08-customizing-git.xhtml) - 07:26',
            "\$ git add date_test.txt .gitattributes
\$ git commit -m \"Testing date expansion in Git\"
\$ rm date_test.txt
\$ git checkout date_test.txt
\$ cat date_test.txt
# \$Date: Tue Apr 21 <<07:26|2>>:52 2009 -<<0700|18:0>>\$

You can see how powerful this technique can be for customized applications.
You have to be careful, though, because the .gitattributes file is committed and passed around with the project, but the driver (in this case, dater) isn\x{2019}t, so it won\x{2019}t work everywhere.
When you design these filters, they should be able to fail gracefully and have the project still work properly.",
          ],
          [
            1,
            '[ap 08:38] Pro Git - Scott Chacon.epub (OEBPS/ch08-customizing-git.xhtml) - 08:38',
            '$ git archive HEAD | tar xCf ../deployment-testing -
$ cat ../deployment-testing/LAST_COMMIT
Last commit date: Tue Apr 21 <<08:38|2>>:48 2009 -<<0700|18:0>> by Scott Chacon

The substitutions can include for example the commit message and any git notes, and git log can do simple word wrapping:',
          ],
          [
            1,
            '[ap 09:14] Pro Git - Scott Chacon.epub (OEBPS/ch08-customizing-git.xhtml) - 09:14',
            "\$ echo '\$Format:Last commit: %h by %aN at %cd%n%+w(76,6,9)%B\$' > LAST_COMMIT
\$ git commit -am 'export-subst uses git log'\\''s custom formatter

git archive uses git log'\\''s `pretty=format:` processor
directly, and strips the surrounding `\$Format:` and `\$`
markup from the output.
'
\$ git archive \@ | tar xfO - LAST_COMMIT
Last commit: 312ccc8 by Jim Hill at Fri May 8 <<09:14|2>>:04 2015 -<<0700|18:0>>
       export-subst uses git log's custom formatter

         git archive uses git log's `pretty=format:` processor directly, and
         strips the surrounding `\$Format:` and `\$` markup from the output.

The resulting archive is suitable for deployment work, but like any exported archive it isn\x{2019}t suitable for further development work.",
          ],
          [
            1,
            '[ap 07:00] Pro Git - Scott Chacon.epub (OEBPS/ch08-customizing-git.xhtml) - 0700',
            '$ git cat-file commit ca82a6
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
author Scott Chacon <schacon@gmail.com> 1205815931 -<<0700|18:0>>
committer Scott Chacon <schacon@gmail.com> 1240030591 -<<0700|18:0>>

changed the version number

A simple way to get the commit message from a commit when you have the SHA-1 value is to go to the first blank line and take everything after that.
You can do so with the sed command on Unix systems:',
          ],
          [
            1,
            '[ap 03:08] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 03:08',
            '$ git log -1
commit 95e0222ba6399739834380eb10afcd73e0670bc5
Author: ben <ben@0b684db3-b064-4277-89d1-21af03df0a68>
Date:   Thu Jul 24 <<03:08|2>>:36 2014 +0000

    Adding git-svn instructions to the README

    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68

Notice that the SHA-1 checksum that originally started with 4af61fd when you committed now begins with 95e0222.
If you want to push to both a Git server and a Subversion server, you have to push (dcommit) to the Subversion server first, because that action changes your commit data.',
          ],
          [
            1,
            '[16:07] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 16:07',
            "\$ git svn log
------------------------------------------------------------------------
r87 | schacon | 2014-05-02 <<16:07|2>>:37 -<<0700|18:0>> (Sat, 02 May 2014) | 2 lines

autogen change

------------------------------------------------------------------------
r86 | schacon | 2014-05-02 <<16:00|2>>:21 -<<0700|18:0>> (Sat, 02 May 2014) | 2 lines

Merge branch 'experiment'

------------------------------------------------------------------------
r85 | schacon | 2014-05-02 <<16:00|2>>:09 -<<0700|18:0>> (Sat, 02 May 2014) | 2 lines

updated the changelog

You should know two important things about git svn log.
First, it works offline, unlike the real svn log command, which asks the Subversion server for the data.
Second, it only shows you commits that have been committed up to the Subversion server.
Local Git commits that you haven\x{2019}t dcommited don\x{2019}t show up; neither do commits that people have made to the Subversion server in the meantime.
It\x{2019}s more like the last known state of the commits on the Subversion server.",
          ],
          [
            1,
            '[16:07] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 16:07',
            '$ git svn info
Path: .
URL: https://schacon-test.googlecode.com/svn/trunk
Repository Root: https://schacon-test.googlecode.com/svn
Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: schacon
Last Changed Rev: 87
Last Changed Date: 2009-05-02 <<16:07|2>>:37 -<<0700|18:0>> (Sat, 02 May 2009)

This is like blame and log in that it runs offline and is up to date only as of the last time you communicated with the Subversion server.',
          ],
          [
            1,
            '[ap 08:00] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 0800',
            "\$ cat notes/hg
d4c10386...

\$ git cat-file -p d4c10386...
tree 1781c96...
author remote-hg <> 1408066400 -<<0800|18:0>>
committer remote-hg <> 1408066400 -<<0800|18:0>>

Notes for master

\$ git ls-tree 1781c96...
100644 blob ac9117f...	65bb417...
100644 blob 485e178...	ac7955c...

\$ git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9

So refs/notes/hg points to a tree, which in the Git object database is a list of other objects with names.
git ls-tree outputs the mode, type, object hash, and filename for items inside a tree.
Once we dig down to one of the tree items, we find that inside it is a blob named \x{201c}ac9117f\x{201d} (the SHA-1 hash of the commit pointed to by master), with contents \x{201c}0a04b98\x{201d} (which is the ID of the Mercurial changeset at the tip of the default branch).",
          ],
          [
            1,
            '[19:33] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 19:33',
            '$ hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 <<19:33|2>> -<<0700|18:0>>   ben
|\\     Merge remote-tracking branch \'origin/master\'
| |
| o  4   64f27bcefc35   2014-08-14 <<19:27|2>> -<<0700|18:0>>   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 <<19:27|2>> -<<0700|18:0>>   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 <<19:30|2>> -<<0700|18:0>>   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 <<01:21|2>> -<<0700|18:0>>   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 <<01:20|2>> -<<0700|18:0>>   mpm
     Create a standard "hello, world" program

The changeset numbered 2 was made by Mercurial, and the changesets numbered 3 and 4 were made by git-remote-hg, by pushing commits made with Git.',
          ],
          [
            1,
            '[20:06] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 20:06',
            "\$ hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub <ben\@straub.cc>
date:        Thu Aug 14 <<20:06|2>>:38 2014 -<<0700|18:0>>
summary:     More documentation

Note the line that begins with \x{201c}branch\x{201d}.
Git can\x{2019}t really replicate this (and doesn\x{2019}t need to; both types of branch can be represented as a Git ref), but git-remote-hg needs to understand the difference, because Mercurial cares.",
          ],
          [
            1,
            '[20:06] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 20:06',
            "\$ hg bookmarks
   featureA                  5:bd5ac26f11f9
\$ hg log --style compact -G
\@  6[tip]   8f65e5e02793   2014-08-14 <<20:06|2>> -<<0700|18:0>>   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 <<20:02|2>> -<<0700|18:0>>   ben
|\\     Merge remote-tracking branch 'origin/master'
| |
| o  4   0434aaa6b91f   2014-08-14 <<20:01|2>> -<<0700|18:0>>   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 <<20:00|2>> -<<0700|18:0>>   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 <<20:01|2>> -<<0700|18:0>>   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 <<01:21|2>> -<<0700|18:0>>   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 <<01:20|2>> -<<0700|18:0>>   mpm
     Create a standard \"hello, world\" program

Note the new [featureA] tag on revision 5.
These act exactly like Git branches on the Git side, with one exception: you can\x{2019}t delete a bookmark from the Git side (this is a limitation of remote helpers).",
          ],
          [
            1,
            '[20:21] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 20:21',
            "\$ hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
\$ hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub <ben\@straub.cc>
|  date:        Thu Aug 14 <<20:21|2>>:09 2014 -<<0700|18:0>>
|  summary:     A permanent change
|
| \@  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub <ben\@straub.cc>
|    date:        Thu Aug 14 <<20:06|2>>:38 2014 -<<0700|18:0>>
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub <ben\@straub.cc>
| |  date:        Thu Aug 14 <<20:02|2>>:21 2014 -<<0700|18:0>>
| |  summary:     Merge remote-tracking branch 'origin/master'
[...]

The branch name \x{201c}permanent\x{201d} was recorded with the changeset marked 7.",
          ],
          [
            1,
            '[20:21] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 20:21',
            '$ hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 <<20:21|2>> -<<0700|18:0>>   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 <<20:01|2>> -<<0700|18:0>>   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 <<20:00|2>> -<<0700|18:0>>   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 <<20:21|2>> -<<0700|18:0>>   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 <<20:06|2>> -<<0700|18:0>>   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 <<20:02|2>> -<<0700|18:0>>   ben
| |\\     Merge remote-tracking branch \'origin/master\'
| | |
| | o  4   0434aaa6b91f   2014-08-14 <<20:01|2>> -<<0700|18:0>>   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 <<20:00|2>> -<<0700|18:0>>   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 <<20:01|2>> -<<0700|18:0>>   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 <<01:21|2>> -<<0700|18:0>>   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 <<01:20|2>> -<<0700|18:0>>   mpm
     Create a standard "hello, world" program

Changesets 8, 9, and 10 have been created and belong to the permanent branch, but the old changesets are still there.
This can be very confusing for your teammates who are using Mercurial, so try to avoid it.',
          ],
          [
            1,
            '[ap 01:22] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 1.22',
            "\$ git clone https://10.0.1.254/Talkhouse
Cloning into 'Talkhouse'...
Username for 'https://10.0.1.254': john
Password for 'https://john\@10.0.1.254':
remote: Counting objects: 630, done.
remote: Compressing objects: 100% (581/581), done.
remote: Total 630 (delta 172), reused 0 (delta 0)
Receiving objects: 100% (630/630), <<1.22|5a:0>> MiB | 0 bytes/s, done.
Resolving deltas: 100% (172/172), done.
Checking connectivity... done.

The virtual-machine image comes equipped with a sample project that you can clone.
Here we\x{2019}re cloning over HTTPS, with the john user that we created above; Git asks for credentials for this connection, but the credential cache will allow us to skip this step for any subsequent requests.",
          ],
          [
            1,
            '[ap 01:21] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 1.21',
            "\$ git clone https://10.0.1.254/Jam
Cloning into 'Jam'...
Username for 'https://10.0.1.254': john
Password for 'https://john\@10.0.1.254':
remote: Counting objects: 2070, done.
remote: Compressing objects: 100% (1704/1704), done.
Receiving objects: 100% (2070/2070), <<1.21|5a:0>> MiB | 0 bytes/s, done.
remote: Total 2070 (delta 1242), reused 0 (delta 0)
Resolving deltas: 100% (1242/1242), done.
Checking connectivity... done.
\$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/rel2.1
\$ git log --oneline --decorate --graph --all
* 0a38c33 (origin/rel2.1) Create Jam 2.1 release branch.
| * d254865 (HEAD, origin/master, origin/HEAD, master) Upgrade to latest metrowerks on Beos -- the Intel one.
| * bd2f54a Put in fix for jam's NT handle leak.
| * c0f29e7 Fix URL in a jam doc
| * cc644ac Radstone's lynx port.
[...]

The first time you do this, it may take some time.
What\x{2019}s happening is that Git Fusion is converting all the applicable changesets in the Perforce history into Git commits.
This happens locally on the server, so it\x{2019}s relatively fast, but if you have a lot of history, it can still take some time.
Subsequent fetches do incremental conversion, so it\x{2019}ll feel more like Git\x{2019}s native speed.",
          ],
          [
            1,
            '[18:26] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 18:26',
            "# A Perforce Change Specification.
#
#  Change:      The change number. 'new' on a new changelist.
#  Date:        The date this specification was last modified.
#  Client:      The client on which the changelist was created.  Read-only.
#  User:        The user who created the changelist.
#  Status:      Either 'pending' or 'submitted'. Read-only.
#  Type:        Either 'public' or 'restricted'. Default is 'public'.
#  Description: Comments about the changelist.  Required.
#  Jobs:        What opened jobs are to be closed by this changelist.
#               You may delete jobs from this list.  (New changelists only.)
#  Files:       What opened files from the default changelist are to be added
#               to this changelist.  You may delete files from this list.
#               (New changelists only.)

Change:  new

Client:  john_bens-mbp_8487

User: john

Status:  new

Description:
   Update link

Files:
   //depot/www/live/index.html   # edit


######## git author ben\@straub.cc does not match your p4 account.
######## Use option --preserve-user to modify authorship.
######## Variable git-p4.skipUserNameCheck hides this message.
######## everything below this line is just the diff #######
--- //depot/www/live/index.html  2014-08-31 <<18:26|2>>:05.000000000 <<0000|18:0>>
+++ /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/index.html   2014-08-31 <<18:26|2>>:05.000000000 <<0000|18:0>>
\@\@ -60,7 +60,7 \@\@
 </td>
 <td valign=top>
 Source and documentation for
-<a href=\"<<http://www.perforce.com/jam/jam.html\">|x17>>
+<a href=\"jam.html\">
 Jam/MR</a>,
 a software build tool.
 </td>

This is mostly the same content you\x{2019}d see by running p4 submit, except the stuff at the end which git-p4 has helpfully included.
Git-p4 tries to honor your Git and Perforce settings individually when it has to provide a name for a commit or changeset, but in some cases you want to override it.
For example, if the Git commit you\x{2019}re importing was written by a contributor who doesn\x{2019}t have a Perforce user account, you may still want the resulting changeset to look like they wrote it (and not you).",
          ],
          [
            1,
            '[ap 10:31] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 10:31',
            "\$ git log -1
commit 775a46f630d8b46535fc9983cf3ebe6b9aa53145
Author: John Doe <john\@example.com>
Date:   Sun Aug 31 <<10:31|2>>:44 2014 -<<0800|18:0>>

    Change page title

    [git-p4: depot-paths = \"//depot/www/live/\": change = 12144]

What happens if you try to submit a merge commit?
Let\x{2019}s give it a try.
Here\x{2019}s the situation we\x{2019}ve gotten ourselves into:",
          ],
          [
            1,
            '[ap 03:41] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 03:41',
            "PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from \$/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben\@straub.cc>
Date:   Fri Aug 1 <<03:41|2>>:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]\$/myproject/Trunk;C16

There are two local branches, master and featureA, which represent the initial starting point of the clone (Trunk in TFVC) and a child branch (featureA in TFVC).
You can also see that the tfs \x{201c}remote\x{201d} has a couple of refs too: default and featureA, which represent TFVC branches.
Git-tfs maps the branch you cloned from to tfs/default, and others get their own names.",
          ],
          [
            1,
            '[00:12] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 00:12',
            'commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 <<00:12|2>>:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029

they look like this:',
          ],
          [
            1,
            '[00:12] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 00:12',
            'commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 <<00:12|2>>:22 2009 +0000

    fixed install - go to trunk

Not only does the Author field look a lot better, but the git-svn-id is no longer there, either.',
          ],
          [
            1,
            '[ap 03:13] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 03:13',
            "\$ git log -2
commit e5da1c909e5db3036475419f6379f2c73710c4e6
Author: giles <giles\@giles\@perforce.com>
Date:   Wed Feb 8 <<03:13|2>>:27 2012 -<<0800|18:0>>

    Correction to line 355; change </UL> to </OL>.

    [git-p4: depot-paths = \"//public/jam/src/\": change = 8068]

commit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98
Author: kwirth <kwirth\@perforce.com>
Date:   Tue Jul 7 <<01:35|2>>:51 2009 -<<0800|18:0>>

    Fix spelling error on Jam doc page (cummulative -> cumulative).

    [git-p4: depot-paths = \"//public/jam/src/\": change = 7304]

You can see that git-p4 has left an identifier in each commit message.
It\x{2019}s fine to keep that identifier there, in case you need to reference the Perforce change number later.
However, if you\x{2019}d like to remove the identifier, now is the time to do so \x{2013} before you start doing work on the new repository.

You can use git filter-branch to remove the identifier strings en masse:",
          ],
          [
            1,
            '[ap 03:13] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 03:13',
            '$ git log -2
commit b17341801ed838d97f7800a54a6f9b95750839b7
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 <<03:13|2>>:27 2012 -<<0800|18:0>>

    Correction to line 355; change </UL> to </OL>.

commit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fff
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 <<01:35|2>>:51 2009 -<<0800|18:0>>

    Fix spelling error on Jam doc page (cummulative -> cumulative).

Your import is ready to push up to your new Git server.',
          ],
          [
            1,
            '[ap 11:20] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 11-20',
            'PS> cat AUTHORS_TMP | cut -b <<11-20|5a:0>> | tail -n+3 | sort | uniq > AUTHORS

The cut command keeps only the characters between 11 and 20 from each line.
The tail command skips the first two lines, which are field headers and ASCII-art underlines.
The result of all of this is piped to sort and uniq to eliminate duplicates, and saved to a file named AUTHORS.
The next step is manual; in order for git-tfs to make effective use of this file, each line must be in this format:',
          ],
          [
            1,
            '[ap 07:00] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 0700',
            "# print the import information
puts 'commit refs/heads/master'
puts 'mark :' + mark
puts \"committer #{\$author} #{date} -<<0700|18:0>>\"
export_data('imported from ' + dir)
puts 'from :' + last_mark if last_mark

You hardcode the time zone (-<<0700|18:0>>) because doing so is easy.
If you\x{2019}re importing from another system, you must specify the time zone as an offset.
The commit message must be expressed in a special format:",
          ],
          [
            1,
            '[ap 07:00] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 0700',
            '$ ruby import.rb /opt/import_from
commit refs/heads/master
mark :1
committer John Doe <john@example.com> 1388649600 -<<0700|18:0>>
data 29
imported from back_2014_01_02deleteall
M 644 inline README.md
data 28
# Hello

This is my readme.
commit refs/heads/master
mark :2
committer John Doe <john@example.com> 1388822400 -<<0700|18:0>>
data 29
imported from back_2014_01_04from :1
deleteall
M 644 inline main.rb
data 34
#!/bin/env ruby

puts "Hey there"
M 644 inline README.md
(...)

To run the importer, pipe this output through git fast-import while in the Git directory you want to import into.
You can create a new directory and then run git init in it for a starting point, and then run your script:',
          ],
          [
            1,
            '[19:39] Pro Git - Scott Chacon.epub (OEBPS/ch09-git-and-other-systems.xhtml) - 19:39',
            "\$ git log -2
commit 3caa046d4aac682a55867132ccdfbe0d3fdee498
Author: John Doe <john\@example.com>
Date:   Tue Jul 29 <<19:39|2>>:04 2014 -<<0700|18:0>>

    imported from current

commit 4afc2b945d0d3c8cd00556fbe2e8224569dc9def
Author: John Doe <john\@example.com>
Date:   Mon Feb 3 <<01:00|2>>:00 2014 -<<0700|18:0>>

    imported from back_2014_02_03

There you go \x{2013} a nice, clean Git repository.
It\x{2019}s important to note that nothing is checked out \x{2013} you don\x{2019}t have any files in your working directory at first.
To get them, you must reset your branch to where master is now:",
          ],
          [
            1,
            '[ap 07:00] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 0700',
            '$ git cat-file -p fdf4fc3
tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579
author Scott Chacon <schacon@gmail.com> 1243040974 -<<0700|18:0>>
committer Scott Chacon <schacon@gmail.com> 1243040974 -<<0700|18:0>>

first commit

The format for a commit object is simple: it specifies the top-level tree for the snapshot of the project at that point; the author/committer information (which uses your user.name and user.email configuration settings and a timestamp); a blank line, and then the commit message.',
          ],
          [
            1,
            '[18:15] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 18:15',
            "\$ git log --stat 1a410e
commit 1a410efbd13591db07496601ebc7a059dd55cfe9
Author: Scott Chacon <schacon\@gmail.com>
Date:   Fri May 22 <<18:15|2>>:24 2009 -0700

	third commit

 bak/test.txt | 1 +
 1 file changed, 1 insertion(+)

commit cac0cab538b970a37ea1e769cbbde608743bc96d
Author: Scott Chacon <schacon\@gmail.com>
Date:   Fri May 22 <<18:14|2>>:29 2009 -0700

	second commit

 new.txt  | 1 +
 test.txt | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)

commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d
Author: Scott Chacon <schacon\@gmail.com>
Date:   Fri May 22 <<18:09|2>>:34 2009 -<<0700|18:0>>

    first commit

 test.txt | 1 +
 1 file changed, 1 insertion(+)

Amazing.
You\x{2019}ve just done the low-level operations to build up a Git history without using any of the front end commands.
This is essentially what Git does when you run the git add and git commit commands\x{2009}\x{2014}\x{2009}it stores blobs for the files that have changed, updates the index, writes out trees, and writes commit objects that reference the top-level trees and the commits that came immediately before them.
These three main Git objects\x{2009}\x{2014}\x{2009}the blob, the tree, and the commit\x{2009}\x{2014}\x{2009}are initially stored as separate files in your .git/objects directory.
Here are all the objects in the example directory now, commented with what they store:",
          ],
          [
            1,
            '[16:48] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 16:48',
            "\$ git cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2
object 1a410efbd13591db07496601ebc7a059dd55cfe9
type commit
tag v1.1
tagger Scott Chacon <schacon\@gmail.com> Sat May 23 <<16:48|2>>:58 2009 -<<0700|18:0>>

test tag

Notice that the object entry points to the commit SHA-1 value that you tagged.
Also notice that it doesn\x{2019}t need to point to a commit; you can tag any Git object.
In the Git source code, for example, the maintainer has added their GPG public key as a blob object and then tagged it.
You can view the public key by running this in a clone of the Git repository:",
          ],
          [
            1,
            '[ap 01:00] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - one',
            "\$ cat .git/refs/remotes/origin/master
ca82a6dff817ec66f44342007202690a93763949

Remote references differ from branches (refs/heads references) mainly in that they\x{2019}re considered read-only.
You can git checkout to one, but Git won\x{2019}t point HEAD at <<one|9c:0>>, so you\x{2019}ll never update it with a commit command.
Git manages them as bookmarks to the last known state of where those branches were on those servers.",
          ],
          [
            1,
            '[ap 07:00] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 0700',
            "\$ git cat-file -p ca82a6dff817ec66f44342007202690a93763949
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
author Scott Chacon <schacon\@gmail.com> 1205815931 -<<0700|18:0>>
committer Scott Chacon <schacon\@gmail.com> 1240030591 -<<0700|18:0>>

changed the version number

Next, you have two more objects to retrieve \x{2013} cfda3b, which is the tree of content that the commit we just retrieved points to; and 085bb3, which is the parent commit:",
          ],
          [
            1,
            '[00:00] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 0000',
            "\$ ssh -x git\@server \"git-receive-pack 'simplegit-progit.git'\"
00a5ca82a6dff817ec66f4437202690a93763949 refs/heads/master\x{25a1}report-status \\
	delete-refs side-band-64k quiet ofs-delta \\
	agent=git/2:2.1.1+github-607-gfba4028 delete-refs
<<0000|18:0>>

The git-receive-pack command immediately responds with one line for each reference it currently has \x{2013} in this case, just the master branch and its SHA-1.
The first line also has a list of the server\x{2019}s capabilities (here, report-status, delete-refs, and some others, including the client identifier).",
          ],
          [
            1,
            '[00:00] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 0000',
            'Each line starts with a 4-character hex value specifying how long the rest of the line is.
Your first line starts with 00a5, which is hexadecimal for 165, meaning that 165 bytes remain on that line.
The next line is <<0000|18:0>>, meaning the server is done with its references listing.',
          ],
          [
            1,
            '[00:00] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 0000',
            "0076ca82a6dff817ec66f44342007202690a93763949 15027957951b64cf874c3557a0f3547bd83b3ff6 \\
	refs/heads/master report-status
006c0000000000000000000000000000000000000000 cdfdb42577e2506715f8cfeacdbabc092bf63e8d \\
	refs/heads/experiment
<<0000|18:0>>

Git sends a line for each reference you\x{2019}re updating with the line\x{2019}s length, the old SHA-1, the new SHA-1, and the reference that is being updated.
The first line also has the client\x{2019}s capabilities.
The SHA-1 value of all '0\x{2019}s means that nothing was there before \x{2013} because you\x{2019}re adding the experiment reference.
If you were deleting a reference, you would see the opposite: all '0\x{2019}s on the right side.",
          ],
          [
            1,
            '[00:00] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 0000',
            "=> GET http://server/simplegit-progit.git/info/refs?service=git-receive-pack
001f# service=git-receive-pack
00ab6c5f0e45abd7832bf23074a333f739977c9e8188 refs/heads/master\x{25a1}report-status \\
	delete-refs side-band-64k quiet ofs-delta \\
	agent=git/2:2.1.1~vmg-bitmaps-bugaloo-608-g116744e
<<0000|18:0>>

That\x{2019}s the end of the first client-server exchange.
The client then makes another request, this time a POST, with the data that send-pack provides.",
          ],
          [
            1,
            '[00:00] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 0000',
            "00dfca82a6dff817ec66f44342007202690a93763949 HEAD\x{25a1}multi_ack thin-pack \\
	side-band side-band-64k ofs-delta shallow no-progress include-tag \\
	multi_ack_detailed symref=HEAD:refs/heads/master \\
	agent=git/2:2.1.1+github-607-gfba4028
003fe2409a098dc3e53539a9028a94b6224db9d6a6b6 refs/heads/master
<<0000|18:0>>

This is very similar to what receive-pack responds with, but the capabilities are different.
In addition, it sends back what HEAD points to (symref=HEAD:refs/heads/master) so the client knows what to check out if this is a clone.",
          ],
          [
            1,
            '[00:00] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 0000',
            '003cwant ca82a6dff817ec66f44342007202690a93763949 ofs-delta
0032have 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
0009done
<<0000|18:0>>



HTTP(S)
The handshake for a fetch operation takes two HTTP requests.
The first is a GET to the same endpoint used in the dumb protocol:',
          ],
          [
            1,
            '[00:00] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 0000',
            "=> GET \$GIT_URL/info/refs?service=git-upload-pack
001e# service=git-upload-pack
00e7ca82a6dff817ec66f44342007202690a93763949 HEAD\x{25a1}multi_ack thin-pack \\
	side-band side-band-64k ofs-delta shallow no-progress include-tag \\
	multi_ack_detailed no-done symref=HEAD:refs/heads/master \\
	agent=git/2:2.1.1+github-607-gfba4028
003fca82a6dff817ec66f44342007202690a93763949 refs/heads/master
<<0000|18:0>>

This is very similar to invoking git-upload-pack over an SSH connection, but the second exchange is performed as a separate request:",
          ],
          [
            1,
            '[00:00] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 0000',
            '=> POST $GIT_URL/git-upload-pack HTTP/1.0
0032want 0a53e9ddeaddad63ad106860237bbf53411d11a7
0032have 441b40d833fdfa93eb2908e52742248faf0ee993
<<0000|18:0>>

Again, this is the same format as above.
The response to this request indicates success or failure, and includes the packfile.',
          ],
          [
            1,
            '[18:22] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 18:22',
            '$ git log -g
commit 1a410efbd13591db07496601ebc7a059dd55cfe9
Reflog: HEAD@{0} (Scott Chacon <schacon@gmail.com>)
Reflog message: updating HEAD
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 <<18:22|2>>:37 2009 -0700

		third commit

commit ab1afef80fac8e34258ff41fc1b867c702daa24b
Reflog: HEAD@{1} (Scott Chacon <schacon@gmail.com>)
Reflog message: updating HEAD
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 <<18:15|2>>:24 2009 -<<0700|18:0>>

       modified repo.rb a bit

It looks like the bottom commit is the one you lost, so you can recover it by creating a new branch at that commit.
For example, you can start a branch named recover-branch at that commit (ab1afef):',
          ],
          [
            1,
            '[20:12] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 20:12',
            '$ GIT_TRACE=true git lga
<<20:12|2>>:49.877982 git.c:554               trace: exec: \'git-lga\'
<<20:12|2>>:49.878369 run-command.c:341       trace: run_command: \'git-lga\'
<<20:12|2>>:49.879529 git.c:282               trace: alias expansion: lga => \'log\' \'--graph\' \'--pretty=oneline\' \'--abbrev-commit\' \'--decorate\' \'--all\'
<<20:12|2>>:49.879885 git.c:349               trace: built-in: git \'log\' \'--graph\' \'--pretty=oneline\' \'--abbrev-commit\' \'--decorate\' \'--all\'
<<20:12|2>>:49.899217 run-command.c:341       trace: run_command: \'less\'
<<20:12|2>>:49.899675 run-command.c:192       trace: exec: \'less\'

GIT_TRACE_PACK_ACCESS controls tracing of packfile access.
The first field is the packfile being accessed, the second is the offset within that file:',
          ],
          [
            1,
            '[20:10] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 20:10',
            "\$ GIT_TRACE_PACK_ACCESS=true git status
<<20:10|2>>:12.081397 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 12
<<20:10|2>>:12.081886 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 34662
<<20:10|2>>:12.082115 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 35175
# [\x{2026}]
<<20:10|2>>:12.087398 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 56914983
<<20:10|2>>:12.087419 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 14303666
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean

GIT_TRACE_PACKET enables packet-level tracing for network operations.",
          ],
          [
            1,
            '[20:15] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 20:15',
            "\$ GIT_TRACE_PACKET=true git ls-remote origin
<<20:15|2>>:14.867043 pkt-line.c:46           packet:          git< # service=git-upload-pack
<<20:15|2>>:14.867071 pkt-line.c:46           packet:          git< <<0000|18:0>>
<<20:15|2>>:14.867079 pkt-line.c:46           packet:          git< 97b8860c071898d9e162678ea1035a8ced2f8b1f HEAD\\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow no-progress include-tag multi_ack_detailed no-done symref=HEAD:refs/heads/master agent=git/2.0.4
<<20:15|2>>:14.867088 pkt-line.c:46           packet:          git< 0f20ae29889d61f2e93ae00fd34f1cdb53285702 refs/heads/ab/add-interactive-show-diff-func-name
<<20:15|2>>:14.867094 pkt-line.c:46           packet:          git< 36dc827bc9d17f80ed4f326de21247a5d1341fbc refs/heads/ah/doc-gitk-config
# [\x{2026}]

GIT_TRACE_PERFORMANCE controls logging of performance data.
The output shows how long each particular git invocation takes.",
          ],
          [
            1,
            '[20:18] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 20:18',
            "\$ GIT_TRACE_PERFORMANCE=true git gc
<<20:18|2>>:19.499676 trace.c:414             performance: 0.374835000 s: git command: 'git' 'pack-refs' '--all' '--prune'
<<20:18|2>>:19.845585 trace.c:414             performance: 0.343020000 s: git command: 'git' 'reflog' 'expire' '--all'
Counting objects: 170994, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (43413/43413), done.
Writing objects: 100% (170994/170994), done.
Total 170994 (delta 126176), reused 170524 (delta 125706)
<<20:18|2>>:23.567927 trace.c:414             performance: 3.715349000 s: git command: 'git' 'pack-objects' '--keep-true-parents' '--honor-pack-keep' '--non-empty' '--all' '--reflog' '--unpack-unreachable=2.weeks.ago' '--local' '--delta-base-offset' '.git/objects/pack/.tmp-49190-pack'
<<20:18|2>>:23.584728 trace.c:414             performance: 0.000910000 s: git command: 'git' 'prune-packed'
<<20:18|2>>:23.605218 trace.c:414             performance: 0.017972000 s: git command: 'git' 'update-server-info'
<<20:18|2>>:23.606342 trace.c:414             performance: 3.756312000 s: git command: 'git' 'repack' '-d' '-l' '-A' '--unpack-unreachable=2.weeks.ago'
Checking connectivity: 170994, done.
<<20:18|2>>:25.225424 trace.c:414             performance: 1.616423000 s: git command: 'git' 'prune' '--expire' '2.weeks.ago'
<<20:18|2>>:25.232403 trace.c:414             performance: 0.001051000 s: git command: 'git' 'rerere' 'gc'
<<20:18|2>>:25.233159 trace.c:414             performance: 6.112217000 s: git command: 'git' 'gc'

GIT_TRACE_SETUP shows information about what Git is discovering about the repository and environment it\x{2019}s interacting with.",
          ],
          [
            1,
            '[20:19] Pro Git - Scott Chacon.epub (OEBPS/ch10-git-internals.xhtml) - 20:19',
            "\$ GIT_TRACE_SETUP=true git status
<<20:19|2>>:47.086765 trace.c:315             setup: git_dir: .git
<<20:19|2>>:47.087184 trace.c:316             setup: worktree: /Users/ben/src/git
<<20:19|2>>:47.087191 trace.c:317             setup: cwd: /Users/ben/src/git
<<20:19|2>>:47.087194 trace.c:318             setup: prefix: (null)
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean




GIT_SSH, if specified, is a program that is invoked instead of ssh when Git tries to connect to an SSH host.
It is invoked like \$GIT_SSH [username\@]host [-p <port>] <command>.
Note that this isn\x{2019}t the easiest way to customize how ssh is invoked; it won\x{2019}t support extra command-line parameters, so you\x{2019}d have to write a wrapper script and set GIT_SSH to point to it.
It\x{2019}s probably easier just to use the ~/.ssh/config file for that.",
          ],
        ];

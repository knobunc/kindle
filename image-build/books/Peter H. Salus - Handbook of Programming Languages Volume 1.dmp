$VAR1 = [
          [
            1,
            '[ap ~ 09:52] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (038-043.html) - around 8 to 10',
            'One drawback with the handle-based Thread Pool model is that the size of the socket listen queue is relatively small (<<around 8 to 10|10>> connections on most OS platforms). Therefore, high-volume servers that receive hundreds of Web hits per second might not be able to accept connections fast enough to keep the kernel from rejecting clients. Moreover, it is not possible to prioritize which connections are dropped because the kernel does not distinguish among different clients.',
          ],
          [
            1,
            '[ap 01:22] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (045-048.html) - 1:22',
            'Johnson, R., and B. Foote. 1988. Designing reusable classes. Journal of Object-Oriented Programming <<1:22|2>>-35.',
          ],
          [
            1,
            '[ap 00:13] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (062-064.html) - 12-13',
            "Smalltalk-76 was initially implemented on Altos. The Altos were robust machines, holding up to use by Xerox PARC administrators, secretaries, and researchers, as well as the large number of children and other visitors PARC hosted. LRG did a number of projects in Smalltalk-76 to test the breadth of applications that could be expressed easily with Smalltalk. One of these was an application to manage the book catalog of the PARC library. The application was actively used for a number of years. Most of the educational experimentation was done with specially conducted classes of students ages <<12-13|5a:0>>. These classes were held in cooperation with a local junior high school\x{2019}s mentally gifted minors program. The students were driven to PARC during the school day. Saturday classes were held for the children of PARC employees.",
          ],
          [
            1,
            '[18:26] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (091-094.html) - 18-26',
            'Ungar, D., and F. Jackson. 1988. Tenuring policies for generation-based storage reclamation. Proceedings of the ACM OOPSLA 88 Conference, Special Issue of SIGPLAN Notices 23(11):<<18-26|5a:0>>.',
          ],
          [
            1,
            '[13:25] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (091-094.html) - 13-25',
            'Wirth, N. K., and H. Weber. 1966. EULER: A generalization of ALGOL and its formal definition: Part I. Communications of the ACM 9(1):<<13-25|5a:0>>.',
          ],
          [
            1,
            '[ap 01:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (152-155.html) - 1',
            'The basic message for accessing an element according to its position is at:. The numbering of element position starts at <<1|9g>>:',
          ],
          [
            1,
            '[ap 01:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (178-181.html) - 1-10',
            '1 to: 10 do: [:i | ]
Go through interval of <<1-10|5a:0>>, passing value into block
[] whileTrue: []',
          ],
          [
            1,
            '[ap 05:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (193-194.html) - 5.10',
            "The future of Smalltalk is one of slow, steady growth. Although there is currently great publicity for Java, this languages is a long way from providing the stable solutions that Smalltalk has been providing for years. The overly optimistic prediction of the International Data Corporation in the report titled \x{201c}Smalltalk Market Accelerates\x{201d} (McClure, 1995)(commissioned by the Smalltalk Industry Council) predicted an exponential growth in Smalltalk sales, but the reality has been closer to linear growth over the last few years. A more recent report from International Data Corporation titled \x{201c}Smalltalk Strengths Stand Out\x{201d} (McClure, 1997) reports that the predicted exponential growth was incorrect, but that Smalltalk will continue its 20% annual growth. The existing applications in Smalltalk will continue to be enhanced and extended, and as more developers become knowledgeable about object-oriented concepts, they will choose object-oriented development tools such as Smalltalk for their applications. The role of Smalltalk as a server will increase as the need for complex application servers to provide content to the Internet and intranet clients skyrockets. Smalltalk has the maturity and current assets to provide this functionality, but it still commands a premium price (although the prices are dropping). The individual must weed through the various claims about development tools and products. One fact that probably isn\x{2019}t mentioned often is that most Smalltalk developers really enjoy Smalltalk and wouldn\x{2019}t trade it for another language unless it offered everything that Smalltalk offers and has at least one great advantage over Smalltalk.
<<5.10|9p>>. Smalltalk Places of Interest
The following Web sites offer additional information for those who wish to learn more about Smalltalk and the Smalltalk environment.",
          ],
          [
            1,
            '[ap 05:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (193-194.html) - 5.11',
            'http://www.smalltalksystems.com (Former Digitalk and ObjectShare people and products)
<<5.11|5a:0>>. References
Bergin, T., and R. Gibson (Eds.). 1996. History of programming language, Volume 2. New York: ACM Press, pp. 511-598.',
          ],
          [
            1,
            '[ap 06:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (297-300.html) - 6.10',
            'Thanks to Peter Salus for encouraging me to bring this story from 1991 up toward the end of the standards process.
<<6.10|9p>>. References
Babcisky, K. September 1984. Simula performance assessment. Conference on System Implementation Languages: Experience and Assessment. Canterbury, Kent, UK.',
          ],
          [
            1,
            '[16:33] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (297-300.html) - 16-33',
            'Koenig, A., and B. Stroustrup. 1990. Exception handling for C++. Journal of Object-Oriented Programming 3(2):<<16-33|5a:0>>.',
          ],
          [
            1,
            '[ap 09:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (328-331.html) - 9',
            "We aren\x{2019}t quite saying that because xx[10] doesn\x{2019}t exist the indices stop at <<9|9c:0>>. But for appropriate values of i, we are saying that *xx[i] has type int.",
          ],
          [
            1,
            '[ap 01:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (382-385.html) - 1',
            'Each constructor uses new to allocate, in dynamic memory, an appropriate object of a class that is derived from Node, and stores the address of that object in the Tree it is constructing. The Node constructor automatically ensures that the use count starts out at <<1|9c:0>>.',
          ],
          [
            1,
            '[ap 07:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (400-403.html) - 7.10',
            'Koenig, A., and B. E. Moo. 1997. 1997. Ruminations on C++. Reading, MA: Addison-Wesley.
<<7.10|9p>>. Acknowledgments
Thanks to Jeffrey Oldham and Bjarne Stroustrup for reviewing drafts of this article.',
          ],
          [
            1,
            '[ap 01:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (407-409.html) - one',
            "\x{2022} Why C counts from zero instead of from <<one|9c:0>>, along with a description of how to use C\x{2019}s counting style to avoid fencepost errors.",
          ],
          [
            1,
            '[ap 09:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (535-31.html) - 9.10',
            'Covariance complicates somewhat the static type checking mechanism; mechanisms of system validity and catcalls address the problem, which is discussed in detail in the book Object-Oriented Software Construction (Meyer, 1997).
<<9.10|9p>>. Other Important Mechanisms
We now examine a few supplementary mechanisms that complement the preceding picture: shared objects, constants, instructions, and lexical conventions.',
          ],
          [
            1,
            '[ap 09:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (542-34.html) - 9.11',
            "Successive declarations or instructions may be separated by semicolons. Eiffel\x{2019}s syntax has been so designed, however, that (except in rare cases) the semicolon is optional. Omitting semicolons for elements appearing on separate lines lightens text and is the recommended practice. For clarity, however, successive elements appearing on a single line should always be separated by semicolons. These are the rules applied in this chapter.
<<9.11|9p>>. Concurrency and Further Developments
Recent work has resulted in advanced mechanisms being made available to the Eiffel community in the area of concurrency, Internet development, multithreading, and CORBA.",
          ],
          [
            1,
            '[ap 09:12] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (545-547.html) - 9.12',
            "\x{2022} Interfaces to many other industry-standard products.
<<9.12|9p>>. Eiffel History
I designed Eiffel on September 23, 1985. It was initially intended as an internal tool for the newly created ISE. The first internal implementation was ready in mid-1986.",
          ],
          [
            1,
            '[ap 09:13] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (547-551.html) - 9.13',
            "The name Eiffel is a homage to Gustave Eiffel, the man who built the eponymous tower in Paris as well as many other durable constructions such as the metallic armature of the Statue of Liberty in New York and the Budapest railway station. The Eiffel Tower, started in 1887 for the 1889 World\x{2019}s Fair, was completed on time and within budget; it has survived political hostility and attempts at destruction, found many new uses (such as radio and television), and proved to be robust and efficient. Built out of a small number of robust, elegant design patterns, combined and varied repeatedly to yield a powerful result, it is the best symbol of what Eiffel can achieve for the software world.
<<9.13|9p>>. More Information on Eiffel
9.13.1. Documentation",
          ],
          [
            1,
            '[ap 01:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (564-568.html) - 1.11',
            'Over the roughly ten years of Ada 83, the ACVC was, of course, updated a number of times, to take account of practical experience with the compilers, add new tests as compiler bugs were discovered, and so on. The final operative Ada 83 test suite was ACVC <<1.11|5a:0>>, containing more than 2000 distinct test segments. Various forms of the applicable regulations determined the frequency with which a validated compiler was required to be retested with a newer test suite.',
          ],
          [
            1,
            '[ap 01:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (564-568.html) - 1.11',
            "\x{2022} Ada 9X Basic: This is the subset of tests from ACVC <<1.11|5a:0>> after removal of tests not applicable to Ada 95. These tests focus on support expected from Ada for features of Ada 83 that have been updated to be compatible with revised rules.",
          ],
          [
            1,
            '[ap 02:01] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (568-570.html) - 2.01',
            'Tables 10.1 and 10.2, quoted from the VCL with minor reformatting, show the actual ACVC <<2.01|5a:0>> test profile run in March 1997, for the GNU Ada 95 (GNAT) compiler under Solaris.',
          ],
          [
            1,
            '[00:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (578-580.html) - midnight',
            'Lines 4-7 define four subtypes. A subtype declaration creates a subset of the values of the original type; subtypes are commonly used, as here, to restrict the appropriate ranges of certain variables. The three Integer subtypes here have obvious meanings in the calendar; the three functions in lines 11-13 extract the corresponding components from a Time value. The Duration subtype Day_Duration provides the elapsed time values in a 24-hour period; the function Seconds returns the time elapsed since <<midnight|13>> of the given day.',
          ],
          [
            1,
            '[00:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (583-586.html) - midnight',
            'are integer expressions, computing the quotient and the remainder respectively. In Ada, the interpretation of arithmetic operators, including division, depends on the types of their operands. SecsPast_0h00 (seconds since <<midnight|13>>) and 60 are both integer values, so the division is a truncating one.',
          ],
          [
            1,
            '[ap 09:15] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (583-586.html) - 09:15',
            'In the example, because the values of all the variables are computed at the time their declarations are elaborated, the statement-sequence part of the program need only display the result. Lines 19-23 display the date just as before; the rest of the program displays the time in 24-hour hh:mm:ss form. The if statements in lines 25-27, 31-33, and 37-39 are used to display leading zeroes where necessary, for example, <<09:15|2>>:08. if statements are fully bracketed; that is, the if must have a closing end if. An if can include a single else or one or more elsif clauses. Two other if variations are',
          ],
          [
            1,
            '[20:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (592-595.html) - 20.00',
            'A transaction containing bad data is ignored (in a real application, it would be written to an error report); for the file bad.dat containing a misspelled gadget type (gren),
green 56.00 blue 25.00 gren <<20.00|5a:0>> black -20.00
the command show_exception bad.dat results in',
          ],
          [
            1,
            '[00:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (598-600.html) - midnight',
            'returns a value corresponding to <<midnight|13>> at the start of July 29, 1997. On the other hand,',
          ],
          [
            1,
            "[ap 02:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (598-600.html) - 2 o\x{2019}clock",
            "Lines 29-32 define infix operators for Time values. Note that there is no operator to add two times; it is physically meaningless to add <<2 o\x{2019}clock|6>> to <<3 o\x{2019}clock|6>>. On the other hand, adding a Duration and a Time is meaningful\x{2014}Duration represents elapsed time, and <<2 o\x{2019}clock|6>> plus 15 minutes gives <<2:15|2>>. Note that I need one operator for the Time value on the left and another for the Duration value on the left.",
          ],
          [
            1,
            '[ap 00:15] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (626-629.html) - 12:15',
            'Speed : 45 Miles per Hour Fuel : 60 % Water : <****************....> Oil : <******..............> Time : <<12:15|2>>:00 Chronometer : <<79976>>',
          ],
          [
            1,
            '[ap 00:15] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (634-636.html) - 12:15',
            'Speed : 45 Miles per Hour Fuel : 60 % Water : <****************....> Oil : <******..............> Time : <<12:15|2>>:00 Chronometer : <<79976>>',
          ],
          [
            1,
            '[17:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (653-656.html) - 5 PM',
            'The terminate alternative provides a kind of graceful implicit termination of a task. A task also terminates if control passes to the end of its body, so I could use program logic to force this task out of its main loop. For example, I could write a finite one:
while the time is earlier than <<5 PM|5>> loop ... end loop;
and the task would terminate <<just after 5 p.m.|10>> The disadvantage here is that I would strand any pending calls. Other strategies are also possible; the programmer has substantial flexibility here.',
          ],
          [
            1,
            '[> 17:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (653-656.html) - just after 5 p.m.',
            'and the task would terminate <<just after 5 p.m.|10>> The disadvantage here is that I would strand any pending calls. Other strategies are also possible; the programmer has substantial flexibility here.',
          ],
          [
            1,
            '[ap 11:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (726-728.html) - 11.10',
            'In unsafe interfaces and modules, the type constructor UNTRACED REF T is allowed for traced as well as untraced T, and the fields of untraced objects can be traced. If u is an untraced reference to a traced variable t, then the validity of the traced references in t is implementation dependent because the garbage collector probably will not trace them through u.
<<11.10|9p>>. Required Interfaces
There are several fundamental interfaces that every Modula-3 implementation must provide:',
          ],
          [
            1,
            '[ap 11:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (737-740.html) - 11.11',
            'Next
<<11.11|5a:0>>. Syntax
Care should be taken, when using colons and semicolons in the same sentence, that the reader understands how far the force of each sign carries.',
          ],
          [
            1,
            '[ap 11:12] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (742-744.html) - 11.12',
            "Id = Letter {Letter | Digit | \x{201c}_\x{201d}}. Literal = Number | CharLiteral | TextLiteral. CharLiteral = \x{201c}\x{2018}\x{201c} (PrintingChar | Escape | DQUOTE) \x{201c}\x{2018}\x{201c}. TextLiteral = DQUOTE {PrintingChar | Escape | \x{201c}\x{2018}\x{201c}} DQUOTE. Escape = \x{201c}\\\x{201d} \x{201c}n\x{201d} | \x{201c}\\\x{201d} \x{201c}t\x{201d} | \x{201c}\\\x{201d} \x{201c}r\x{201d} | \x{201c}\\\x{201d} \x{201c}f\x{201d} | \x{201c}\\\x{201d} \x{201c}\\\x{201d} | \x{201c}\\\x{201d} \x{201c}\x{2018}\x{201c} | \x{201c}\\\x{201d} DQUOTE | \x{201c}\\\x{201d} OctalDigit OctalDigit OctalDigit. Number = Digit {Digit} | Digit {Digit} \x{201c}_\x{201d} HexDigit {HexDigit} | Digit {Digit} \x{201c}.\x{201d} Digit {Digit} [Exp]. Exp = (\x{201c}E\x{201d} | \x{201c}e\x{201d} | \x{201c}D\x{201d} | \x{201c}d\x{201d} | \x{201c}X\x{201d} | \x{201c}x\x{201d}) [\x{201c}+\x{201d} | \x{201c}-\x{201d}] Digit {Digit}. PrintingChar = Letter | Digit | OtherChar. HexDigit = Digit | \x{201c}A\x{201d} | \x{201c}B\x{201d} | \x{201c}C\x{201d} | \x{201c}D\x{201d} | \x{201c}E\x{201d} | \x{201c}F\x{201d} | \x{201c}a\x{201d} | \x{201c}b\x{201d} | \x{201c}c\x{201d} | \x{201c}d\x{201d} | \x{201c}e\x{201d} | \x{201c}f\x{201d}. Digit = \x{201c}0\x{201d} | \x{201c}1\x{201d} | ... | \x{201c}9\x{201d}. OctalDigit = \x{201c}0\x{201d} | \x{201c}1\x{201d} | ... | \x{201c}7\x{201d}. Letter = \x{201c}A\x{201d} | \x{201c}B\x{201d} | ... | \x{201c}Z\x{201d} | \x{201c}a\x{201d} | \x{201c}b\x{201d} | ... | \x{201c}z\x{201d}. OtherChar = \x{201c} \x{201c} | \x{201c}!\x{201d} | \x{201c}#\x{201d} | \x{201c}\$\x{201d} | \x{201c}%\x{201d} | \x{201c}&\x{201d} | \x{201c}(\x{201c} | \x{201c})\x{201d} | \x{201c}*\x{201d} | \x{201c}+\x{201d} | \x{201c},\x{201d} | \x{201c}-\x{201d} | \x{201c}.\x{201d} | \x{201c}/\x{201d} | \x{201c}:\x{201d} | \x{201c};\x{201d} | \x{201c}<\x{201d} | \x{201c}=\x{201d} | \x{201c}>\x{201d} | \x{201c}?\x{201d} | \x{201c}\@\x{201d} | \x{201c}[\x{201c} | \x{201c}]\x{201d} | \x{201c}^\x{201d} | \x{201c}_\x{201d} | \x{201c}`\x{201d} | \x{201c}{\x{201c} | \x{201c}|\x{201d} | \x{201c}}\x{201d} | \x{201c} \x{201c} | ExtendedChar ExtendedChar = any char with ISO-Latin-1 code in [8_ 240.. 8_ 377].
<<11.12|9p>>. Acknowledgments
The original definition of Modula-3 was given in SRC Research Report 31, August 1988. It was revised in Report 52, November 1989 and finally published in Systems Programming with Modula-3, November 1989. This edition of the language definition is derived from all of these reports.",
          ],
          [
            1,
            '[13:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (765-767.html) - 13.10',
            'Modify ImprovedFibonacci to store the String objects it creates into an array instead of invoking println with them directly.
<<13.10|9p>>. Extending a Class
One of the major benefits of object orientation is the ability to extend, or subclass, the behavior of an existing class and continue to use code written for the original class.',
          ],
          [
            1,
            '[13:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (767-770.html) - 13.11',
            "In this example, Pixel\x{2019}s version of clear is invoked, even though the variable that holds the Pixel is declared as a Point reference. But if we write super.clear() inside one of Pixel\x{2019}s methods, Point\x{2019}s clear method is invoked.
<<13.11|9p>>. Interfaces
Sometimes you need only define methods an object must support, but not necessarily supply the implementation of those methods. As long as their behavior meets specific criteria, implementation details of the methods are irrelevant. For example, to ask whether a particular value is contained in a set of values, details of how those values are stored are irrelevant. You would want the methods to work equally well with a linked list of values, a hashtable of values, or any other data structure.",
          ],
          [
            1,
            '[13:12] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (770-772.html) - 13.12',
            "Next
<<13.12|5a:0>>. Exceptions
What do you do when an error occurs in a program? In many languages, error conditions are signaled by unusual return values like 01. Programmers often don\x{2019}t check for exceptional values because they may assume errors \x{201c}can\x{2019}t happen.\x{201d} On the other hand, adding error-detection and recovery to what should be a straightforward flow of logic can obscure that logic to the point where the normal flow is incomprehensible. An ostensibly simple task such as reading a file into memory might require about seven lines of code. Error checking and reporting extend this to 40 or more lines. Making normal operation the needle in your code haystack is undesirable.",
          ],
          [
            1,
            '[13:13] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (772-776.html) - 13.13',
            "Next
<<13.13|5a:0>>. Packages
Name conflicts are a major problem when developing reusable code. No matter how carefully you pick names for classes and methods, somebody else is likely to use that name for a different purpose. If you use simple, descriptive names, the problem gets worse\x{2014}such names are more likely to be used by someone else who was also trying to use simple, descriptive names. Words like set, get, clear, and so on, are used a lot and are almost certain to clash with other people\x{2019}s uses.",
          ],
          [
            1,
            '[13:14] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (772-776.html) - 13.14',
            "If a name is not provided via a package declaration, the class is made part of an unnamed package. Although this is adequate for an application (or applet) that is not loaded with any other code, classes destined for a library should be written in named packages.
<<13.14|9p>>. The Java Infrastructure
Java is designed to maximize portability. Many details about Java are specifically defined for all implementations. For example, an int is a 32-bit two\x{2019}s-complement signed integer. Many languages leave precise definitions to particular implementations, making only general guarantees such as minimum range, or provide a way to ask the system what the range is on the current platform.Java makes these definitions specific all the way down to the machine language into which Java code is translated. Java source code is compiled into Java bytecodes, designed to be run on a Java virtual machine. Bytecodes are a machine language for an abstract machine, but are interpreted by the virtual machine on each system that supports Java.",
          ],
          [
            1,
            '[13:15] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (772-776.html) - 13.15',
            "These features combined give Java code complete platform independence to provide a security model suitable for executing code downloaded across the network at varying levels of trust. Java source code compiled into Java bytecodes can be run on any machine with a Java virtual machine. The code can be executed with an appropriate level of protection to prevent careless or malicious class writers from harming the system. The level of trust can be adjusted depending on the source of the bytecodes\x{2014}bytecodes on the local disk or protected network can be trusted more than bytecodes fetched from arbitrary machines elsewhere in the world.
<<13.15|9p>>. Other Topics Briefly Noted
Java has several other features which we mention briefly here:",
          ],
          [
            1,
            '[20:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (about_split_001.html) - 1960',
            'Just over 40 years ago there were no programming languages. In 1954 programming was still a function of hardware. Fortran was invented in 1957. It was soon being taught. By <<1960|9:0>>, not only had COBOL and Lisp joined the roster, but so had others, many now thankfully forgotten. Over the past 40 years, nearly 4,000 computer languages have been produced. Only a tithe of these are in use today, but the growth and development of them has been progressive and organic.',
          ],
          [
            1,
            '[00:25] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 24-25',
            'C++ language, 27
C++ wrappers, <<24-25|5a:0>> SOCK Acceptor, 30
SOCK Stream, 30',
          ],
          [
            1,
            '[00:26] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 24-26',
            'SOCK Stream, 30
components, <<24-26|5a:0>> self-contained, 27
middleware, 28',
          ],
          [
            1,
            '[00:25] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 24-25',
            'Wilcox, John, 267
wrappers, ACE framework, <<24-25|5a:0>> SOCK Acceptor, 30
SOCK Stream, 30',
          ],
          [
            1,
            '[17:18] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 17-18',
            'complex template class, C++, 393
Complexities communication software, <<17-18|5a:0>>
components ACE framework, 24-27',
          ],
          [
            1,
            '[17:18] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 17-18',
            'Complexities communication software, <<17-18|5a:0>>
components ACE framework, <<24-27|5a:0>>
Eiffel, 463, 546',
          ],
          [
            1,
            '[00:25] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 24-25',
            'C++ language, 27
C++ wrappers, <<24-25|5a:0>>
components, 24-27',
          ],
          [
            1,
            '[00:25] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 24-25',
            'C++ wrappers, <<24-25|5a:0>>
components, 24-27
middleware, 28',
          ],
          [
            1,
            '[19:21] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 19-21',
            'paths, Smalltalk, execution, 169
patterns, 19 communication software, <<19-21|5a:0>>
Smalltalk, 186',
          ],
          [
            1,
            '[17:18] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 17-18',
            'classes, 22
complexities, <<17-18|5a:0>>
frameworks, 19, 22',
          ],
          [
            1,
            '[19:21] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 19-21',
            'OOP, 18
patterns, <<19-21|5a:0>>
problems, 19',
          ],
          [
            1,
            '[ap 05:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 5.10',
            '5.9. Conclusion
<<5.10|5a:0>>. Smalltalk Places of Interest
<<5.11|5a:0>>. References',
          ],
          [
            1,
            '[ap 05:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 5.10',
            "<<5.10|9p>>. Smalltalk Places of Interest
<<5.11|5a:0>>. References
Part III\x{2014}C++ Chapter 6\x{2014}A History of C++ 6.1. Introduction to C++",
          ],
          [
            1,
            '[ap 06:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 6.10',
            "6.9. Acknowledgments
<<6.10|5a:0>>. References
Chapter 7\x{2014}A Detailed Introduction to C++ 7.1. C++ Overview 7.1.1. A Multiparadigm Language",
          ],
          [
            1,
            '[ap 07:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 7.10',
            "7.9. References
<<7.10|5a:0>>. Acknowledgments
Chapter 8\x{2014}C++ Traps and Pitfalls 8.1. Why Programmers Get in Trouble 8.1.1. Two Sources of Pitfalls",
          ],
          [
            1,
            '[ap 09:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 9.10',
            '<<9.10|9p>>. Other Important Mechanisms 9.10.1. once Routines and Shared Objects',
          ],
          [
            1,
            '[ap 09:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 9.11',
            '9.10.4. Lexical Conventions
<<9.11|5a:0>>. Concurrency and Further Developments 9.11.1. SCOOP
9.11.2. Other Developments',
          ],
          [
            1,
            '[ap 09:12] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 9.12',
            '9.11.2. Other Developments
<<9.12|5a:0>>. Eiffel History
<<9.13|5a:0>>. More Information on Eiffel 9.13.1. Documentation',
          ],
          [
            1,
            '[ap 09:12] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 9.12',
            '<<9.12|9p>>. Eiffel History
<<9.13|5a:0>>. More Information on Eiffel 9.13.1. Documentation
9.13.2. Information Sources',
          ],
          [
            1,
            '[ap 11:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 11.10',
            '11.9. Unsafe Operations
<<11.10|5a:0>>. Required Interfaces 11.10.1. The Text Interface
11.10.2. The Thread Interface',
          ],
          [
            1,
            '[ap 11:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 11.11',
            '11.10.6. The FloatMode Interface
<<11.11|5a:0>>. Syntax 11.11.1. Keywords
11.11.2. Reserved Identifiers',
          ],
          [
            1,
            '[ap 11:12] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 11.12',
            "11.11.12. Token Productions
<<11.12|5a:0>>. Acknowledgments
Part VII\x{2014}Java Chapter 12\x{2014}What Is Java?",
          ],
          [
            1,
            '[13:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 13.10',
            '13.9. String Objects
<<13.10|5a:0>>. Extending a Class 13.10.1. The Object Class
13.10.2. Invoking Methods from the Superclass',
          ],
          [
            1,
            '[13:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 13.11',
            '13.10.2. Invoking Methods from the Superclass
<<13.11|5a:0>>. Interfaces
<<13.12|5a:0>>. Exceptions',
          ],
          [
            1,
            '[13:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 13.11',
            '<<13.11|9p>>. Interfaces
<<13.12|5a:0>>. Exceptions
<<13.13|5a:0>>. Packages',
          ],
          [
            1,
            '[13:12] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 13.12',
            '<<13.12|9p>>. Exceptions
<<13.13|5a:0>>. Packages
<<13.14|5a:0>>. The Java Infrastructure',
          ],
          [
            1,
            '[13:13] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 13.13',
            '<<13.13|9p>>. Packages
<<13.14|5a:0>>. The Java Infrastructure
<<13.15|5a:0>>. Other Topics Briefly Noted',
          ],
          [
            1,
            '[13:14] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 13.14',
            "<<13.14|9p>>. The Java Infrastructure
<<13.15|5a:0>>. Other Topics Briefly Noted
Chapter 14\x{2014}Programming in Java 14.1. Getting Started with Java 14.1.1. Why Is Java Interesting?",
          ],
        ];

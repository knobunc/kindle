$VAR1 = [
          [
            1,
            '[ap ~ 09:52] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (038-043.html) - around 8 to 10',
            'One drawback with the handle-based Thread Pool model is that the size of the socket listen queue is relatively small (<<around 8 to 10|10>> connections on most OS platforms). Therefore, high-volume servers that receive hundreds of Web hits per second might not be able to accept connections fast enough to keep the kernel from rejecting clients. Moreover, it is not possible to prioritize which connections are dropped because the kernel does not distinguish among different clients.',
          ],
          [
            1,
            '[ap 01:22] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (045-048.html) - 1:22',
            'Johnson, R., and B. Foote. 1988. Designing reusable classes. Journal of Object-Oriented Programming <<1:22|2>>-35.',
          ],
          [
            1,
            '[ap 00:13] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (062-064.html) - 12-13',
            "Smalltalk-76 was initially implemented on Altos. The Altos were robust machines, holding up to use by Xerox PARC administrators, secretaries, and researchers, as well as the large number of children and other visitors PARC hosted. LRG did a number of projects in Smalltalk-76 to test the breadth of applications that could be expressed easily with Smalltalk. One of these was an application to manage the book catalog of the PARC library. The application was actively used for a number of years. Most of the educational experimentation was done with specially conducted classes of students ages <<12-13|5a:0>>. These classes were held in cooperation with a local junior high school\x{2019}s mentally gifted minors program. The students were driven to PARC during the school day. Saturday classes were held for the children of PARC employees.",
          ],
          [
            1,
            '[18:26] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (091-094.html) - 18-26',
            'Ungar, D., and F. Jackson. 1988. Tenuring policies for generation-based storage reclamation. Proceedings of the ACM OOPSLA 88 Conference, Special Issue of SIGPLAN Notices 23(11):<<18-26|5a:0>>.',
          ],
          [
            1,
            '[13:25] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (091-094.html) - 13-25',
            'Wirth, N. K., and H. Weber. 1966. EULER: A generalization of ALGOL and its formal definition: Part I. Communications of the ACM 9(1):<<13-25|5a:0>>.',
          ],
          [
            1,
            '[ap 01:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (152-155.html) - 1',
            'The basic message for accessing an element according to its position is at:. The numbering of element position starts at <<1|9g>>:',
          ],
          [
            1,
            '[ap 01:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (178-181.html) - 1-10',
            '1 to: 10 do: [:i | ]
Go through interval of <<1-10|5a:0>>, passing value into block
[] whileTrue: []',
          ],
          [
            1,
            '[16:33] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (297-300.html) - 16-33',
            'Koenig, A., and B. Stroustrup. 1990. Exception handling for C++. Journal of Object-Oriented Programming 3(2):<<16-33|5a:0>>.',
          ],
          [
            1,
            '[ap 09:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (328-331.html) - 9',
            "We aren\x{2019}t quite saying that because xx[10] doesn\x{2019}t exist the indices stop at <<9|9c:0>>. But for appropriate values of i, we are saying that *xx[i] has type int.",
          ],
          [
            1,
            '[ap 01:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (382-385.html) - 1',
            'Each constructor uses new to allocate, in dynamic memory, an appropriate object of a class that is derived from Node, and stores the address of that object in the Tree it is constructing. The Node constructor automatically ensures that the use count starts out at <<1|9c:0>>.',
          ],
          [
            1,
            '[ap 01:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (407-409.html) - one',
            "\x{2022} Why C counts from zero instead of from <<one|9c:0>>, along with a description of how to use C\x{2019}s counting style to avoid fencepost errors.",
          ],
          [
            1,
            '[ap 01:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (564-568.html) - 1.11',
            'Over the roughly ten years of Ada 83, the ACVC was, of course, updated a number of times, to take account of practical experience with the compilers, add new tests as compiler bugs were discovered, and so on. The final operative Ada 83 test suite was ACVC <<1.11|5a:0>>, containing more than 2000 distinct test segments. Various forms of the applicable regulations determined the frequency with which a validated compiler was required to be retested with a newer test suite.',
          ],
          [
            1,
            '[ap 01:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (564-568.html) - 1.11',
            "\x{2022} Ada 9X Basic: This is the subset of tests from ACVC <<1.11|5a:0>> after removal of tests not applicable to Ada 95. These tests focus on support expected from Ada for features of Ada 83 that have been updated to be compatible with revised rules.",
          ],
          [
            1,
            '[ap 02:01] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (568-570.html) - 2.01',
            'Tables 10.1 and 10.2, quoted from the VCL with minor reformatting, show the actual ACVC <<2.01|5a:0>> test profile run in March 1997, for the GNU Ada 95 (GNAT) compiler under Solaris.',
          ],
          [
            1,
            '[00:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (578-580.html) - midnight',
            'Lines 4-7 define four subtypes. A subtype declaration creates a subset of the values of the original type; subtypes are commonly used, as here, to restrict the appropriate ranges of certain variables. The three Integer subtypes here have obvious meanings in the calendar; the three functions in lines 11-13 extract the corresponding components from a Time value. The Duration subtype Day_Duration provides the elapsed time values in a 24-hour period; the function Seconds returns the time elapsed since <<midnight|13>> of the given day.',
          ],
          [
            1,
            '[00:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (583-586.html) - midnight',
            'are integer expressions, computing the quotient and the remainder respectively. In Ada, the interpretation of arithmetic operators, including division, depends on the types of their operands. SecsPast_0h00 (seconds since <<midnight|13>>) and 60 are both integer values, so the division is a truncating one.',
          ],
          [
            1,
            '[ap 09:15] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (583-586.html) - 09:15',
            'In the example, because the values of all the variables are computed at the time their declarations are elaborated, the statement-sequence part of the program need only display the result. Lines 19-23 display the date just as before; the rest of the program displays the time in 24-hour hh:mm:ss form. The if statements in lines 25-27, 31-33, and 37-39 are used to display leading zeroes where necessary, for example, <<09:15|2>>:08. if statements are fully bracketed; that is, the if must have a closing end if. An if can include a single else or one or more elsif clauses. Two other if variations are',
          ],
          [
            1,
            '[20:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (592-595.html) - 20.00',
            'A transaction containing bad data is ignored (in a real application, it would be written to an error report); for the file bad.dat containing a misspelled gadget type (gren),
green 56.00 blue 25.00 gren <<20.00|5a:0>> black -20.00
the command show_exception bad.dat results in',
          ],
          [
            1,
            '[00:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (598-600.html) - midnight',
            'returns a value corresponding to <<midnight|13>> at the start of July 29, 1997. On the other hand,',
          ],
          [
            1,
            "[ap 02:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (598-600.html) - 2 o\x{2019}clock",
            "Lines 29-32 define infix operators for Time values. Note that there is no operator to add two times; it is physically meaningless to add <<2 o\x{2019}clock|6>> to <<3 o\x{2019}clock|6>>. On the other hand, adding a Duration and a Time is meaningful\x{2014}Duration represents elapsed time, and <<2 o\x{2019}clock|6>> plus 15 minutes gives <<2:15|2>>. Note that I need one operator for the Time value on the left and another for the Duration value on the left.",
          ],
          [
            1,
            '[ap 00:15] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (626-629.html) - 12:15',
            'Speed : 45 Miles per Hour Fuel : 60 % Water : <****************....> Oil : <******..............> Time : <<12:15|2>>:00 Chronometer : <<79976>>',
          ],
          [
            1,
            '[ap 00:15] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (634-636.html) - 12:15',
            'Speed : 45 Miles per Hour Fuel : 60 % Water : <****************....> Oil : <******..............> Time : <<12:15|2>>:00 Chronometer : <<79976>>',
          ],
          [
            1,
            '[17:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (653-656.html) - 5 PM',
            'The terminate alternative provides a kind of graceful implicit termination of a task. A task also terminates if control passes to the end of its body, so I could use program logic to force this task out of its main loop. For example, I could write a finite one:
while the time is earlier than <<5 PM|5>> loop ... end loop;
and the task would terminate <<just after 5 p.m.|10>> The disadvantage here is that I would strand any pending calls. Other strategies are also possible; the programmer has substantial flexibility here.',
          ],
          [
            1,
            '[> 17:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (653-656.html) - just after 5 p.m.',
            'and the task would terminate <<just after 5 p.m.|10>> The disadvantage here is that I would strand any pending calls. Other strategies are also possible; the programmer has substantial flexibility here.',
          ],
          [
            1,
            '[ap 07:04] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (about_split_001.html) - 704',
            'The <<704|9l>>, originally the 701A, was released in 1954. It was the logical successor to the IBM 701 (1952, 1953). The evolution of the 701 into the 704 was headed up by Gene Amdahl. The direct result of the 701/704 was the beginning of work on Fortran (which stands for formula translator) by John Backus at IBM in 1953. Work on the Fortran translator (we would call it a compiler) began in 1955 and was completed in 1957. Fortran was, without a doubt, the first programming language.',
          ],
          [
            1,
            '[20:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (about_split_001.html) - 1960',
            'Just over 40 years ago there were no programming languages. In 1954 programming was still a function of hardware. Fortran was invented in 1957. It was soon being taught. By <<1960|9:0>>, not only had COBOL and Lisp joined the roster, but so had others, many now thankfully forgotten. Over the past 40 years, nearly 4,000 computer languages have been produced. Only a tithe of these are in use today, but the growth and development of them has been progressive and organic.',
          ],
        ];

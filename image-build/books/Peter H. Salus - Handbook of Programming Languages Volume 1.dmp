$VAR1 = [
          [
            1,
            '[ap ~ 09:52] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (038-043.html) - around 8 to 10',
            'One drawback with the handle-based Thread Pool model is that the size of the socket listen queue is relatively small (<<around 8 to 10|10>> connections on most OS platforms). Therefore, high-volume servers that receive hundreds of Web hits per second might not be able to accept connections fast enough to keep the kernel from rejecting clients. Moreover, it is not possible to prioritize which connections are dropped because the kernel does not distinguish among different clients.',
          ],
          [
            1,
            '[ap 01:22] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (045-048.html) - 1:22',
            'Johnson, R., and B. Foote. 1988. Designing reusable classes. Journal of Object-Oriented Programming <<1:22|2>>-35.',
          ],
          [
            1,
            '[ap 00:13] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (062-064.html) - 12-13',
            "Smalltalk-76 was initially implemented on Altos. The Altos were robust machines, holding up to use by Xerox PARC administrators, secretaries, and researchers, as well as the large number of children and other visitors PARC hosted. LRG did a number of projects in Smalltalk-76 to test the breadth of applications that could be expressed easily with Smalltalk. One of these was an application to manage the book catalog of the PARC library. The application was actively used for a number of years. Most of the educational experimentation was done with specially conducted classes of students ages <<12-13|5a:0>>. These classes were held in cooperation with a local junior high school\x{2019}s mentally gifted minors program. The students were driven to PARC during the school day. Saturday classes were held for the children of PARC employees.",
          ],
          [
            1,
            '[18:26] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (091-094.html) - 18-26',
            'Ungar, D., and F. Jackson. 1988. Tenuring policies for generation-based storage reclamation. Proceedings of the ACM OOPSLA 88 Conference, Special Issue of SIGPLAN Notices 23(11):<<18-26|5a:0>>.',
          ],
          [
            1,
            '[13:25] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (091-094.html) - 13-25',
            'Wirth, N. K., and H. Weber. 1966. EULER: A generalization of ALGOL and its formal definition: Part I. Communications of the ACM 9(1):<<13-25|5a:0>>.',
          ],
          [
            1,
            '[ap 01:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (152-155.html) - 1',
            "Protocol <sequencedReadableCollection> abbreviated <sRC>
Conforms to: <collection>

Messages:

<sRC> ^ <sRC>
Concatenates collections

after: <Object> ^ <Object>
Returns the element that follows the argument element

at: <integer> ^ <Object>
Returns the element at the position specified by the argument

before: <Object> ^ <Object>
Returns the element that precedes the argument element

copyFrom: <integer> to: <integer> ^ <sRC>
Creates a new collection from a subsequence of elements

copyReplaceAll: <sRC> with: <sRC> ^ <sRC>
Creates a new collection with one subsequence replaced by another

copyReplaceFrom: <integer> to: <integer> with: <sRC> ^ <sRC>
Creates a new collection from the receiver with a subsequence of elements replaced from another collection

copyReplaceFrom: <integer> to: <integer withObject: <Object> ^ <sRC>
Creates a new collection from the receiver with a subsequence of elements replaced with a specific object

copyWith: <Object> ^ <sRC>
Copies receiver with the argument appended

copyWithout: <Object> ^ <sRC>
Copies receiver without any elements equal to the argument

findFirst: <block1> ^ index
Index of first element for which  the block evaluates to true

findLast: <block1> ^ index
Index of last element for which  the block evaluates to true

first ^ <Object>
Retrieves the first element of the collection

indexOf: <Object> ^ <number>
Index of first element equal to argument

indexOf: <Object> ifAbsent: <block0> ^ <number>
Index of first element equal to argument; evaluates block if none

indexOfSubCollection: <sRC> startingAt: <integer> ^ <number>
Starting at the specified position find the index of the first subsequence that is equal to the argument collection

indexOfSubCollection: <sRC> startingAt: <integer> ifAbsent: <block0> ^ <number>
Starting at the specified position find the index of the first subsequence that is equal to the argument collection; if not found, evaluates the argument block

last  ^ <Object>
Retrieves the last element of the collection

reverse ^ <sRC>
Creates a new collection with the receiver\x{2019}s elements reversed

reverseDo: <block1>
In reverse order, evaluates the block for each receiver element

with: <sRC> do: <block2>
Evaluates the block using pairs of elements from the receiver and argument collections

The basic message for accessing an element according to its position is at:. The numbering of element position starts at <<1|9g>>:",
          ],
          [
            1,
            '[16:33] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (297-300.html) - 16-33',
            'Koenig, A., and B. Stroustrup. 1990. Exception handling for C++. Journal of Object-Oriented Programming 3(2):<<16-33|5a:0>>.',
          ],
          [
            1,
            '[ap 09:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (328-331.html) - 9',
            "We aren\x{2019}t quite saying that because xx[10] doesn\x{2019}t exist the indices stop at <<9|9c:0>>. But for appropriate values of i, we are saying that *xx[i] has type int.





   int *(xx[10]);


with the same meaning. If declaration mirrors use, then the declaration must mean that if we extract an element of xx, we can apply * to that element and obtain an int. In other words, we have declared xx as an array of pointers to int. In effect, the fact that unary operators group right to left in expressions implies that they group left to right in declarations. If we wanted to declare a pointer to an array, we would have written",
          ],
          [
            1,
            '[ap 01:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (382-385.html) - 1',
            'Each constructor uses new to allocate, in dynamic memory, an appropriate object of a class that is derived from Node, and stores the address of that object in the Tree it is constructing. The Node constructor automatically ensures that the use count starts out at <<1|9c:0>>.',
          ],
          [
            1,
            '[ap 01:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (407-409.html) - one',
            "\x{2022}\x{a0}\x{a0}Purely syntactic pitfalls, such as writing = (assignment) instead of == (comparison).
\x{2022}\x{a0}\x{a0}Why C counts from zero instead of from <<one|9c:0>>, along with a description of how to use C\x{2019}s counting style to avoid fencepost errors.
\x{2022}\x{a0}\x{a0}Declaration syntax, a common source of misunderstandings in C, especially including functions whose arguments or return values are functions.
\x{2022}\x{a0}\x{a0}The subtle relationship between pointers and arrays, including multidimensional arrays.
\x{2022}\x{a0}\x{a0}What happens when two parts of a program, compiled separately, say conflicting things about the type of a global object.
\x{2022}\x{a0}\x{a0}The preprocessor, because of which the programs we write are not the programs we run.
\x{2022}\x{a0}\x{a0}How C implementations differ from one another, even in matters as simple as arithmetic.

Although most C pitfalls appear in C++ as well, they are less important in C++ than they are in C. The reason is that C++ makes it easier to define classes that represent high-level abstractions; these abstractions often make it possible to avoid the C pitfalls entirely. For example, the standard C++ library provides a flexible vector class that avoids many of the pitfalls associated with C arrays, and inline functions in C++ make the C preprocessor, with its attendant pitfalls, much less important.",
          ],
          [
            1,
            '[ap 01:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (564-568.html) - 1.11',
            'Over the roughly ten years of Ada 83, the ACVC was, of course, updated a number of times, to take account of practical experience with the compilers, add new tests as compiler bugs were discovered, and so on. The final operative Ada 83 test suite was ACVC <<1.11|5a:0>>, containing more than 2000 distinct test segments. Various forms of the applicable regulations determined the frequency with which a validated compiler was required to be retested with a newer test suite.',
          ],
          [
            1,
            '[ap 01:11] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (564-568.html) - 1.11',
            "\x{2022}\x{a0}\x{a0}Ada 9X Basic: This is the subset of tests from ACVC <<1.11|5a:0>> after removal of tests not applicable to Ada 95. These tests focus on support expected from Ada for features of Ada 83 that have been updated to be compatible with revised rules.",
          ],
          [
            1,
            '[ap 02:01] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (568-570.html) - 2.01',
            'Tables 10.1 and 10.2, quoted from the VCL with minor reformatting, show the actual ACVC <<2.01|5a:0>> test profile run in March 1997, for the GNU Ada 95 (GNAT) compiler under Solaris.',
          ],
          [
            1,
            '[00:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (583-586.html) - midnight',
            'SecsPast_0h00 / 60
   SecsPast_0h00 rem 60


are integer expressions, computing the quotient and the remainder respectively. In Ada, the interpretation of arithmetic operators, including division, depends on the types of their operands. SecsPast_0h00 (seconds since <<midnight|13>>) and 60 are both integer values, so the division is a truncating one.',
          ],
          [
            1,
            '[ap 09:15] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (583-586.html) - 09:15',
            'In the example, because the values of all the variables are computed at the time their declarations are elaborated, the statement-sequence part of the program need only display the result. Lines 19-23 display the date just as before; the rest of the program displays the time in 24-hour hh:mm:ss form. The if statements in lines 25-27, 31-33, and 37-39 are used to display leading zeroes where necessary, for example, <<09:15|2>>:08. if statements are fully bracketed; that is, the if must have a closing end if. An if can include a single else or one or more elsif clauses. Two other if variations are',
          ],
          [
            1,
            '[20:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (592-595.html) - 20.00',
            'green 56.00
   blue 25.00
   gren <<20.00|5a:0>>
   black -20.00


the command show_exception bad.dat results in',
          ],
          [
            1,
            '[00:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (598-600.html) - midnight',
            'T := Ada.Calendar.Time_Of(7, 29, 1997);


returns a value corresponding to <<midnight|13>> at the start of July 29, 1997. On the other hand,',
          ],
          [
            1,
            "[ap 02:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (598-600.html) - 2 o\x{2019}clock",
            "Lines 29-32 define infix operators for Time values. Note that there is no operator to add two times; it is physically meaningless to add <<2 o\x{2019}clock|6>> to <<3 o\x{2019}clock|6>>. On the other hand, adding a Duration and a Time is meaningful\x{2014}Duration represents elapsed time, and <<2 o\x{2019}clock|6>> plus 15 minutes gives <<2:15|2>>. Note that I need one operator for the Time value on the left and another for the Duration value on the left.",
          ],
          [
            1,
            '[ap 00:15] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (626-629.html) - 12:15',
            'Speed         : 45 Miles per Hour
   Fuel          : 60 %
   Water         : <****************....>
   Oil           : <******..............>
   Time          : <<12:15|2>>:00
   Chronometer    : <<79976>>


using the following type hierarchy:',
          ],
          [
            1,
            '[ap 00:15] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (634-636.html) - 12:15',
            'Speed         : 45 Miles per Hour
   Fuel          : 60 %
   Water         : <****************....>
   Oil           : <******..............>
   Time          : <<12:15|2>>:00
   Chronometer   : <<79976>>


10.4.3.6. Comments on Pointers in Ada',
          ],
          [
            1,
            '[17:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (653-656.html) - 5 PM',
            'while the time is earlier than <<5 PM|5>> loop
     ...
   end loop;


and the task would terminate <<just after 5 p.m.|10>> The disadvantage here is that I would strand any pending calls. Other strategies are also possible; the programmer has substantial flexibility here.',
          ],
          [
            1,
            '[20:00] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (about_split_001.html) - 1960',
            'Just over 40 years ago there were no programming languages. In 1954 programming was still a function of hardware. Fortran was invented in 1957. It was soon being taught. By <<1960|9e:1>>, not only had COBOL and Lisp joined the roster, but so had others, many now thankfully forgotten. Over the past 40 years, nearly 4,000 computer languages have been produced. Only a tithe of these are in use today, but the growth and development of them has been progressive and organic.',
          ],
          [
            1,
            '[00:25] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 24-25',
            'abstract classes

C++, 252-253
Java, 863-865

abstract data types, C++, 232
abstract methods, Java, 863-865
abstract parent classes, 8
abstract structure type (AST), 13
abstract types, Modula-3, 670
abstractions

C++, 306

generic, 307
pointers, 325-326, 329-331
constants, 332-333
dynamic memory allocation, 332
OOP, 307
references, 325-328
variable-length character strings, 306

Eiffel, 493

Acceptor pattern, Web servers, 31
Access objects, Ada, 635
accessing in Java

array elements, 811
class members, 796
classes, 796
methods, 833
object data, 833
objects, 807
packages, 796

Accessor methods, Smalltalk, 107, 180
accidental complexities (communication software), 18
ACE framework, 18, 23

architecture, 24
C++ language, 27
C++ wrappers, <<24-25|5a:1>>

SOCK Acceptor, 30
SOCK Stream, 30

components, <<24-26|5a:1>>

self-contained, 27

middleware, 28
operating systems, 25
OS adaption layer, 25
Web servers, 28

dispatcher, 28
event dispatcher, 29
handlers, 29
HTTP Acceptor, 30
HTTP Handler, 30
requester, 28
SOCK Acceptor, 30
SOCK Stream, 30


acknowledgments (C++) Stroustrup, Bjarne, 298
acquisitions, Smalltalk, 88
Active Object pattern, Web servers, 34
ACVC (Ada Compiler Validation Capability), 565
Ada 83, 555
Ada 95, 555, 563

Annexes, 563
GNAT, 564
GNU, 564

Ada

access objects, 633
Ada.Calendar, 579

Base parameter, 584
Integer, 583
Show Date, 580
Show Date and Time, 582
Width parameter, 584

arrays, 588

homogenous, 588
type composition, 589, 592
unconstrained, 596, 610-612

books, 657
brevity, 585
Byron, Lord, 562
civilian applications, 571
command parameters, 592
comments, 578
compilers

ACVC (Ada Compiler Validation Capability), 565
availability, 574
validation, 565-566

concurrency, 646

compilers, 657
Dining Philosophers, 657
guarded command, 655
mutual exclusion, 649
operating systems, 656
random number generator, 648, 653
screen manager, 648, 651
Show Tasks program, 650
STEELMAN Report, 646
subtasks, 647

context clauses, 577-578
declarations, elaborating, 583
defense projects, 570
dynamic data structures, 638

deallocating memory, 639
garbage collection, 639
heap, 639
storage pool, 639

education, 573
encapsulation, 599-600

constructor functions, 600
infix operators, 600

exception handling, 592, 596

locally, 597
propagating exceptions, 609

expressions

aggregated, 610
initial expressions, 583

files, 576
garbage collection, application-specific, 641
Hello, World, 577
high order languages

AJPO, 560
ANSI, 562
C, 560
DoD, 557, 559
HOLWG, 559
Ichbiah, Jean, 559
Taft, S. Tucker, 562

Information Systems Annex, 592
inheritance, 623
layout, 578
libraries, 579

Ada.Finalization, 641
Calendar, 579

linked lists, 632

AddToEnd, 640
dashboard, building, 633
heterogenous, 633
MakeEmpty, 639

loops, 586-589
Lovelace, Countess Augusta Ada, 561
matrices, 615-616

generic package, 618-623

memory heap, 639
non-defense projects, 571
numbers, decimal, 595
objects, 576

constrained, 611

operations

Adjust, 642
Finalize, 642
Initialize, 642

overloading, 586
packages, 576

Ada.Command Line, 592
encapsulation, 599, 616
generic, 614-616
generic matrices, 618-621
HB.Instruments, 627, 635
HB.Instruments.Aux, 631
HB.Instruments.Basic, 628, 636
HB.Instruments.Clocks, 629, 637
HB.Lists Generic, 642
HB.Lists.Generic, 633, 638
HB.Random Task, 653, 648
HB.Rationals, 601
HB.Rationals.IO, 604, 607, 610
HB.Screen, 649, 653
HB.Vectors, 621
rational-number arithmetic, 604
Rationals, 607
root, 601

pointers, 633-635

access objects, 635

polymorphism, 623-625

variant records, 625

procedures, 578

Display, 631
main, 577

records, fields, 591
reserved words, 578
subtypes, 586-588

ranges, 589

textbooks, 573
type composition, 589, 592
type extension, 623, 627
types, 576

Ada.Finalization.Controlled, 641
hierarchies, 630
overriding, 628
primitive, 628
subtypes, 580, 586-589

validation, 565

ACVC (Ada Compiler Validation Capability), 565
AJPO, 565
AVFs, 566
certification, 566
debugging, 569
limitations, 569
performance, 569
test profile, 567

vectors, 611-614
web sites, 555, 657
Whitaker, William, 556

Ada.Command Line (Ada), 592
Ada.Finalization (Ada), 641
Ada.Finalization.Controlled (Ada), 641
Adaptor pattern, Web servers, 36
adaptors, C++, 400-401
ADDRESS (Modula-3), 683
AddToEnd (Ada linked lists), 640
adjust operation (Ada), 642
advantages, Smalltalk, 185
AJPO

Ada validation, 565
Ada (high order languages), 560

Algol languages, Modula-3, 669
Algorithms

C++, 370-371, 400
communication software design, 18

aliases, C++, 454-456
allocated type, Modula-3, 678
allocation

dynamic memory pointers, 332
memory

Smalltalk, 169
Java objects, 757, 807


Althoff, Jim (Smalltalk), 78
analysts, Smalltalk, 82
anchored declarations (Eiffel inheritance), 535
Anderson, Jim (Smalltalk), 89
annexes

Ada, Information Systems Annex, 592
Ada 95, 563

Annotated C++ Reference Manual, 254
ANSI

Ada (high order languages), 562
C++, 255
standards, Smalltalk, 182

APIs (application programming interfaces), 780
Apple

Jobs, Steve (Smalltalk), 69
lawsuit against Microsoft, 82
Squeak (Smalltalk), 166

applets

compiling, 789
example, 786-790
Java, 786, 790
Java 1.1 changes, 890-891
Web page integration, 789-790

applications, distributed, ACE framework (reusable components), 27
application programming interfaces, 780
application-specific garbage collection (Ada), 641
applicators, C++, 391
architecture

ACE framework, 24
Smalltalk composition, 78
Web

dispatcher, 28
event dispatchers, 29
handlers, 29
HTTP Acceptor, 30
HTTP Handler, 30
requester, 28
SOCK Acceptor, 30
SOCK Stream, 30


arguments, 5

C++

passing to functions, 336
pointers, const, 422-423
templates, 267

Java

command-line arguments, 791
declaring in arrays, 812-813

Smalltalk, blocks, 118

arithmetic operators

C++, order of precedence, 324
Modula-3 expressions, 720-722

ARM (Annotated C++ Reference Manual), 254
Array (collection classes), 157
arrays

Ada

homogenous, 588
type composition, 589, 592
unconstrained, 596, 610-612

C++, 325, 328-329, 431

associative, 309
bounds, 446, 449
clearing, 331
deleting, 430
multidimensional, 427
of arrays, 429
pointers, 329-331
two variable dimensions, 430

Java, 762, 791, 803, 806-808

accessing elements from, 811
arguments, declaring, 812-813
copying, 805
destroying, 809
multidimensional, 809-811
variables, declaring, 812-813
versus objects, 812

Modula-3

assignable, 680
constructors, 718
fixed, 679
indexing, 680
open, 679
shape, 679
subtyping, 690


arrow symbol (Smalltalk), 57
assertions, Eiffel, 463, 498

classes, 502-504
reliability, 500
runtime monitoring, 500-502

assignment inheritance (C++ OOP), 374
assignment attempts, Eiffel, 464, 533
assignment operators, C++, 324, 360
associative arrays, C++, map, 309
associative containers, C++, 396
AST (abstract structure type) modules, 13
asymetric bounds (C++ libraries), 310
asynchronous events, C++, exception handling, 270
Asynchronous Thread Pool model, Web servers, concurrency, 43
AtAllPut message (collection classes), 157
attributes. Eiffel

constant, 539
features, 478

Austern, Matt (C++), 267
automatic objects, C++, memory, 239
autoprototyping, C with Classes, 213
AVFs (Ada Validation Facilities), 566
AWT event model, Java 1.1, 877-878

B',
          ],
          [
            1,
            '[00:25] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 24-25',
            'C

Ada (high order languages), 560
C++, 240, 313

compatibility, 240
Koenig, Andrew, 241

classes

friends, 219
protection, 219

compilers, 214
flexibility, 214
functions

call, 221
guarantees, 219
invariants, 219
return, 221
virtual, 218, 221

inheritance, multiple, 221
Java, 790, 830-831
low-level semantics, 214
pitfalls, 407-408, 412-416
portability, 214
protection, 218
reasons for using, 214
Simula, 215
stacks, size, 219
static members, 222
syntax, 216-217
templates, 221
virtual machines, Smalltalk, 168
wrappers, 221

C with Classes, 199

Bell Labs, 222
C++

Adding Classes to the C Language, 203
class stack, 206
classes, 206
compilers, 211
concurrency, 203
debugging, 204
f(void), 213
features, 205
functions, 207
implicit conversions, 214
inline functions, 208
linker, 210
linking, 209
low-level operations, 204
members, 207
new operator, 208
non-pointer types, 207
objects, 207
pointers, 207
prototypes, 213
runtime efficiency, 208
runtime speed, 204
SIGPLAN paper, 203
static type checking, 212
types, 207

classes, layout information, 210
development, 223

Fraser, Sandy, 223
into C++, 224
Johnson, Steve, 224
McIlroy, Doug, 224
Ritchie, Dennis, 224


C++, 305

#include, 313
abstract data types, 232
abstractions, 306

generic, 307
OOP, 307
pointers, 325-326, 329-331
constants, 332-333
dynamic memory allocation, 332
references, 325-328
variable-length character strings, 306

ACE framework, 27
adaptors, 400-401
algorithms, 400
aliases, 454-456
Annotated C++ Reference Manual, 254
applicators, 391
arrays, 325, 328-329, 431

associative, 309
bounds, 446, 449
clearing, 331
deleting, 430
multidimensional, 427
of arrays, 429
pointers, 329-331
two variable dimensions, 430

assignment operators, 360
Austern, Matt, 267
Babcisky, Karel, 244
beginnings, 197
books, 286, 298, 458

The C++ Programming Language, 243, 258
The Design and Evolution of C++, 258
Parallel Programming Using C++, 296

braces, 319
Bruck, Dag, 260
C, 240, 313

compatibility, 240
Koenig, Andrew, 241

C with Classes, 199

Adding Classes to the C Language, 203
class stack, 206
classes, 206
compilers, 211
concurrency, 203
debugging, 204
f(void), 213
features, 205
functions, 207
header files, 210
implicit conversations, 214
inline functions, 208
layout information in classes, 210
linker, 210
linking, 209
low-level operations, 204
members, 207
new operator, 208
non-pointer types, 207
objects, 207
pointers, 207
prototypes, 213
runtime efficiency, 208
runtime speed, 204
SIGPLAN paper, 203
static type checking, 212
types, 207

casting, 259
characters, 321
cin, 309
class templates, 262
classes

abstract, 252-253
base class conversions, 432-434
complex template class, 393
containers, 435-436, 439
defining, 350
derived, 217
dynamic binding, 374
istream, 389
multiple inheritance, 250
nested, 257
ostream, 389
private, 379
protected, 379
public, 379
size concerns, 295
templates, 368-369
valarray, 393

comments, 307
competitors, 288
compilers, 211, 286
conferences, 285
const, 408, 412, 422

declarations, 412
pointer arguments, 422-423

constants, pointers, 332-333
constructors, 357-358

copy, 358-359
explicit, 258

containers, 394

associative, 396
compound, 397
sequential, 394-395

Cornfield, Sean, 260
cout, 308
data abstraction, 350, 362-366
data types

enumerated, 322
fixing, 366

declarations, conditions, used as, 261
Denert, Jim, 267
destructors, 361, 377
development, 224

additions to language, 230
aims, 226
BCPL comments, 231
Cfront, 226-230
Coplien, Jim, 227
Rose, Leonie, 227
Shopiro, Jonathan, 227

Ellis, Margaret, 254
environments, 287
exception handling, 246, 268

asynchronous events, 270
groups of exceptions, 268
resources, 269

execution, 445
expressions, new, 427
features, major and minor, 258
floating-point arithmetic, 321
functions, 335-337

default arguments, 337
definitions, 335
exceptions, 339, 346
exiting, 338-339
modifiable memory, 422
numeric library functions, 392-394
operators, 347
overloaded, 347
parameters, 336
passing arguments to, 336
pure virtual functions, 378
recursion, 337
references, 423, 426
strlen, 335
templates, 366-367
type checking, 239
virtual, 231, 234, 432
virtual functions, 374, 376

generic programming, 366
hash tables, 282
header files, 210
Hello, World, 313
increments, postfix and prefix, 257
inheritance

base class conversions, 432
multiple, 247, 249-251

integer arithmetic, 319
integers, 317

operators, 318
signed, 317
unsigned, 317

Internet, 284
iostream, 314
iterators, 310, 397-399
Java, 290
journals, 286
jumps, 342
Krogdahl, Stein, 250
Lenkov, Dmitry, 255
libraries, 312

asymetric bounds, 310
dynamic memory, 312
early, 287
I/O libraries, 388-389
language, in relation to, 312
standard I/O, 307
string library, 391-392
see also standard library

loops, 341
lvalues, 326
manipulators, 308, 390
member functions, 352-355

effects on program organization, 354
exclusivity, 355, 357
implementation, 355
private, 355
protected, 355
public, 355

memory, 238

automatic objects, 239
delete operator, 238
free store, 238
new operator, 238
static objects, 239

modifiers, const, 332
Moo, Barbara, 278
namespaces, 271-272, 348-350
numeric conversions, 323
objects, members, pointers, 361
OOP, 371, 380-386

dynamic binding, 374
dynamic casts, 378
inheritance, 372, 379
assignment, 374
constructors, 373-374
destructors, 374
pure virtual functions, 378
virtual destructors, 377
virtual functions, 374-376

operators, 309

++, 309-311
constants, 238
floating-point arithmetic, 321
integer arithmetic, 318
overloading, 235
postfix ++, 319
precedence, 323-325
readonly, 238
references, 237
relational, 318

order relations, 439
parameterized types, 246
pitfalls, 405, 407
pointers

dangling, 452
dynamically allocated memory, 452
functions, 454
local variables, 452

preprocessing, 313
program structure, 313
Randell, Brian, 268
references, 454-456
resources, 402
retrospective, 291-293

additions, 295
changes, 293-295
future, 297
mistakes, 297

Rosler, Larry, 255
Rowe, Keith, 271
runtime type identification, 273
Schwarz, Jerry, 277
semantics, 419, 445
setw, 311
Simula, 199

classes, 199
compiling, 200
debugging, 200
linking, 200
tools, 201

Simula, 200
smart pointers, 257
source files, 313

defining, 316
maintaining consistency, 315

stacks, constructors and destructors, 220
standard library, 274, 387-388

facilities, 282
foundation libraries, 275
stream I/O, 276
templates, 278-282

standardization, 253

accepted features, 274
ANSI, 255
ISO, 255

statements, 339

blocks, 340
break, 342
conditional, 341
continue, 342
expression, 340
goto, 342
if, 319, 341
null, 339
pass, 338
precedence, 339
return expression, 338
switch, 344-346
throw, 338, 346
while, 341

Stepanov, Alexander, 278
strchr function, 419
string literals, 334-335
Stroustrup, Bjarne, 197

acknowledgments, 298
references, 298

structures

defining, 351
reversing, 370-371

syntax, 409, 418

const, 413-416
constructor initializers, 417
declarations, 411
lexical analysis, 409
member functions, 414
specifiers, 411
symbol spacing, 410
tokens, 409

templates, 262

arguments, 267
class, 262
compilation, 266
instantiation, 266
member, 264-265
partial specialization, 264

tools, 242, 287
translation units, 313
truth values, 320
type checking, 239, 245
type conversion, 259
UNIX kernel, 202
user population, 284
variables, local, 310
version 2.0, 247-248
version 2.1, 257
versus Java, 779, 790
What is Object-Oriented Programming? (paper), 244
white space, 319
width (setw), 311
Wilcox, John, 267
wrappers, ACE framework, <<24-25|5a:0>>

SOCK Acceptor, 30
SOCK Stream, 30


The C++ Programming Language (Stroustrup), 243, 258
Calendar (Ada), 579

Base parameter, 584
Integer, 583
Show Date, 580
Show Date and Time, 582
Width parameter, 584

Call function, C, 221
Call rule, Eiffel, 490
calls, Eiffel, 482
Canada (Smalltalk), 88
Cardelli (Modula-3), 743
Cardelli, Luca (Modula-3), 665
Carter, Ron (Smalltalk), 83
CASE statement (Modula-3), 700
cast unary operator, C++, 323
casting C++, 259
Catch clause (Java try/catch/finally statement), 823
categories, Eiffel, 485
Cedar, Modula-3, 669
certification, Ada validation, 566
Cfront

C++ development, 226-227

drivers, 229
linkers, 229
versions, 230

Coplien, Jim, 227
Rose, Leonie, 227
Shopiro, Jonathan, 227

Char data type, Java, 802
character literals

Modula-3 expressions, 717
Smalltalk objects, 97

character objects, Smalltalk, 139
characters

C++, 321
Smalltalk, 56-57

checked runtime error

Thread.Join, 730
Word.Extract, 732
Word.Insert, 732

child classes, 8
CIA, Smalltalk, 81
Cin, C++, 309
civilian applications, Ada, 571
class fields (Java objects), 758
class files, Java, 792
class instance variables, Smalltalk, 113
class libraries, Smalltalk, 130, 170, 183

protocols, 132
Smalltalk-80, 73

class members, Java

access to, 796
hiding, 862
private, 859-862
protected, 859-862
public, 859-862

class methods

Java, 761, 840-844
Smalltalk, 112

class templates, C++, 262
class variables

classes (Smalltalk), 75
Java, 837

accessing, 838
naming scheme, 839


Class.newInstance() method, Java, 807
ClassDescription, Smalltalk, 135
classes, 7, 12

An Abstract Data Type Facility for the C Language, 4
C

friends, 219
protection, 219

C with Classes, 206

class stack, 206
layout information, 210
members, 207
objects, 207
types, 207

C++

abstract, 252-253
base class conversions, 432-434
complex template class, 393
constructor initializers, 417
containers, 435-436, 439
defining, 350
derived, 217
dynamic binding, 374
inheritance in OOP, 372
istream, 389
multiple inheritance, 250
nested, 257
ostream, 389
private, 379
protected, 379
public, 379
size concerns, 295
templates, 368-369
valarray, 393

child, 8
Eiffel, 462, 472, 479

assertions, 502, 504
deferred, 463, 515, 518
generic, 464
instances, 476
invariants, 523
parameterized, 464
relations, 473
structural property, 520
systems, 472

f(void), C with Classes, 213
frameworks, 22
inheritance structure, 8
Java, 749, 757, 778, 831-832

abbreviating names with import statement, 796
abstract classes, 863-865
access to, 796
directory paths, 794
extending, 765, 847-848
fields, 757
final classes, 848
hierarchy, 849
inheritance, 847
instances, 749, 832
interfaces, 769
invoking methods from superclass, 767
loading dynamically, 780
main method, 750
mapping, 798
members, 792
methods, 749, 757
Object, 849
Point class, 757
public, 795-796
SecurityManager, 783
subclasses, 765
testing for frequency of use, 838
type, 775
utility, 775

java.lang package, Thread, 784
object-oriented programming, 778
parent, 8
Simula, C++, 199
Smalltalk, 57, 62, 104, 178

behaviors, 75
blocks, 181
box, 63
class instance variables, 113
class variables, 75
code, 180
definitions, 111
hierarchy, 74
inheritance, 108
instance variables, 75
instances, 104
metaclasses, 74
methods, 106, 168
names, 104
objects, 136, 169
pool variables, 75
self identifier, 110
subclasses, 108
super identifier, 111
superclasses, 108
variables, 105


CLASSPATH environment variable, Java, 794
Clone() method, Java, 805
closed colon symbol (Smalltalk), 57
closure blocks (Smalltalk), 76
Clu, Modula-3, 668
clusters, Eiffel, 466, 475
code, Smalltalk

classes, 180
methods, 181

collection classes

adding elements, 150
Array, 145
atAllPut message, 157
Bag, 151
ByteArray, 145
concatentation, 155
copy messages, 155
Dictionary, 151
index of messages, 155
initializing, 146
iteration messages, 156
messages, 148
new, 146
OrderCollection, 145
OrderedCollection, 160-161
positioning, 145
read-only, 145
removing elements, 151
replace message, 157
reverse message, 155
Set, 145, 151
SortedCollection, 145
String, 145

collection classes (Smalltalk) protocols, 144
colons (Smalltalk symbols), 57
Comma operator, C++, order of precedence, 324
command parameters, Ada, 592
command-line arguments, Java, 791, 794
commands, Eiffel features, 478
comments

Ada, 578
C++, 307
Java, 753, 797
Modula-3 syntax, 739
Smalltalk, 97

Committee (Modula-3), 667
common-use components, ACE framework, 27
communication software, 17

algorithmic design, 18
complexities

accidental, 18
inherent, 17

frameworks, 19, 22

ACE, 18, 23
classes, 22
reuse, 22

OOP, 12, 18
patterns, 19, 21

strategic, 31
tactical, 35

problems, 19
solutions, 21
Web servers, 31

Community, Smalltalk, 71
comparisons , C++

containers, 435, 439
pointers, 439

compatibility, C++ with C, 240
competitors, C++, 288
compilers

Ada

ACVC (Ada Compiler Validation Capability), 565
availability, 574
concurrency, 657
validation, 565-566

C, 214
C with Classes, 211
C++, 286
Eiffel, 469, 550
Java, just in time compilers, 784
Smalltalk, 72

compiling

applets, 789
Java programs, 785, 799
Simula, C++, 200
Smalltalk, 168
templates (C++), 266
unit productions, Modula-3 syntax, 740

complex template class, C++, 393
Complexities communication software, <<17-18|5a:0>>
components

ACE framework, <<24-27|5a:0>>
Eiffel, 463, 546
Web servers

concurrency, 36
event dispatcher, 29
HTTP Acceptor, 30
HTTP Handler, 30
SOCK Acceptor, 30
SOCK Stream, 30


composition architecture, Smalltalk, 78
compound containers, C++, 397
concatenating text, Modula-3, 726
concurrency

ACE framework components, 26
Ada, 646

compilers, 657
Dining Philosophers, 657
guarded command, 655
mutual exclusion, 649
operating systems, 656
random number generator, 648, 653
screen manager, 648, 651
Show Tasks program, 650
STEELMAN Report, 647
subtasks, 647

C++, C with Classes, 203
Eiffel, SCOOP, 544
Web servers, 36

asynchronous Thread Pool model, 43
components, 36
handle-based synchronous Thread Pool model, 40
patterns, 36
queue-based synchronous Thread Pool model, 42
Single-Threaded Reactive model, 36
Thread Pool model, 40
Thread-per-Request model, 39
Thread-per-Session model, 44


conditional

compilation, Java programs, 799
execution, Smalltalk control structures, 116
instructions, Eiffel, 540
statements, C++, 341

conditions, C++, declarations used as, 261, 285
const

C++, 408, 412

declarations, 412
member functions, 414-416
modifiable memory, 422
modifier, 332
point arguments, 422-423
pointers to constants, 413
pointers to members, 414-416
strchr function, 419, 422


constants

C++, 238

const modifier, 413
const pointers, 416
pointers, 332-333
readonly, 238

Eiffel, attributes, 539
Java, 753, 839

defining, 797
interfaces, 868
named, 753
unicode characters, 754

Modula-3

declarations, 703
expressions, 677, 726
procedures, 684


constrained genericity, Eiffel, 495, 532
constrained objects, Ada, 611
Constructor functions, Ada encapsulation, 600
constructors

C++, 357-358

explicit, 258
initializers, 417
stacks, 220

inheritance, (C++ OOP), 373-374
Java, 834

chaining, 850-851
declaring, 835
default constructors, 851-852
defining, 835
for subclasses, 849-850
multiple, 835-837
naming, 835

Modula-3

arrays, 718
records, 718
set, 718


containers, C++, 394, 435, 439

associative, 396
comparisons, 435
compound, 397
functions, 436
sequential, 394-395

Context clauses, Ada, 577-578
Continue statement

C++, 342
Java, 818-819

contracts, Eiffel, 497, 508

consistency, 500
inheritance, 522, 526
subcontracting, 522

contributors, Smalltalk, 52
control structures, Smalltalk, 73, 115

block constructors, 117
combining, 120
conditional execution, 116
iterative execution, 118

controls (GUIs), Smalltalk, 176
conventions, Modula-3 syntax, 739-740
conversions, implicit, C with Classes, 214
converting base classes (C++), 432
Coplien, Jim (Cfront), 227
copy constructors, C++, 358-359
Copy message, Smalltalk objects, 134
copying in Java

arrays , 805
objects, 804

CORBA

Eiffel, 546
ORB, 28

core modules, Smalltalk

DLLs, 171
OCXs, 171

Cornfield, Sean (C++), 260
cout, C++, 308
covariance, Eiffel inheritance, 535
critical sections, Java programs, 819
Culture, Smalltalk, 185

development cycle, 187
freeware, 190
object technology centers (OTCs), 186
vendors, 187


D',
          ],
          [
            1,
            '[00:25] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 24-25',
            'f(void), C with Classes, 213
facilities, C++, standard template library, 282
FastTalk see Smalltalk-74
features

C++, 258
Eiffel, 477

attributes, 478
commands, 478
deferred, 515, 518
queries, 478
renaming, 464, 521
routines, 478


Fiboncci sequence, Java, 751
fields

Ada records, 591
Eiffel objects, 477
Java, 792

class, 749, 757-758
objects, 758
static, 758

Modula-3, 681

filenames, Java, 792
files, Ada, 576
final classes, Java, 848
final keyword, Java, 829
final methods, Java, 855, 858
Finalize operation (Ada), 642
finalizer methods, Java, 852
finalizing objects in Java, 846-847
finally clause (Java try/catch/finally statement), 823
find algorithm, C++, 400
fixed arrays, Modula-3, 679
flat forms, Eiffel inheritance, 528
FLEX machine (Smalltalk), 53
Floating-point

arithmetic, C++, 321
data types, Java, 803
protocol, Smalltalk, 143
Modula-3, interfaces, 734-737

FloatMode interface (Modula-3), 735-737
flow of control, Java, 754

blocks, 754
if/else, 756

For loop, Java, 755
For statement, Java, 817
FOR statement (Modula-3), 699
forms, Eiffel inheritance, 528
forward references, Java, 828
foundation libraries, C++, 275
Fraction protocol (Smalltalk), 143
frameworks

communication software, 19, 22
ACE, 18, 23

architecture, 24
C++ language, 27
C++ wrappers, <<24-25|5a:0>>
components, <<24-27|5a:0>>
middleware, 28
operating systems, 25
OS adaption layer, 25
Web servers, 28

classes, 22
reuse, 22
Smalltalk, 186

events, 174-176
exception handling, 171, 174


Fraser, Sandy (C with Classes), 223
Free store, C++, 238
freeware, Smalltalk, 190

GNU Smalltalk, 190
LearningWorks, 166, 190
Little Smalltalk, 190
SmalltalkExpress, 166, 190
Squeak, 166, 190

Friends, C classes, 219
function procedures, Modula-3, 684
functions, 352

C

call, 221
guarantees, 219
invariants, 219
return, 221
virtual, 218, 221

C with Classes, 208

definitions, 207
new( ), 207
types, 207

C++, 335-337

containers, 436
default arguments, 337
definitions, 335
exceptions, 339, 346
exiting, 338-339
numeric library functions, 392-394
operators, 347
overloaded, 347
parameters, 336
passing arguments to, 336
pointers, 454
pure virtual functions, 378
recursion, 337
references, 423, 426
strchr, 419, 422
strlen, 335
templates, 366-367
type checking, 239
virtual, 231, 234, 374-376, 432

lexical closure, 121
new( ), 207


G',
          ],
          [
            1,
            '[19:21] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 19-21',
            'Package statement, Java, 795, 820
packages

Ada, 576

Ada.Command Line, 592
encapsulation, 599, 617
generic, 614-616
generic matrices, 618-621
HB.Instruments, 627, 636
HB.Instruments.Aux, 631
HB.Instruments.Basic, 628, 636
HB.Instruments.Clocks, 629, 637
HB.Lists Generic, 642
HB.Lists.Generic, 633, 639
HB.Random Task, 648, 653
HB.Rationals, 601
HB.Rationals.IO, 604, 607, 610
HB.Screen, 649, 653
HB.Vectors, 621
rational-number arithmetic, 604
Rationals, 607
root, 601

Java, 772, 778, 793, 873-876

access to, 796
naming schemes, 794-795


packed types, Modula-3, 682
Parallel Programming Using C++, 296
parameter declaration, Modula-3 procedures, 684
parameterized types, C++, 246
parameters

Ada, generic packages, 616
C++ functions, 336
Eiffel

classes, 464
genericity, 495

Java, 759

PARC, Smalltalk, 54
ParcPlace Holders, Smalltalk, 82-83
ParcPlace Systems (Smalltalk), 83

portability, 83
VisualWorks, 84

parent classes, 8
partial specialization (C++ templates), 264
Parts Workbench (Digitalk), 85
Pass statement, C++, 338
passing

arguments to C++ functions, 336
Java objects by reference, 804
messages, 14

paths, Smalltalk, execution, 169
patterns, 19

communication software, <<19-21|5a:1>>
Smalltalk, 186
web servers, 28

Acceptor, 31
Active Object, 34
Adaptor, 36
concurrency, 36
dispatcher, 28
event dispatcher, 29
Half-sync/Half-async, 34
handlers, 29
HTTP Acceptor, 30
HTTP Handler, 30
Proactor, 32
Reactor, 32
requester, 28
Singleton, 36
SOCK Acceptor, 30
SOCK Stream, 30
State, 36
strategic, 31
Strategy, 35
tactical, 35


Patterson, Dave (Smalltalk), 88
Pencin, Russ (Smalltalk), 83
Perform message (Smalltalk), 125
performance, Ada validation, 569
persistence, Eiffel, 489
pitfalls of C++, 405, 457

aliases, 454-456
arrays, 431

bounds, 446, 449
deleting, 430
multidimensional, 427
of arrays, 429
two variable dimensions, 430

C, 407
classes

base class conversions, 432-434
containers, 435-436, 439

const, 408, 412, 414, 416

declarations, 412
member functions, 414
pointer arguments, 422-423
pointers to constants, 413

constructor initializers, 417
declarations, 411
execution, 445
expressions, new, 427
functions

modifiable memory, 422
references, 423, 426
virtual, 432

inheritance, 432
lexical analysis, 409
order relations, 439
pointers

dangling, 452
dynamically allocated memory, 452
functions, 454
local variables, 452

references, 454-456
semantics, 419, 445
specifiers, 411
strchr function, 419, 422
symbol spacing, 410
syntactic, 409, 418
tokens, 409

platform independence

Java, 774
Smalltalk, 168

pluggable interfaces, Smalltalk, 78
Point class (Java), 757
pointer-to-member operators, C++, 324
pointers

Ada, 633-635
C with Classes, types, 207
C++, 325-326

arithmetic with, 331
const, 413-416, 422-423
constants, 332-333
dangling, 452
dynamic memory allocation, 332, 452
functions, 454
iterators, 310
local variables, 452
object members, 361
smart, 257
using with arrays, 329-331

iterators, 280
Java, lack of, 781, 805

polymorphism, 10

Ada, 623-625
Eiffel, 463, 511-513
OOP, 14
Smalltalk, 103, 179

Pool variables classes (Smalltalk), 75
Pope, Steven (Smalltalk), 83
portability

C, 214
Java, 774
Smalltalk, 68

intermediate representation, 73
ParcPlace Systems, 83


Posfix operator ++, C++, 319
positioning (collection class elements), 155
postfix increments, C++, 257
pragmas, Modula-3 syntax, 739
precedence, C++

operators, 323-325
statements, 339

predeclared opaque types, Modula-3, TEXT and MUTEXT, 691
prefix increments, C++, 257
prefixes, Eiffel, 483
primitive data types, Java, 801
primitive operations (Ada types), 628
primitives, Java, 751
PrintString, Smalltalk objects, 135
private classes

C++, 379
member functions. 355
Java members, 859-862

Proactor pattern, Web servers, 32
problems, communication software, 19
procedural operators, Modula-3, 715
procedures

Ada, 578

Display, 631
main, 577

Modula-3, 684

calls, 693-695
constant, 684
declarations, 704
expressions, 718
function, 684
parameter declaration, 684
proper, 684
signatures, 684-685
subtyping, 690
top-level, 684
type declaration, 684


process (Eiffel), 466

clusters, 466, 475
compilers, 469
external software, 475
generalization, 468
global inheritance, 474
quality development, 469
reuse, 468
reversibility, 468
seamlessness, 468
working demos, 468

program structure, C++, 313
programs, Java

compiling, 785
compiling conditionally, 799
components, 790
critical sections, 819
environment, 790
Hello, World, 785
invoking, 790
linking C with Classes, 209-210
returning values, 791
running, 785
structure, 790

projects, Smalltalk

banking, 191
government, 192
insurance, 191
manufacturing, 192
telecommunications, 192
trading, 191
Web servers, 191

propagating exceptions, Ada, 609
proper procedures, Modula-3, 684
properties

Java, looking up values for, 791
Smalltalk objects, 75

protected class members, Java, 859-862
protected classes

C, 218-219
C++, 379

protected member functions, C++, 355
protocols

Smalltalk, 131

class libraries, 132
collection classes, 144
conforming, 132
floating-point, 143
fraction, 143
integer, 142
message signatures, 132
number, 140
numeric, 140
objects, 133

Prototypes. C with Classes, 213

PS Smalltalk, 70
public classes

C++, 379
Java, 795-796, 859-862

public member functions, C++, 355
publishing Smalltalk, 71, 79
Pugh, John (Smalltalk), 88
pure virtual functions, OOP in C++, 378
Putz, Steve (Smalltalk), 78

Q-R',
          ],
          [
            1,
            '[17:18] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (book-index_split_001.html) - 17-18',
            'safety, Modula-3, 673, 726-727

address arithmetic, 727
modules and interfaces, 712

Sandbox security model, Java, 782
SCG (Systems Concepts Group), Smalltalk, 71
Schwarz, Jerry (C++), 277
SCOOP (Eiffel), 544
scope, Modula-3 declarations, 676
screen manager (Ada concurrency), 648, 651
seamlessness, Eiffel, 468
security, Java, 782-783
selection (Modula-3 designators), 715
selectors, messages (Smalltalk), 122

blocks, 124
perform, 125

SELF (Smalltalk), 88
self identifier, Smalltalk classes, 110
self variable, Smalltalk, 63
self-contained components, ACE framework, 27
semantics, C++, 419, 445
sequential containers, C++, 394-395
sequential statements, Modula-3, 695
serialization, Java 1.1 objects, 886-887
servers, Web

ACE framework, 28
communication software, 31
concurrency models, 36
JAWS, 28
patterns, 31, 35
Smalltalk, 191

service configuration/initialization, , ACE framework components, 27
Set (collection class), 145
set associative container, C++, 396
set constructors, Modula-3 expressions, 718
sets, Modula-3, 682
Setw, C++, 311
Setw manipulator, C++, 390
shadowed variables, Java, 852-853
shared objects, Eiffel, 537
shift operators, C++, order of precedence, 324
Shopiro, Jonathan (Cfront), 227
short form, Eiffel classes, 502-504
Show Date, Ada.Calendar, 580
Show Date and Time, Ada.Calendar, 582
Show Tasks program (Ada concurrency), 650
signatures

Modula-3 procedures, 684-685
Smalltalk message protocols, 132

signed integers (C++), 317
SIGPLAN paper (C with Classes), 203
simplicity, Modula-3, 676
Simula

C, 215
C++, 199-200

classes, 199
compiling, 200
debugging, 200
linking, 200
tools, 201

runtime efficiency, 208

Simulation kit (Smalltalk), 66
Single-Threaded Reactive model, Web servers, concurrency, 36
Singleton pattern, Web servers, 36
size, stacks, C, 219
Smalltalk, 165

68000 code, 71
acquisitions, 88
advantages, 185
Althoff, Jim, 78
Analyst, 82
Anderson, Jim, 89
ANSI standards, 182
blocks, 181

arguments, 118
full closure, 76

books, 80
BRAVO, 65
browsers, 64
Budd, Tim, 86
Byte Magazine, 167
Carter, Ron, 83
characters, 56

closed colon, 57
eval bind, 57
eyeball, 57
keyhole, 57
open colon, 57
right arrow, 57
uneval bind, 57

CIA, 81
class libraries, 130, 170

protocols, 132
Smalltalk-80, 73

classes, 57, 62, 104, 178

behavior, 75
box, 63
class instance variables, 113
class variables, 75
code, 180
definitions, 111
hierarchy, 74
inheritance, 108-109
instance variables, 75
instances, 104
metaclasses, 74
methods, 106
names, 104
pool variables, 75
self identifier, 110
subclasses, 108
super identifier, 111
superclasses, 108
variables, 105

collection classes

adding elements, 150
Array, 145
atAllPut message, 157
Bag, 145, 151
ByteArray, 145
concatenation, 155
copy messages, 155
Dictionary, 151
index of messages, 155
initializing, 146
Interval, 145
iteration messages, 156
messages, 148
new, 146
OrderCollection, 145
OrderedCollection, 160-161
positioning, 145
read-only, 145
read/write, 145
removing elements, 151
replace message, 157
reverse message, 155
Set, 145, 151
SortedCollection, 145
String, 145
strings, 145

comments, 97
commercial outcome, 90
community, 71
compiler, 72
composition architecture, 78
contributors, 52
control structures, 73, 115

block constructors, 117
combining, 120
conditional execution, 145
iterative execution, 118

culture, 185
curriculum for designing applications, 65
debuggers, 64
defined, 178
dependencies, 174
Deutsch, Peter, 83
development, 65
development cycle, 187
development environment, 83
disadvantages, 185
distribution, 71
DLLs, 171
Dolphins, 70
Dorados, 70
Dynabook, 55
dynamic binding, 85, 169
education, 59-61
encapsulated data, 99
event frameworks, 174-176
exception handlers, 126-127, 171, 174

exiting handler blocks, 129
resumability, 128

execution path, 169
FLEX machine, 53
frameworks, 186
freeware, 166, 190

GNU Smalltalk, 190
LearningWorks, 190
Little Smalltalk, 190
SmalltalkExpress, 190
Squeak, 190

galley editor, 67
garbage collection, 169
GUIs, controls and widgets, 176
hardware, 70
hash tables, 134
history, 52, 166
IBM, 89
IDE

browsers, 182
debugger, 182
development teams, 185
development tools, 183
encapsulation, 184
image file, 184
visual environments, 183

incremental compilation, 168
Ingalls, Dan, 62
inspectors, 64
instances, 53
Java comparison, 165
Jobs, Steve, 69
Kay, Alan, 51, 166

Dynabook, 51
KiddiKomp, 54

Krasner, Glenn, 83
LearningWorks, 166
Leibs, David, 83
libraries, 183
licenses, 79
Little Smalltalk, 86
LOGO, 60
Lyons, Bill, 89
memory

allocation, 169
LOOM (large object-oriented memory), 77

messages, 54, 178

binary, 100
control structures, 73
identical, 103
keyword, 102
polymorphism, 103
selectors, 122-125
unary, 99

Methods, 86, 106, 168
methods

accessor, 107, 180
aMessage, 169
class methods, 112
code, 181
new, 112
return, 106

Mighty Mouse, 58
MVC (Model, View, Controller), 175
Modula-3, 668
multiprocessing, 170
NoteTaker, 68
objects, 53, 62, 96, 169, 178

behavior, 99
control structures, 73
dependencies, 174
equality, 134
identity, 133
literals, 96
messages, 99
properties, 75
referencing, 96-97
value models, 85
variables, 97

ObjectShare, 90
OCXs, 171
Olivetti, 86
OOPSLA, 83
OOZE, 66
PARC, 54
ParcPlace Holders, 82-83
ParcPlace Systems, 83

portability, 83
VisualWorks, 84

patterns, 186
Pencin, Russ, 83
platform independence, 168
pluggable interfaces, 78
polymorphism, 179
Pope, Steven, 83
portability, 68, 73
projects

banking, 191
government, 192
insurance, 191
manufacturing, 192
telecommunications, 192
trading, 191
Web servers, 191

protocols, 131

collection classes, 144
conforming, 132
floating-point, 143
fraction, 143
integer, 142
message signatures, 132
number, 140
numeric, 140
objects, 133-139

PS Smalltalk, 70
publishing, 71
Putz, Steve, 78
rapid change, 67
Reenskaug, Trygve, 78
reference books, 90
references, 194
reflective capabilities, 177
Rosetta Smalltalk, 86
simulation kit, 66
SmalltalkExpress, 166
source code, 177
Squeak, 166
Star Workstation, 80
symbols, 56-57
syntax, 61, 178
system services, 178
Taylor, Bob, 65
Tesler, Larry, 64
third party products, 171, 185
threads, 170
Turtle Geometry, 60
Twinkle, 81
types, 179
universities, 87

Borning, Alan, 87
BrouHaHa, 88
Canada, 88
ENVY, 89
Griswold, David, 88
Johnson, Ralph, 88
LaLond, Wilf, 88
Miranda, Eliot, 88
Moss, Eliot, 87
Orwell, 88
Patterson, Dave, 88
Pugh, John, 88
SELF, 88
StrongTalk, 88
Suzuki, Nori, 88
ThingLab, 87
Thomas, Dave, 88
Typed Smalltalk, 88
Ungar, David, 88

value models, VisualWorks, 85
variables

instances, 105
self, 63
super, 63

vendors, 85, 187

European, 87
Softsmarts, 87
Tektronix, 87

versions, 53

Smalltalk 2.1, 83
Smalltalk V, 86
Smalltalk-71, 53
Smalltalk-72, 53
Smalltalk-74, 59
Smalltalk-76, 59
Smalltalk-80, 3, 71-73
SmalltalkExpress,166, 190

virtual image, 72
virtual machine, 72, 168
Web servers, 191
Web sites, 193
XSIS, 81
Zydbel, Frank, 80

Smalltalk 2.1, 83
Smalltalk V, 86
Smalltalk-71, 53
Smalltalk-72, 53
Smalltalk-74, 59
Smalltalk-76, 59
Smalltalk-80, 3, 71

class library, 73
The Language and Its Implementation, 3

SmalltalkExpress, 166, 190
smart pointers, C++, 257
SOCK Acceptor, Web, 30
SOCK Stream, Web, 30
Softsmarts (Smalltalk), 87
software, communication, 17

ACE framework, 18
algorithmic design, 18
classes, 22
complexities, <<17-18|5a:0>>
frameworks, 19, 22
OOP, 18
patterns, <<19-21|5a:0>>
problems, 19
solutions, 21
Web servers, 31

solutions, communication software, 21
SortedCollection (collection classes), 160
source code, Smalltalk, 177
source files, C++, 313

defining, 316
maintaining consistency, 315

specifiers, C++, pitfalls, 411
Squeak, 166, 190
stacks

C, size, 219
C++, 220
Modula-3, 709

standard I/O library, C++, 307
standard library, C++, 274, 387-388

facilities, 282
foundation libraries, 275
stream I/O, 276
templates, 278-282

standardization, C++, 253

accepted features, 274
ANSI, 255
ISO, 255

Star Workstation, Smalltalk, 80
State pattern, Web servers, 36
statement productions, Modula-3 syntax, 740-741
statements

C++, 339

blocks, 340
break, 342
conditional, 341
continue, 342
expression, 340
goto, 342
if, 341
null, 339
pass, 338
precedence, 339
return expression, 338
switch, 344-346
throw, 338, 346
while, 341

Java, 816

break, 818-819
continue, 818-819
do, 816
else, 816
for, 817
if, 816
import, 795-796, 820
package, 795, 820
switch, 817
synchronized, 819
try/catch/finally, 822
while, 816

Modula-3, 692

assignable, 692-693
block, 695
CASE, 700
DEC, 702
EVAL, 695
EXIT, 697
FOR, 699
IF, 698
INC, 702
LOCK, 702
LOOP, 697
procedure calls, 693-695
RAISE, 696
REPEAT, 699
RETURN, 698
return-reception, 692
sequential, 695
TRY-EXCEPT, 696
TRY-FINALLY, 697
TYPECASE, 701
WHILE, 699
WITH, 699


static errors, Modula-3, 677
static fields (Java objects), 758
static variables, Java, 798, 837-838
static members, C, 222
static methods, Java, 761
static objects, C++, memory, 239
static type checking

C with Classes, 212
C++, 245
Eiffel, 464

STEELMAN Report (Ada concurrency), 647
Stepanov, Alexander (C++), 278
storage pool, Ada, dynamic data structures, 639
strategic patterns, Web

Acceptor, 31
Active Object, 34
Adaptor, 36
Half-sync/Half-async, 34
Proactor, 32
Reactor, 32
Singleton, 36
State, 36
Strategy, 35

Strategy pattern, Web servers, 35
Strchr function, C++, 419, 422
Stream I/O library, C++, 276
streams, ACE framework components, 27
String (collection class), 145
string library, C++, 391-392
string literals, C++, 334-335
string objects, Java, 763
strings

Ada, picture, 598
Java, 803, 813
Smalltalk, collection classes, 145

Strlen function, C++, 335
StrongTalk (Smalltalk), 88
Stroustrup, Bjarne, 197, 402

acknowledgments, 298
beginnings of C++, 197
references, 298

Annotated C++ Reference Manual, 254
The C++ Programming Language, 243, 258
The Design and Evolution of C++, 258
What is Object-Oriented Programming?, 244


structural property classes, Eiffel, 520
structures

C syntax, 217
C++

defining, 351
reversing, 370-371


SUBARRAY (Modula-3 designators), 715
subclasses

Java, 765, 847
object-oriented programming, 778
Smalltalk, 108

inheritance, 109
self identifier, 110
super identifier, 111


subcontracting Eiffel, 463, 522
subscripting Modula-3 designators, 715
subtasks (Ada concurrency), 647
subtypes, Ada, 580, 586-589
subtyping Modula-3, 689

arrays, 690
branded types, 690
objects, 690
procedures, 690
references, 690

super identifier, Smalltalk classes, 111
Super keyword, Java, 850
Super variable, Smalltalk, 63
superclasses

Java, 767, 849
object-oriented programming, 778
Smalltalk, 108

Suzuki, Nori (Smalltalk), 88
Switch statement

C++, 344-346
Java, 817

symbols, Smalltalk, 56-57
symbols (spacing in C++), 410
synchronization, ACE framework components, 26
Synchronized keyword, Java, 784, 820, 829
Synchronized statement, Java, 819
syntax

C, 216-217
C++, 409

const, 412-416
constructor initializers, 417
declarations, 411
lexical analysis, 409
pitfalls, 418
specifiers, 411
symbol spacing, 410
tokens, 409

Modula-3, 737

comments, 739
compilation unit productions, 740
conventions, 739-740
expression productions, 741-742
keywords, 738
miscellaneous productions, 742
operators, 714, 738
pragmas, 739
reserved identifiers, 738
statement productions, 740-741
token productions, 742-743
type productions, 741

Smalltalk, 61, 178

system properties list, Java, 791
system services, Smalltalk, 178
System.exit() method, Java, 791
System.getProperty() method, Java, 791
systems, Eiffel, 471-472

T',
          ],
          [
            1,
            '[ap 05:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 5.10',
            "Chapter 5\x{2014}Smalltalk: A Developer\x{2019}s Perspective


5.1. The History of Smalltalk

5.1.1. Early Smalltalk Commercialization
5.1.2. Current Smalltalk Commercialization

5.2. Smalltalk Features

5.2.1. Core Features
5.2.2. Class Library Features

5.3. The Smalltalk Language

5.3.1. One-Page Syntax

5.4. Some Simple Smalltalk Code

5.4.1. Blocks
5.4.2. ANSI Standard Smalltalk

5.5. The Smalltalk Development Environment

5.5.1. Browsers and Team Development Tools
5.5.2. Smalltalk Development Tools

5.6. Advantages and Disadvantages to Smalltalk
5.7. The Smalltalk Culture

5.7.1. Frameworks and Patterns
5.7.2. Object Technology Centers
5.7.3. The Smalltalk Development Lifecycle
5.7.4. The Vendors
5.7.5. Freeware and Shareware

5.8. Projects That Use Smalltalk

5.8.1. Smalltalk as a Web Server
5.8.2. Trading in Smalltalk
5.8.3. Banking in Smalltalk
5.8.4. Insurance and Smalltalk
5.8.5. Telecommunications and Smalltalk
5.8.6. Manufacturing, Utility, Pharmaceuticals, and Transportation with Smalltalk
5.8.7. The Government and Smalltalk

5.9. Conclusion
<<5.10|5a:0>>. Smalltalk Places of Interest
<<5.11|5a:0>>. References",
          ],
          [
            1,
            '[ap 06:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 6.10',
            "Part III\x{2014}C++

Chapter 6\x{2014}A History of C++


6.1. Introduction to C++
6.2. C with Classes: 1979-1983

6.2.1. Prehistory of C++
6.2.2. The Birth of C with Classes
6.2.3. C with Classes Feature Overview
6.2.4. C with Classes Feature Details
6.2.5. The C with Classes Work Environment

6.3. From C with Classes to C++: 1982-1985

6.3.1. Aims
6.3.2. Cfront
6.3.3. Language Feature Details
6.3.4. C++\x{2019}s Relationship to Classic C
6.3.5. Tools for Language Design
6.3.6. The C++ Programming Language (First Edition)
6.3.7. The \x{201c}What Is?\x{201d} Paper

6.4. C++ Release 2.0: 1985-1988

6.4.1. C++ 2.0 Feature Overview
6.4.2. Multiple Inheritance
6.4.3. Abstract Classes

6.5. Standardization: 1988-1998

6.5.1. The Annotated Reference Manual
6.5.2. ANSI and ISO
6.5.3. C++ 2.1 Feature Overview
6.5.4. Some Minor Features
6.5.5. Templates
6.5.6. Exception Handling
6.5.7. Namespaces
6.5.8. Runtime Type Identification
6.5.9. Rampant Featurism?

6.6. The Standard Library

6.6.1. Early Foundation Libraries
6.6.2. The Stream I/O Library
6.6.3. The Standard Template Library
6.6.4. Standard Library Facilities

6.7. The Explosion in Interest and Use: 1987-The Present

6.7.1. Conferences
6.7.2. Journals and Books
6.7.3. Compilers
6.7.4. Tools and Environments
6.7.5. Commercial Competition

6.8. Retrospective

6.8.1. Did C++ Succeed at What It Was Designed For?
6.8.2. Is C++ a Coherent Language?
6.8.3. What Was the Biggest Mistake?
6.8.4. Hopes for the Future

6.9. Acknowledgments
<<6.10|5a:0>>. References",
          ],
          [
            1,
            '[ap 07:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 7.10',
            "Chapter 7\x{2014}A Detailed Introduction to C++


7.1. C++ Overview

7.1.1. A Multiparadigm Language
7.1.2. Elementary C++ Examples
7.1.3. Language Versus Library

7.2. C++ Fundamentals

7.2.1. Program Structure
7.2.2. Numbers and Arithmetic
7.2.3. Enumerated Types
7.2.4. Numeric Conversions
7.2.5. Operator Precedence
7.2.6. Pointers, References, and Arrays
7.2.7. String Literals
7.2.8. Functions
7.2.9. Statements
7.2.10. Namespaces

7.3. Data Abstraction

7.3.1. Structures and Classes
7.3.2. Member Functions
7.3.3. Protection
7.3.4. Special Member Functions
7.3.5. Pointers to Members
7.3.6. A Data Abstraction Example

7.4. Generic Programming

7.4.1. Template Functions
7.4.2. Template Classes
7.4.3. Generic Algorithms

7.5. Object-Oriented Programming

7.5.1. Inheritance
7.5.2. Dynamic Binding
7.5.3. An Extended Object-Oriented Programming Example

7.6. The Standard Library

7.6.1. Input/Output
7.6.2. Strings
7.6.3. Numerics
7.6.4. Containers
7.6.5. Iterators
7.6.6. Algorithms
7.6.7. Adaptors

7.7. Summary
7.8. Recommended Reading
7.9. References
<<7.10|5a:0>>. Acknowledgments",
          ],
          [
            1,
            '[ap 09:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 9.10',
            "Part IV\x{2014}Eiffel

Chapter 9\x{2014}Eiffel


9.1. Eiffel Overview
9.2. General Properties
9.3. The Software Process in Eiffel

9.3.1. Clusters and the Cluster Model
9.3.2. Seamlessness and Reversibility
9.3.3. Generalization and Reuse
9.3.4. Constant Availability
9.3.5. Compilation Technology
9.3.6. Quality and Functionality

9.4. Hello, World
9.5. The Static Picture: System Organization

9.5.1. Systems
9.5.2. Classes
9.5.3. Class Relations
9.5.4. The Global Inheritance Structure
9.5.5. Clusters
9.5.6. External Software

9.6. The Dynamic Structure: Execution Model

9.6.1. Objects, Fields, Values, and References
9.6.2. Features
9.6.3. A Simple Class
9.6.4. Creating and Initializing Objects
9.6.5. Entities
9.6.6. Calls
9.6.7. Infix and Prefix Notation
9.6.8. Type Declaration
9.6.9. Type Categories
9.6.10. Basic Operations
9.6.11. Deep Operations and Persistence
9.6.12. Memory Management
9.6.13. Information Hiding and the Call Rule
9.6.14. Execution Scenario
9.6.15. Abstraction

9.7. Genericity
9.8. Design by Contract, Assertions, and Exceptions

9.8.1. Design by Contract Basics
9.8.2. Expressing Assertions
9.8.3. Using Assertions for Built-in Reliability
9.8.4. Runtime Assertion Monitoring
9.8.5. The Short Form of a Class
9.8.6. Exception Handling
9.8.7. Other Applications of Design by Contract

9.9. The Inheritance Mechanism

9.9.1. Basic Inheritance Structure
9.9.2. Redefinition
9.9.3. Polymorphism
9.9.4. Dynamic Binding
9.9.5. Deferred Features and Classes
9.9.6. Applications of Deferred Classes
9.9.7. Structural Property Classes
9.9.8. Multiple Inheritance and Feature Renaming
9.9.9. Inheritance and Contracts
9.9.10. Joining and Uneffecting
9.9.11. Changing the Export Status
9.9.12. Flat and Flat-Short Forms
9.9.13. Repeated Inheritance and Selection
9.9.14. Constrained Genericity
9.9.15. Assignment Attempt
9.9.16. Covariance and Anchored Declarations

<<9.10|5a:0>>. Other Important Mechanisms

9.10.1. once Routines and Shared Objects
9.10.2. Constant Attributes
9.10.3. Instructions
9.10.4. Lexical Conventions

<<9.11|5a:0>>. Concurrency and Further Developments

9.11.1. SCOOP
9.11.2. Other Developments

<<9.12|5a:0>>. Eiffel History
<<9.13|5a:0>>. More Information on Eiffel

9.13.1. Documentation
9.13.2. Information Sources
9.13.3. Compiler Sources",
          ],
          [
            1,
            '[ap 11:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 11.10',
            "Part VI\x{2014}Modula-3

CHAPTER 11\x{2014}The Modula-3 Programming Language


11.2. Introduction

11.2.2. Perspective
11.2.3. Features

11.3. Definitions
11.4. Types

11.4.1. Ordinal Types
11.4.2. Floating-Point Types
11.4.3. Arrays
11.4.4. Records
11.4.5. Packed Types
11.4.6. Sets
11.4.7. References
11.4.8. Procedures
11.4.9. Objects
11.4.10. Subtyping Rules
11.4.11. Predeclared Opaque Types

11.5. Statements

11.5.1. Assignment
11.5.2. Procedure Calls
11.5.3. EVAL
11.5.4. Block Statements
11.5.5. Sequential Composition
11.5.6. RAISE
11.5.7. TRY-EXCEPT
11.5.8. TRY-FINALLY
11.5.9. LOOP
11.5.10. EXIT
11.5.11. RETURN
11.5.12. IF
11.5.13. WHILE
11.5.14. REPEAT
11.5.15. WITH
11.5.16. FOR
11.5.17. CASE
11.5.18. TYPECASE
11.5.19. LOCK
11.5.20. INC and DEC

11.6. Declarations

11.6.1. Types
11.6.2. Constants
11.6.3. Variables
11.6.4. Procedures
11.6.5. Exceptions
11.6.6. Opaque Types
11.6.7. Revelations
11.6.8. Recursive Declarations

11.7. Modules and Interfaces

11.7.1. Import Statements
11.7.2. Interfaces
11.7.3. Modules
11.7.4. A Sample Module and Interface
11.7.5. Generics
11.7.6. Initialization
11.7.7. Safety

11.8. Expressions

11.8.1. Conventions for Describing Operations
11.8.2. Operation Syntax
11.8.3. Designators
11.8.4. Numeric Literals
11.8.5. Text and Character Literals
11.8.6. NIL
11.8.7. Function Application
11.8.8. Set, Array, and Record Constructors
11.8.9. NEW
11.8.10. Arithmetic Operations
11.8.11. Relations
11.8.12. Boolean Operations
11.8.13. Type Operations
11.8.14. Text Operations
11.8.15. Constant Expressions

11.9. Unsafe Operations
<<11.10|5a:0>>. Required Interfaces

11.10.1. The Text Interface
11.10.2. The Thread Interface
11.10.3. The Word Interface
11.10.4. The Real, LongReal, and Extended Interfaces
11.10.5. The RealFloat, LongFloat, and ExtendedFloat Interfaces
11.10.6. The FloatMode Interface

<<11.11|5a:0>>. Syntax

11.11.1. Keywords
11.11.2. Reserved Identifiers
11.11.3. Operators
11.11.4. Comments
11.11.5. Pragmas
11.11.6. Conventions for Syntax
11.11.7. Compilation Unit Productions
11.11.9. Statement Productions
11.11.9. Type Productions
11.11.10. Expression Productions
11.11.11. Miscellaneous Productions
11.11.12. Token Productions

<<11.12|5a:0>>. Acknowledgments",
          ],
          [
            1,
            '[13:10] Handbook of Programming Languages Volume 1 - Peter H. Salus.epub (ewtoc.html) - 13.10',
            "Part VII\x{2014}Java

Chapter 12\x{2014}What Is Java?
Chapter 13\x{2014}Working with Java


13.1. Getting Started
13.2. Variables
13.3. Comments in Code
13.4. Named Constants

13.4.1. Unicode Characters

13.5. Flow of Control
13.6. Classes and Objects

13.6.1 Creating Objects
13.6.2. Static or Class Fields
13.6.3. The Garbage Collector

13.7. Methods and Parameters

13.7.1. Invoking a Method
13.7.2. The this Reference
13.7.3. Static or Class Methods

13.8. Arrays
13.9. String Objects
<<13.10|5a:0>>. Extending a Class

13.10.1. The Object Class
13.10.2. Invoking Methods from the Superclass

<<13.11|5a:0>>. Interfaces
<<13.12|5a:0>>. Exceptions
<<13.13|5a:0>>. Packages
<<13.14|5a:0>>. The Java Infrastructure
<<13.15|5a:0>>. Other Topics Briefly Noted",
          ],
        ];

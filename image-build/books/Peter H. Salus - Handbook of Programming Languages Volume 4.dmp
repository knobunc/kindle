$VAR1 = [
          [
            1,
            '[ap 06:55] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (016-018.html) - 5 to 7',
            'We can change the value of foo from <<5 to 7|10a:0>> by evaluating this expression:',
          ],
          [
            1,
            '[ap 02:15] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (018-022.html) - 2.15',
            "\x{2022} The fourth drawer has in it a property list, a component we have not yet described. (See section <<2.15|5a:0>>.)",
          ],
          [
            1,
            '[ap 02:15] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (018-022.html) - 2.15',
            'The fourth drawer in our example is empty; it could contain a property list, which is described in section <<2.15|5a:0>>.',
          ],
          [
            1,
            '[ap 02:10] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (024-026.html) - 2.10',
            "In brief, Lisp has two aspects: that understood through the read-eval-print loop, in which computations return a value; and that understood through side effects, in which the computer does something else beside compute.
<<2.10|9p>>. Types of Variables
A variable is a name used in a program to stand for a value. A variable has a standard place in which its current value is always found\x{2014}the value cell of a symbol. (Earlier, we described this value cell as one of the drawers in our chest of drawers metaphor.)",
          ],
          [
            1,
            '[ap 02:11] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (031-033.html) - 2.11',
            'Next
<<2.11|5a:0>>. Sequencing
Most commonly, in Emacs Lisp, the Lisp interpreter evaluates expressions in the order in which they appear in the text, that is, left to right, top to bottom. However, inner expressions are evaluated first because the results they produce may be needed by the enclosing expression. Some forms, such as conditionals, evaluate enclosed expressions in uncommon ways.',
          ],
          [
            1,
            '[ap 02:12] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (031-033.html) - 2.12',
            'progn is often used in the then part of an f expression, because that part can consist of only one list; a subsequent list or lists, if any, belong to the else part.
<<2.12|9p>>. Conditionals
Conditionals provide choice. In a conditional, depending on circumstances, one expression or another will be evaluated.',
          ],
          [
            1,
            '[ap 02:13] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (033-036.html) - 2.13',
            'This would have produced the same result, but is longer and less elegant.
<<2.13|9p>>. while Loops and Recursion
Emacs Lisp has two primary ways to cause an expression, or a series of expressions, to be evaluated repeatedly: One uses a while loop, and the other uses recursion.',
          ],
          [
            1,
            '[ap 02:14] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (041-044.html) - 2.14',
            'Next
<<2.14|5a:0>>. Macros
The defmacro built-in function allows you define new features in Emacs Lisp.',
          ],
          [
            1,
            '[ap 02:15] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (041-044.html) - 2.15',
            "For more information, see the section \x{201c}Macros\x{201d} in The GNU Emacs Lisp Reference Manual.
<<2.15|9p>>. Property Lists
A property list, or plist for short, is a list of paired elements stored in the property list cell of a symbol. Each of the pairs associates a property name (usually a symbol) with a property or value.",
          ],
          [
            1,
            '[ap 02:16] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (044-047.html) - 2.16',
            'Next
<<2.16|5a:0>>. Keymaps
A keymap tells Emacs what definition to call when you press a key or mouse button. Thus, in Text mode, typing the a key runs self-insert- command, which inserts the letter a. Typing the keychord C-a runs beginning-of-line, which moves point to the beginning of the current line.',
          ],
          [
            1,
            '[ap 02:17] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (044-047.html) - 2.17',
            'First, define an interactive function; this uses the e argument to interactive, which handles events. Then, define the key for the local RMAIL-summary mode map, using define-key.
<<2.17|9p>>. Editing Lisp
GNU Emacs has two modes for editing Emacs Lisp: Lisp Interaction mode and Emacs-Lisp mode. Lisp Interaction mode is for an interactive session with Emacs Lisp, and Emacs-Lisp mode is for editing source files of programs to run in Emacs Lisp. The two modes are nearly identical.',
          ],
          [
            1,
            '[ap 02:18] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (047-050.html) - 2.18',
            'Next
<<2.18|5a:0>>. Help
GNU Emacs provides a wealth of online documentation and help. It is well worth learning to use these riches.',
          ],
          [
            1,
            '[ap 02:19] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (047-050.html) - 2.19',
            'These three manuals are written in Texinfo, which is a documentation system that uses a single source file to produce both online information and printed output. Hence, you can read the manuals in typeset printed form, you can print copies yourself, or you can order copies from the Free Software Foundation.
<<2.19|9p>>. Debugging
GNU Emacs has two debuggers, debug and edebug. The first is built into the internals of Emacs and is always available; the second requires that you specially evaluate the functions you want to debug.',
          ],
          [
            1,
            '[ap 02:20] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (050-054.html) - 2.20',
            "Edebug is described in the section \x{201c}Edebug\x{201d} in The GNU Emacs Lisp Reference Manual.
<<2.20|9p>>. Backups and Auto-Saving
GNU Emacs can keep either a single backup file or a series of numbered backup files for each file you edit. This means you can go back to earlier versions of files.",
          ],
          [
            1,
            '[ap 02:21] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (050-054.html) - 2.21',
            "By default, Emacs saves your files every 300 keystrokes, or after around 30 seconds of idle time. You can examine your auto-saved files like any other file, or use the M-x recover-file command to restore them.
<<2.21|9p>>. Evaluating or Loading a Whole File
To evaluate, or load, a whole file, use the M-x load-file command. This interactive function reads a filename using Emacs\x{2019}s minibuffer and then evaluates the complete contents of that file as Lisp. Incidentally, you can evaluate a whole buffer with the M-x eval-current-buffer command and evaluate a region within a buffer with the M-x eval-region command.",
          ],
          [
            1,
            '[ap 02:22] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (050-054.html) - 2.22',
            'This expression prepends the emacs directory in your home directory to the existing load-path. (People often keep personally interesting .el files in the emacs subdirectory of their home directory.)
<<2.22|5a:0>>. Byte Compilation
GNU Emacs possesses a program that converts humanly readable Emacs Lisp expressions into an unreadable form that the byte-code interpreter can run more quickly. Byte code is not native code, specific to a particular type of machine, but can run on any machine; it runs faster than humanly readable Emacs Lisp, but more slowly than true compiled code.',
          ],
          [
            1,
            '[ap 02:23] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (050-054.html) - 2.23',
            "See the sections \x{201c}Libraries of Lisp Code for Emacs\x{201d} in The GNU Emacs Manual, and \x{201c}The Compilation Functions\x{201d} in The GNU Emacs Lisp Reference Manual.
<<2.23|9p>>. Your .emacs Initialization File
GNU Emacs is customizable and extensible. This means you can change how Emacs work and add to it. You can place your own customizations and small extensions in a file in your home directory called .emacs. This file is loaded when you start your Emacs; it is loaded after the sitewide initialization file, site-start.el, but before another sitewide initialization file default.el. This means your customizations and extensions will override whatever is in site-start.el, but will be overridden by default.el.",
          ],
          [
            1,
            '[00:00] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (078-082.html) - 0',
            'This example has one class counter and two instances c1 and c2. A counter accepts only one message, next. Each counter has a local state variable count, whose value starts at <<0|9g>> and is increased by one for each next message that the counter receives.',
          ],
          [
            1,
            '[20:00] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (about_split_001.html) - 1960',
            'Just over 40 years ago there were no programming languages. In 1954 programming was still a function of hardware. Fortran was invented in 1957. It was soon being taught. By <<1960|9:0>>, not only had COBOL and Lisp joined the roster, but so had others, many now thankfully forgotten. Over the past 40 years, nearly 4,000 computer languages have been produced. Only a tithe of these are in use today, but the growth and development of them has been progressive and organic.',
          ],
          [
            1,
            '[ap 11:12] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 11-12',
            'defining classes (CLOS), 111
Emacs Lisp functions, <<11-12|5a:0>>
functions generic (CLOS), 152',
          ],
          [
            1,
            '[ap 11:12] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 11-12',
            'cons, 37
defining, <<11-12|5a:0>>
defmacro, 41-42',
          ],
          [
            1,
            '[16:17] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 16-17',
            'forward-line, 15
interactive, 12, <<16-17|5a:0>>
lambda, 20',
          ],
          [
            1,
            '[22:25] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 22-25',
            'running in batch mode, 7
side effects, <<22-25|5a:0>>
source, accessing, 47',
          ],
          [
            1,
            '[18:19] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 18-19',
            'symbols components, 18
evaluating, <<18-19|5a:0>>, 21
property lists, 44',
          ],
          [
            1,
            '[17:18] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 17-18',
            'property lists, 44
variables, <<17-18|5a:0>>, 25 buffer-local variables, 29-31
global, 26-27',
          ],
          [
            1,
            '[17:18] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 17-18',
            'setting with let expression, 28-29
values, <<17-18|5a:0>>
empty lists Emacs Lisp, 8',
          ],
          [
            1,
            '[ap 09:10] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 9-10',
            'functions, 12
lists, <<9-10|5a:0>>
symbols, <<18-19|5a:0>>, 21',
          ],
          [
            1,
            '[ap 09:10] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 9-10',
            'lists, <<9-10|5a:0>>
symbols, <<18-19|5a:0>>, 21
expressions with Lisp interpreter, 10',
          ],
          [
            1,
            '[13:15] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 13-15',
            'findall predicate (Prolog), 196-197
finding text file nodes, <<13-15|5a:0>>
first argument indexing, Prolog clauses, 218-219',
          ],
          [
            1,
            '[ap 11:12] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 11-12',
            'cons, 37
defining, <<11-12|5a:0>>
defmacro, 41-42',
          ],
          [
            1,
            '[16:17] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 16-17',
            'forward-line, 15
interactive, 12, <<16-17|5a:0>>
lambda, 20',
          ],
          [
            1,
            '[16:17] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 16-17',
            'instantiation, Prolog variables, 182, 197
interactive function (Emacs Lisp), 12, <<16-17|5a:0>>
interfaces (CLOS objects), 109',
          ],
          [
            1,
            '[13:15] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 13-15',
            'Nl predicate (Prolog), 183
nodes, finding text files, <<13-15|5a:0>>
non-interactive functions (Emacs Lisp), 14',
          ],
          [
            1,
            '[18:19] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 18-19',
            'Emacs Lisp components, 18
evaluating, <<18-19|5a:0>>, 21
property lists, 44',
          ],
          [
            1,
            '[13:15] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 13-15',
            'texnfo-upd.el files, 13
txt files, finding nodes, <<13-15|5a:0>>
toggling window properties, 92',
          ],
          [
            1,
            '[17:19] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 17-19',
            'V
values, Emacs Lisp variables, <<17-19|5a:0>>
variables (Emacs Lisp), <<17-18|5a:0>>, 25-29 buffer-local variables, 29-31',
          ],
          [
            1,
            '[17:19] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (book-index_split_001.html) - 17-19',
            'values, Emacs Lisp variables, <<17-19|5a:0>>
variables (Emacs Lisp), <<17-18|5a:0>>, 25-29 buffer-local variables, 29-31
global, 26-27',
          ],
          [
            1,
            '[ap 02:10] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.10',
            '2.9. The read-eval-print Loop and Side Effects
<<2.10|5a:0>>. Types of Variables 2.10.1. defvar and defconst
2.10.2. setq',
          ],
          [
            1,
            '[ap 02:11] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.11',
            '2.10.5. Buffer-Local Variables
<<2.11|5a:0>>. Sequencing
<<2.12|5a:0>>. Conditionals 2.12.1. and, or, and not',
          ],
          [
            1,
            '[ap 02:11] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.11',
            '<<2.11|9p>>. Sequencing
<<2.12|5a:0>>. Conditionals 2.12.1. and, or, and not
<<2.13|5a:0>>. while Loops and Recursion 2.13.1. while',
          ],
          [
            1,
            '[ap 02:12] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.12',
            '<<2.12|9p>>. Conditionals 2.12.1. and, or, and not
<<2.13|5a:0>>. while Loops and Recursion 2.13.1. while
2.13.2. car, cdr, cons: Fundamental Functions',
          ],
          [
            1,
            '[ap 02:14] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.14',
            '2.13.4. Recursion
<<2.14|5a:0>>. Macros 2.14.1. The list Built-in Function
2.14.2. Backquote',
          ],
          [
            1,
            '[ap 02:15] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.15',
            '2.14.2. Backquote
<<2.15|5a:0>>. Property Lists
<<2.16|5a:0>>. Keymaps',
          ],
          [
            1,
            '[ap 02:15] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.15',
            '<<2.15|9p>>. Property Lists
<<2.16|5a:0>>. Keymaps
<<2.17|5a:0>>. Editing Lisp',
          ],
          [
            1,
            '[ap 02:16] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.16',
            '<<2.16|9p>>. Keymaps
<<2.17|5a:0>>. Editing Lisp
<<2.18|5a:0>>. Help',
          ],
          [
            1,
            '[ap 02:17] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.17',
            '<<2.17|9p>>. Editing Lisp
<<2.18|5a:0>>. Help
<<2.19|5a:0>>. Debugging 2.19.1. The Built-in Debugger',
          ],
          [
            1,
            '[ap 02:18] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.18',
            '<<2.18|9p>>. Help
<<2.19|5a:0>>. Debugging 2.19.1. The Built-in Debugger
2.19.2. Edebug',
          ],
          [
            1,
            '[ap 02:20] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.20',
            '2.19.2. Edebug
<<2.20|5a:0>>. Backups and Auto-Saving
<<2.21|5a:0>>. Evaluating or Loading a Whole File',
          ],
          [
            1,
            '[ap 02:20] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.20',
            '<<2.20|9p>>. Backups and Auto-Saving
<<2.21|5a:0>>. Evaluating or Loading a Whole File
<<2.22|5a:0>>. Byte Compilation',
          ],
          [
            1,
            '[ap 02:21] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.21',
            '<<2.21|9p>>. Evaluating or Loading a Whole File
<<2.22|5a:0>>. Byte Compilation
<<2.23|5a:0>>. Your .emacs Initialization File',
          ],
          [
            1,
            '[ap 02:22] Handbook of Programming Languages Volume 4 - Peter H. Salus.epub (ewtoc.html) - 2.22',
            "<<2.22|9p>>. Byte Compilation
<<2.23|5a:0>>. Your .emacs Initialization File
Part II\x{2014}Scheme Chapter 3\x{2014}Scheme 3.1. Who Uses Scheme?",
          ],
        ];

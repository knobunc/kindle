$VAR1 = [
          [
            1,
            '[ap 03:11] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0003.html) - 3.11',
            "All of the foregoing discussion was by way of explaining just why our memoize function worked. While it\x{2019}s tempting to dismiss this as a triviality \x{2014} \x{201c}Of course it worked!\x{201d} \x{2014} it\x{2019}s worth noticing that in many languages it won\x{2019}t work and can\x{2019}t be made to work. Several important and complex features had to operate together: delayed garbage collection, bindings, generation of anonymous subroutines, and lexical closure. If you tried to implement a function like memoize in C, for example, you would get stuck, because C doesn\x{2019}t have any of those features. (See Section <<3.11|5a:0>>.)",
          ],
          [
            1,
            '[03:00] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0003.html) - 3 AM',
            "Let\x{2019}s consider a long-running network server program whose job is to sell some product, such as pizzas or weapons-grade plutonium. The cost of a pizza or a canister of plutonium includes the cost of delivery, which in turn depends on the current hour of the day and day of the week. Delivery late at night and on weekends is more expensive because fewer delivery persons are available and nobody likes to work at <<3 AM|5>>. The server might contain a function something like this:",
          ],
          [
            1,
            '[ap 03:10] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0003.html) - 3.10',
            "This allows the user to supply a cache that is tied to a disk file using their favorite DBM implementation, even one we\x{2019}ve never heard of. They could also pass in an ordinary hash; that would allow them to erase the cache or to expire old values from it if they wanted to.
<<3.10|4>> Alternatives to Memoization
Most pure functions present an opportunity for caching. Although it may appear at first that pure functions are rare, they do appear with some frequency. One place where pure functions are especially common is as the comparator functions used in sorting.",
          ],
          [
            1,
            '[ap 01:40] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0003.html) - 1.40',
            '7
<<1.40|5a:0>>
10',
          ],
          [
            1,
            '[ap 03:00] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0003.html) - 2.60',
            '26
<<2.60|5a:0>>
20',
          ],
          [
            1,
            '[ap 03:00] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0003.html) - 3.00',
            '60
<<3.00|5a:0>>
40',
          ],
          [
            1,
            '[ap 05:21] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0003.html) - 5.21',
            '417
<<5.21|5a:0>>
100',
          ],
          [
            1,
            '[ap 09:50] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0003.html) - 9.50',
            '9502
<<9.50|5a:0>>
10000',
          ],
          [
            1,
            '[ap 03:11] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0003.html) - 3.11',
            "If total_invested returns zero, the function caches \"0e0\" instead. The next time we look up the total invested by the same customer, the function sees \"0e0\" in the cache, and this value is true, so it doesn\x{2019}t call total_invested a second time. This \"0e0\" is the value given to the <=> operator for comparison, but in a numeric comparison it behaves exactly like 0, which is just what we want. The speed cost of the additional || operation, invoked only when a false value is returned by total_invested(), is tiny.
<<3.11|4>> Evangelism
If you\x{2019}re trying to explain to a C programmer why Perl is good, automatic memoization makes a wonderful example. Almost all programmers are familiar with caching techniques. Even if they don\x{2019}t use any caching techniques in their own programs, they are certainly familiar with the concept, from caching in web browsers, in the cache memory of their computer, in the DNS server, in their web proxy server, or elsewhere. Caching, like most simple, useful ideas, is ubiquitous.",
          ],
          [
            1,
            '[ap 03:12] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0003.html) - 3.12',
            "and it is impossible to make a serious mistake and break the function. If the memoization turns out to have been a bad idea, you can turn it off again in one second. Most programmers can appreciate the convenience of this. If you have five minutes to explain toaCprogrammer what benefits Perl offers over C, memoization is an excellent example to use.
<<3.12|4>> The Benefits of Speed
It may be tempting at this point to say that memoization is only an incremental improvement over manual caching techniques, because it does the same thing, and the only additional benefit is that you can turn it on and off more quickly. But that isn\x{2019}t really true. When a speed and convenience difference between tools is large enough, it changes the way you think about the tool and the ways you can use it. To automatically memoize a function takes 1/100 as much time as to write caching code for it manually. This is the same as the difference between the speed of an airplane and the speed of an oxcart. To say that the airplane is just a faster oxcart is to miss something essential: The quantitative difference is so large that it becomes a substantive qualitative difference as well.",
          ],
          [
            1,
            '[ap 10:21] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0003.html) - 10.21',
            '1
<<10.21|5a:0>>
searchfor',
          ],
          [
            1,
            '[ap 00:34] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0004.html) - 12:34',
            "Normally the Perl regex engine just checks to see if a string matches a pattern, and reports true or false. However, it\x{2019}s sometimes of interest what part of the target string matched. In list context, the m//g operator produces a list of all matching substrings:
\@matches = (\"<<12:34|2>>:56\" =\x{2dc} m/(\\d+)/g);
Here \@matches contains (\"12\", \"34\", \"56\"). In scalar context, m//g becomes the NEXTVAL operation for an iterator inside the regex, producing a different match each time:",
          ],
          [
            1,
            '[ap 00:34] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0004.html) - 12:34',
            "Here \@matches contains (\"12\", \"34\", \"56\"). In scalar context, m//g becomes the NEXTVAL operation for an iterator inside the regex, producing a different match each time:
while (\"<<12:34|2>>:56\" =\x{2dc} m/(\\d+)/g) {
  # do something with \$1
}
We will see this useful and little-known feature in more detail in Chapter 8. Now we\x{2019}ll see how we can build our own iterators.",
          ],
          [
            1,
            '[ap 08:14] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0004.html) - 08:14',
            "208.190.220.160 - - [04/Aug/2001:<<08:14|2>>:29 -0400]
 \"GET /\x{2dc}mjd/pictures/new.gif HTTP/1.1\" 200 95
 \"http://perl.plover.com/\"
 \"Mozilla/5.0 (Macintosh; U; PPC; en-US; rv:0.9.2) Gecko/20010629\"
195.3.19.207 - - [04/Aug/2001:<<13:39|2>>:11 -0400]
 \"GET /pics/small-sigils.gif HTTP/1.1\" 200 1586
 \"http://perl.plover.com/\"
 \"Mozilla/4.0 (compatible; MSIE <<5.01|5a:0>>; Windows NT 5.0; DigExt)\"
192.94.94.33 - - [07/Aug/2001:<<12:06|2>>:34 -0400]
 \"GET /yak/Identity/slide005.html HTTP/1.0\" 200 821
 \"http://perl.plover.com/yak/Identity/slide004.html\"
 \"Mozilla/4.6 [en] (X11; I; SunOS 5.8 sun4u)\"
199.93.193.10 - - [13/Aug/2001:<<13:04|2>>:39 -0400]
 \"GET /yak/dirty/miller_glenn_r.jpg HTTP/1.0\" 200 4376
 \"http://perl.plover.com/yak/dirty/slide009.html\"
 \"Mozilla/4.77 [en] (X11; U; SunOS 5.6 sun4u)\"
216.175.77.248 - - [15/Aug/2001:<<14:25|2>>:20 -0400]
 \"GET /yak/handson/examples/wordsort.pl HTTP/1.0\" 200 125
 \"http://perl.plover.com:80/yak/handson/examples/\"
 \"Wget/1.5.3\"
194.39.218.254 - - [16/Aug/2001:<<07:44|2>>:02 -0400]
 \"GET /pics/medium-sigils.gif HTTP/1.0\" 304
 \"http://perl.plover.com/local.html\"
 \"Mozilla/4.0 (compatible; MSIE <<5.01|5a:0>>; Windows NT 5.0)\"
210.239.93.70 - msdw [22/Aug/2001:<<01:29|2>>:28 -0400]
 \"GET /class/msdw-tokyo/ HTTP/1.0\" 401 469
 \"http://perl.plover.com/class/\"
 \"Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)\"
151.204.38.119 - - [25/Aug/2001:<<13:48|2>>:01 -0400]
 \"GET /yak/path/hanoi06.gif HTTP/1.0\" 200 239
 \"http://perl.plover.com/yak/path/\"
 \"Mozilla/4.77 [en] (WinNT; U)\"",
          ],
          [
            1,
            '[00:32] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0005.html) - 0032',
            "we choose \x{201c}perl\x{201d} as the canonical representative. Choosing the all-uppercase member of each group would work as well, of course, as would any other method that chooses exactly one representative from every equivalence class. Another familiar example is numerals: We might consider the numerals \x{201c}<<0032|18:0>>.50,\x{201d} \x{201c}32.5,\x{201d} and \x{201c}325e-01\x{201d} to be equivalent; when Perl converts these strings to an internal floating-point format, it is converting them to a canonical representation so that equivalent numerals have the same representation.",
          ],
          [
            1,
            '[ap 01:00] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0006.html) - 1',
            'The show() method starts by printing the head of the stream, which is <<1|9c:0>>. Then it goes to get the tail, using the tail() method:',
          ],
          [
            1,
            '[ap 01:00] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0006.html) - 1',
            'Since the tail is a promise, this forces the promise, which calls transform {...} $powers_of_2. transform() gets the head of $powers_of_2, which is <<1|9c:0>>, and doubles it, yielding a stream whose head is 2 and whose tail is a promise to double the rest of the elements of $powers_of_2. This stream is the tail of $powers_of_2, and show() prints its head, which is <<2|9c:0>>.',
          ],
          [
            1,
            '[ap 01:00] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0006.html) - 1',
            "Each element of the stream depends on calculating the tail of the original stream, and every time we look at a new element, we calculate the tail of \$powers_of_2, including the act of doubling the first element. We\x{2019}re essentially computing each element from scratch by building it up from <<1|9c:0>>, and what we should be doing is building each element on the previous element. Our basic problem is that we\x{2019}re forcing the same promises over and over. But by now we have a convenient solution to problems that involve repeating the same work over and over: memoization. We should remember the result whenever we force a promise, and then if we need the same result again, instead of calling the promise function, we\x{2019}ll get it from the cache.",
          ],
          [
            1,
            '[14:18] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0006.html) - 14:18',
            '706430 29/Jan/2003:<<14:18|2>>:30 29/Jan/2003:<<14:18|2>>:32 <boehm5@email.com> 1 1 0 0',
          ],
          [
            1,
            '[ap 00:10] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0006.html) - 12:10',
            '...
707045 28/Jan/2003:<<12:10|2>>:03 28/Jan/2003:<<12:10|2>>:03 <Paulmc@371.net> 1 1 0 0
707292 28/Jan/2003:<<12:10|2>>:03 28/Jan/2003:<<12:10|2>>:06 <Paulmc@371.net> 1 1 0 0
707046 28/Jan/2003:<<12:10|2>>:06 28/Jan/2003:<<12:10|2>>:07 <Paulmc@371.net> 4 3 1 0
707293 28/Jan/2003:<<12:10|2>>:07 28/Jan/2003:<<12:10|2>>:07 <guido@odiug.zope.com> 1 1 0 0
707670 28/Jan/2003:<<12:10|2>>:06 28/Jan/2003:<<12:10|2>>:08 <spam-return-133409-@plover.com-@[]> 2 2 0 0
707045 28/Jan/2003:<<12:10|2>>:07 28/Jan/2003:<<12:10|2>>:11 <guido@odiug.zope.com> 1 1 0 0
707294 28/Jan/2003:<<12:10|2>>:11 28/Jan/2003:<<12:10|2>>:11 <guido@odiug.zope.com> 1 1 0 0
707047 28/Jan/2003:<<12:10|2>>:22 28/Jan/2003:<<12:10|2>>:23 <ezmlm-return-10817-mjd-ezmlm=plover.com@list.cr.yp.to> 1 1 0 0
707048 28/Jan/2003:<<12:11|2>>:02 28/Jan/2003:<<12:11|2>>:02 <perl5-porters-return-71265-mjd-p5p2=plover.com@perl.org> 1 1 0 0
707503 24/Jan/2003:<<11:29|2>>:49 28/Jan/2003:<<12:11|2>>:35 <perl-qotw-discuss-return-1200-@plover.com-@[]> 388 322 2 64
707049 28/Jan/2003:<<12:11|2>>:35 28/Jan/2003:<<12:11|2>>:45 <> 1 1 0 0
707295 28/Jan/2003:<<12:11|2>>:41 28/Jan/2003:<<12:11|2>>:46 <perl6-internals-return-14784-mjd-perl6-internals=plover.com@perl.org> 1 1 0 0
...',
          ],
          [
            1,
            '[ap 00:11] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0006.html) - 12:11',
            'A bigger advantage of the stream approach comes if we want to reorder the output records. As written, the output stream contains message records in the order in which the messages were removed from the queue; that is, the output is sorted by the third field. Suppose we want to see the messages sorted by the second field, the time at which each message was first sent. In the preceding example output, notice the line for message 707503. Although the time at which it was removed from the queue (<<12:11|2>>:35 on 28 January) is in line with the surrounding messages, the time it was sent (<<11:29|2>>:49 on 24 January) is quite different. Most messages are delivered almost immediately, but this one took more than four days to complete. It represents a message that was sent to a mailing list with 324 subscribers. Two of the subscribers had full mailboxes, causing their mail systems to temporarily refuse new message for these subscribers. After four days, the mail system finally gave up and removed the message from the queue. Similarly, message 707670 arrived a second earlier but was delivered (to India) a second later than message 707293, which was delivered (locally) immediately after it arrived.',
          ],
          [
            1,
            '[ap 11:29] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0006.html) - 11:29',
            '...
707503 24/Jan/2003:<<11:29|2>>:49 28/Jan/2003:<<12:11|2>>:35 <perl-qotw-discuss-return-1200-@plover.com-@[]> 388 322 2 64',
          ],
          [
            1,
            '[ap 00:10] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0006.html) - 12:10',
            '707045 28/Jan/2003:<<12:10|2>>:03 28/Jan/2003:<<12:10|2>>:03 <Paulmc@371.net> 1 1 0 0
707292 28/Jan/2003:<<12:10|2>>:03 28/Jan/2003:<<12:10|2>>:06 <Paulmc@371.net> 1 1 0 0
707046 28/Jan/2003:<<12:10|2>>:06 28/Jan/2003:<<12:10|2>>:07 <Paulmc@371.net> 4 3 1 0
707670 28/Jan/2003:<<12:10|2>>:06 28/Jan/2003:<<12:10|2>>:08 <spam-return-133409-@plover.com-@[]> 2 2 0 0
707293 28/Jan/2003:<<12:10|2>>:07 28/Jan/2003:<<12:10|2>>:07 <guido@odiug.zope.com> 1 1 0 0
707045 28/Jan/2003:<<12:10|2>>:07 28/Jan/2003:<<12:10|2>>:11 <guido@odiug.zope.com> 1 1 0 0
...',
          ],
          [
            1,
            '[ap 04:25] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0006.html) - 4.25',
            "To get a better approximation, we repeat the process. The tangent line to the parabola at the point (1.5, 0.25) has the equation y = 3x \x{2212} <<4.25|5a:0>>. This line intersects the x-axis at 1.41667, which is correct to two decimal places.",
          ],
          [
            1,
            '[ap 02:55] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0008.html) - 2.55',
            'Delivered-To: mjd-filter-deliver2@plover.com
Received: from localhost [127.0.0.1] by plover.com
        with SpamAssassin (<<2.55|5a:0>> 1.174.<<2.19|9p>>-2003-05-19-exp);
        Mon, 11 Aug 2003 <<16:22|2>>:12 -0400
From: "Doris Bower" <yij447mrx@yahoo.com.hk>
To: webmaster@plover.com
Subject: LoseWeight Now with Pphentermine,Aadipex,Bontriil,PrescribedOnline,shipped
  to Your Door fltynzlfoybv kie',
          ],
          [
            1,
            '[ap 02:12] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0009.html) - 212',
            'The change on wire i wakes up the attached -node, which notices that both of its input wires now have values: Wire i has the value 212 and wire j has the value 32. The -node performs subtraction; it subtracts 32 from <<212|9c:0>> and sets its output wire k to the difference, 180.',
          ],
          [
            1,
            '[23:59] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/Section0009.html) - one to 0',
            "As usual, the synthetic constraints for a type are rather more interesting. In the absence of any other information, an expression like P is interpreted as the constraint P = 0. Later, the P = 0 might be combined with a Q = 0 to produce P + Q = 0 or P \x{2212} Q = 0, and we\x{2019}ll see that we can treat P = Q as if it were P \x{2212} Q = 0. So figuring out the synthetic constraints for a type like point involves locating all the scalar type subfeatures of point, and then setting each <<one to 0|10a:0>>.",
          ],
          [
            1,
            '[17:36] Higher-Order Perl_ Transforming Programs W - Mark Jason Dominus.epub (OEBPS/Text/footnotes.html) - 1736',
            "Isaac Newton discovered and wrote about the method first, but his write-up wasn\x{2019}t published until <<1736|9c:0>>. Joseph Raphson discovered the technique independently and published it in 1671. (back)",
          ],
        ];

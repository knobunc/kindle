03:00|"3 AM"|"Let’s consider a long-running network server program whose job is to sell some product, such as pizzas or weapons-grade plutonium. The cost of a pizza or a canister of plutonium includes the cost of delivery, which in turn depends on the current hour of the day and day of the week. Delivery late at night and on weekends is more expensive because fewer delivery persons are available and nobody likes to work at 3 AM. The server might contain a function something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 00:34"|12:34|"@matches = (""12:34:56"" =˜ m/(\d+)/g);
    Here @matches contains (""12"", ""34"", ""56""). In scalar context, m//g becomes the NEXTVAL operation for an iterator inside the regex, producing a different match each time:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 00:34"|12:34|"while (""12:34:56"" =˜ m/(\d+)/g) {
  # do something with $1
}
		We will see this useful and little-known feature in more detail in Chapter 8. Now we’ll see how we can build our own iterators."|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 08:14"|08:14|"208.190.220.160 - - [04/Aug/2001:08:14:29 -0400]
 ""GET /˜mjd/pictures/new.gif HTTP/1.1"" 200 95
 ""http://perl.plover.com/""
 ""Mozilla/5.0 (Macintosh; U; PPC; en-US; rv:0.9.2) Gecko/20010629""
195.3.19.207 - - [04/Aug/2001:13:39:11 -0400]
 ""GET /pics/small-sigils.gif HTTP/1.1"" 200 1586
 ""http://perl.plover.com/""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; DigExt)""
192.94.94.33 - - [07/Aug/2001:12:06:34 -0400]
 ""GET /yak/Identity/slide005.html HTTP/1.0"" 200 821
 ""http://perl.plover.com/yak/Identity/slide004.html""
 ""Mozilla/4.6 [en] (X11; I; SunOS 5.8 sun4u)""
199.93.193.10 - - [13/Aug/2001:13:04:39 -0400]
 ""GET /yak/dirty/miller_glenn_r.jpg HTTP/1.0"" 200 4376
 ""http://perl.plover.com/yak/dirty/slide009.html""
 ""Mozilla/4.77 [en] (X11; U; SunOS 5.6 sun4u)""
216.175.77.248 - - [15/Aug/2001:14:25:20 -0400]
 ""GET /yak/handson/examples/wordsort.pl HTTP/1.0"" 200 125
 ""http://perl.plover.com:80/yak/handson/examples/""
 ""Wget/1.5.3""
194.39.218.254 - - [16/Aug/2001:07:44:02 -0400]
 ""GET /pics/medium-sigils.gif HTTP/1.0"" 304
 ""http://perl.plover.com/local.html""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)""
210.239.93.70 - msdw [22/Aug/2001:01:29:28 -0400]
 ""GET /class/msdw-tokyo/ HTTP/1.0"" 401 469
 ""http://perl.plover.com/class/""
 ""Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)""
151.204.38.119 - - [25/Aug/2001:13:48:01 -0400]
 ""GET /yak/path/hanoi06.gif HTTP/1.0"" 200 239
 ""http://perl.plover.com/yak/path/""
 ""Mozilla/4.77 [en] (WinNT; U)""
    One of the common tasks of system administrators is to search through the log files looking for certain matching records; for example, the last time a certain user visited, or the last time a certain page was fetched. In fact, Perl itself first rose to prominence as a tool for helping system administrators answer exactly these sorts of questions. A typical query will look something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
13:39|13:39|"208.190.220.160 - - [04/Aug/2001:08:14:29 -0400]
 ""GET /˜mjd/pictures/new.gif HTTP/1.1"" 200 95
 ""http://perl.plover.com/""
 ""Mozilla/5.0 (Macintosh; U; PPC; en-US; rv:0.9.2) Gecko/20010629""
195.3.19.207 - - [04/Aug/2001:13:39:11 -0400]
 ""GET /pics/small-sigils.gif HTTP/1.1"" 200 1586
 ""http://perl.plover.com/""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; DigExt)""
192.94.94.33 - - [07/Aug/2001:12:06:34 -0400]
 ""GET /yak/Identity/slide005.html HTTP/1.0"" 200 821
 ""http://perl.plover.com/yak/Identity/slide004.html""
 ""Mozilla/4.6 [en] (X11; I; SunOS 5.8 sun4u)""
199.93.193.10 - - [13/Aug/2001:13:04:39 -0400]
 ""GET /yak/dirty/miller_glenn_r.jpg HTTP/1.0"" 200 4376
 ""http://perl.plover.com/yak/dirty/slide009.html""
 ""Mozilla/4.77 [en] (X11; U; SunOS 5.6 sun4u)""
216.175.77.248 - - [15/Aug/2001:14:25:20 -0400]
 ""GET /yak/handson/examples/wordsort.pl HTTP/1.0"" 200 125
 ""http://perl.plover.com:80/yak/handson/examples/""
 ""Wget/1.5.3""
194.39.218.254 - - [16/Aug/2001:07:44:02 -0400]
 ""GET /pics/medium-sigils.gif HTTP/1.0"" 304
 ""http://perl.plover.com/local.html""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)""
210.239.93.70 - msdw [22/Aug/2001:01:29:28 -0400]
 ""GET /class/msdw-tokyo/ HTTP/1.0"" 401 469
 ""http://perl.plover.com/class/""
 ""Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)""
151.204.38.119 - - [25/Aug/2001:13:48:01 -0400]
 ""GET /yak/path/hanoi06.gif HTTP/1.0"" 200 239
 ""http://perl.plover.com/yak/path/""
 ""Mozilla/4.77 [en] (WinNT; U)""
    One of the common tasks of system administrators is to search through the log files looking for certain matching records; for example, the last time a certain user visited, or the last time a certain page was fetched. In fact, Perl itself first rose to prominence as a tool for helping system administrators answer exactly these sorts of questions. A typical query will look something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 00:06"|12:06|"208.190.220.160 - - [04/Aug/2001:08:14:29 -0400]
 ""GET /˜mjd/pictures/new.gif HTTP/1.1"" 200 95
 ""http://perl.plover.com/""
 ""Mozilla/5.0 (Macintosh; U; PPC; en-US; rv:0.9.2) Gecko/20010629""
195.3.19.207 - - [04/Aug/2001:13:39:11 -0400]
 ""GET /pics/small-sigils.gif HTTP/1.1"" 200 1586
 ""http://perl.plover.com/""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; DigExt)""
192.94.94.33 - - [07/Aug/2001:12:06:34 -0400]
 ""GET /yak/Identity/slide005.html HTTP/1.0"" 200 821
 ""http://perl.plover.com/yak/Identity/slide004.html""
 ""Mozilla/4.6 [en] (X11; I; SunOS 5.8 sun4u)""
199.93.193.10 - - [13/Aug/2001:13:04:39 -0400]
 ""GET /yak/dirty/miller_glenn_r.jpg HTTP/1.0"" 200 4376
 ""http://perl.plover.com/yak/dirty/slide009.html""
 ""Mozilla/4.77 [en] (X11; U; SunOS 5.6 sun4u)""
216.175.77.248 - - [15/Aug/2001:14:25:20 -0400]
 ""GET /yak/handson/examples/wordsort.pl HTTP/1.0"" 200 125
 ""http://perl.plover.com:80/yak/handson/examples/""
 ""Wget/1.5.3""
194.39.218.254 - - [16/Aug/2001:07:44:02 -0400]
 ""GET /pics/medium-sigils.gif HTTP/1.0"" 304
 ""http://perl.plover.com/local.html""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)""
210.239.93.70 - msdw [22/Aug/2001:01:29:28 -0400]
 ""GET /class/msdw-tokyo/ HTTP/1.0"" 401 469
 ""http://perl.plover.com/class/""
 ""Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)""
151.204.38.119 - - [25/Aug/2001:13:48:01 -0400]
 ""GET /yak/path/hanoi06.gif HTTP/1.0"" 200 239
 ""http://perl.plover.com/yak/path/""
 ""Mozilla/4.77 [en] (WinNT; U)""
    One of the common tasks of system administrators is to search through the log files looking for certain matching records; for example, the last time a certain user visited, or the last time a certain page was fetched. In fact, Perl itself first rose to prominence as a tool for helping system administrators answer exactly these sorts of questions. A typical query will look something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
13:04|13:04|"208.190.220.160 - - [04/Aug/2001:08:14:29 -0400]
 ""GET /˜mjd/pictures/new.gif HTTP/1.1"" 200 95
 ""http://perl.plover.com/""
 ""Mozilla/5.0 (Macintosh; U; PPC; en-US; rv:0.9.2) Gecko/20010629""
195.3.19.207 - - [04/Aug/2001:13:39:11 -0400]
 ""GET /pics/small-sigils.gif HTTP/1.1"" 200 1586
 ""http://perl.plover.com/""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; DigExt)""
192.94.94.33 - - [07/Aug/2001:12:06:34 -0400]
 ""GET /yak/Identity/slide005.html HTTP/1.0"" 200 821
 ""http://perl.plover.com/yak/Identity/slide004.html""
 ""Mozilla/4.6 [en] (X11; I; SunOS 5.8 sun4u)""
199.93.193.10 - - [13/Aug/2001:13:04:39 -0400]
 ""GET /yak/dirty/miller_glenn_r.jpg HTTP/1.0"" 200 4376
 ""http://perl.plover.com/yak/dirty/slide009.html""
 ""Mozilla/4.77 [en] (X11; U; SunOS 5.6 sun4u)""
216.175.77.248 - - [15/Aug/2001:14:25:20 -0400]
 ""GET /yak/handson/examples/wordsort.pl HTTP/1.0"" 200 125
 ""http://perl.plover.com:80/yak/handson/examples/""
 ""Wget/1.5.3""
194.39.218.254 - - [16/Aug/2001:07:44:02 -0400]
 ""GET /pics/medium-sigils.gif HTTP/1.0"" 304
 ""http://perl.plover.com/local.html""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)""
210.239.93.70 - msdw [22/Aug/2001:01:29:28 -0400]
 ""GET /class/msdw-tokyo/ HTTP/1.0"" 401 469
 ""http://perl.plover.com/class/""
 ""Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)""
151.204.38.119 - - [25/Aug/2001:13:48:01 -0400]
 ""GET /yak/path/hanoi06.gif HTTP/1.0"" 200 239
 ""http://perl.plover.com/yak/path/""
 ""Mozilla/4.77 [en] (WinNT; U)""
    One of the common tasks of system administrators is to search through the log files looking for certain matching records; for example, the last time a certain user visited, or the last time a certain page was fetched. In fact, Perl itself first rose to prominence as a tool for helping system administrators answer exactly these sorts of questions. A typical query will look something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
14:25|14:25|"208.190.220.160 - - [04/Aug/2001:08:14:29 -0400]
 ""GET /˜mjd/pictures/new.gif HTTP/1.1"" 200 95
 ""http://perl.plover.com/""
 ""Mozilla/5.0 (Macintosh; U; PPC; en-US; rv:0.9.2) Gecko/20010629""
195.3.19.207 - - [04/Aug/2001:13:39:11 -0400]
 ""GET /pics/small-sigils.gif HTTP/1.1"" 200 1586
 ""http://perl.plover.com/""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; DigExt)""
192.94.94.33 - - [07/Aug/2001:12:06:34 -0400]
 ""GET /yak/Identity/slide005.html HTTP/1.0"" 200 821
 ""http://perl.plover.com/yak/Identity/slide004.html""
 ""Mozilla/4.6 [en] (X11; I; SunOS 5.8 sun4u)""
199.93.193.10 - - [13/Aug/2001:13:04:39 -0400]
 ""GET /yak/dirty/miller_glenn_r.jpg HTTP/1.0"" 200 4376
 ""http://perl.plover.com/yak/dirty/slide009.html""
 ""Mozilla/4.77 [en] (X11; U; SunOS 5.6 sun4u)""
216.175.77.248 - - [15/Aug/2001:14:25:20 -0400]
 ""GET /yak/handson/examples/wordsort.pl HTTP/1.0"" 200 125
 ""http://perl.plover.com:80/yak/handson/examples/""
 ""Wget/1.5.3""
194.39.218.254 - - [16/Aug/2001:07:44:02 -0400]
 ""GET /pics/medium-sigils.gif HTTP/1.0"" 304
 ""http://perl.plover.com/local.html""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)""
210.239.93.70 - msdw [22/Aug/2001:01:29:28 -0400]
 ""GET /class/msdw-tokyo/ HTTP/1.0"" 401 469
 ""http://perl.plover.com/class/""
 ""Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)""
151.204.38.119 - - [25/Aug/2001:13:48:01 -0400]
 ""GET /yak/path/hanoi06.gif HTTP/1.0"" 200 239
 ""http://perl.plover.com/yak/path/""
 ""Mozilla/4.77 [en] (WinNT; U)""
    One of the common tasks of system administrators is to search through the log files looking for certain matching records; for example, the last time a certain user visited, or the last time a certain page was fetched. In fact, Perl itself first rose to prominence as a tool for helping system administrators answer exactly these sorts of questions. A typical query will look something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 07:44"|07:44|"208.190.220.160 - - [04/Aug/2001:08:14:29 -0400]
 ""GET /˜mjd/pictures/new.gif HTTP/1.1"" 200 95
 ""http://perl.plover.com/""
 ""Mozilla/5.0 (Macintosh; U; PPC; en-US; rv:0.9.2) Gecko/20010629""
195.3.19.207 - - [04/Aug/2001:13:39:11 -0400]
 ""GET /pics/small-sigils.gif HTTP/1.1"" 200 1586
 ""http://perl.plover.com/""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; DigExt)""
192.94.94.33 - - [07/Aug/2001:12:06:34 -0400]
 ""GET /yak/Identity/slide005.html HTTP/1.0"" 200 821
 ""http://perl.plover.com/yak/Identity/slide004.html""
 ""Mozilla/4.6 [en] (X11; I; SunOS 5.8 sun4u)""
199.93.193.10 - - [13/Aug/2001:13:04:39 -0400]
 ""GET /yak/dirty/miller_glenn_r.jpg HTTP/1.0"" 200 4376
 ""http://perl.plover.com/yak/dirty/slide009.html""
 ""Mozilla/4.77 [en] (X11; U; SunOS 5.6 sun4u)""
216.175.77.248 - - [15/Aug/2001:14:25:20 -0400]
 ""GET /yak/handson/examples/wordsort.pl HTTP/1.0"" 200 125
 ""http://perl.plover.com:80/yak/handson/examples/""
 ""Wget/1.5.3""
194.39.218.254 - - [16/Aug/2001:07:44:02 -0400]
 ""GET /pics/medium-sigils.gif HTTP/1.0"" 304
 ""http://perl.plover.com/local.html""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)""
210.239.93.70 - msdw [22/Aug/2001:01:29:28 -0400]
 ""GET /class/msdw-tokyo/ HTTP/1.0"" 401 469
 ""http://perl.plover.com/class/""
 ""Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)""
151.204.38.119 - - [25/Aug/2001:13:48:01 -0400]
 ""GET /yak/path/hanoi06.gif HTTP/1.0"" 200 239
 ""http://perl.plover.com/yak/path/""
 ""Mozilla/4.77 [en] (WinNT; U)""
    One of the common tasks of system administrators is to search through the log files looking for certain matching records; for example, the last time a certain user visited, or the last time a certain page was fetched. In fact, Perl itself first rose to prominence as a tool for helping system administrators answer exactly these sorts of questions. A typical query will look something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 01:29"|01:29|"208.190.220.160 - - [04/Aug/2001:08:14:29 -0400]
 ""GET /˜mjd/pictures/new.gif HTTP/1.1"" 200 95
 ""http://perl.plover.com/""
 ""Mozilla/5.0 (Macintosh; U; PPC; en-US; rv:0.9.2) Gecko/20010629""
195.3.19.207 - - [04/Aug/2001:13:39:11 -0400]
 ""GET /pics/small-sigils.gif HTTP/1.1"" 200 1586
 ""http://perl.plover.com/""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; DigExt)""
192.94.94.33 - - [07/Aug/2001:12:06:34 -0400]
 ""GET /yak/Identity/slide005.html HTTP/1.0"" 200 821
 ""http://perl.plover.com/yak/Identity/slide004.html""
 ""Mozilla/4.6 [en] (X11; I; SunOS 5.8 sun4u)""
199.93.193.10 - - [13/Aug/2001:13:04:39 -0400]
 ""GET /yak/dirty/miller_glenn_r.jpg HTTP/1.0"" 200 4376
 ""http://perl.plover.com/yak/dirty/slide009.html""
 ""Mozilla/4.77 [en] (X11; U; SunOS 5.6 sun4u)""
216.175.77.248 - - [15/Aug/2001:14:25:20 -0400]
 ""GET /yak/handson/examples/wordsort.pl HTTP/1.0"" 200 125
 ""http://perl.plover.com:80/yak/handson/examples/""
 ""Wget/1.5.3""
194.39.218.254 - - [16/Aug/2001:07:44:02 -0400]
 ""GET /pics/medium-sigils.gif HTTP/1.0"" 304
 ""http://perl.plover.com/local.html""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)""
210.239.93.70 - msdw [22/Aug/2001:01:29:28 -0400]
 ""GET /class/msdw-tokyo/ HTTP/1.0"" 401 469
 ""http://perl.plover.com/class/""
 ""Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)""
151.204.38.119 - - [25/Aug/2001:13:48:01 -0400]
 ""GET /yak/path/hanoi06.gif HTTP/1.0"" 200 239
 ""http://perl.plover.com/yak/path/""
 ""Mozilla/4.77 [en] (WinNT; U)""
    One of the common tasks of system administrators is to search through the log files looking for certain matching records; for example, the last time a certain user visited, or the last time a certain page was fetched. In fact, Perl itself first rose to prominence as a tool for helping system administrators answer exactly these sorts of questions. A typical query will look something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
13:48|13:48|"208.190.220.160 - - [04/Aug/2001:08:14:29 -0400]
 ""GET /˜mjd/pictures/new.gif HTTP/1.1"" 200 95
 ""http://perl.plover.com/""
 ""Mozilla/5.0 (Macintosh; U; PPC; en-US; rv:0.9.2) Gecko/20010629""
195.3.19.207 - - [04/Aug/2001:13:39:11 -0400]
 ""GET /pics/small-sigils.gif HTTP/1.1"" 200 1586
 ""http://perl.plover.com/""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; DigExt)""
192.94.94.33 - - [07/Aug/2001:12:06:34 -0400]
 ""GET /yak/Identity/slide005.html HTTP/1.0"" 200 821
 ""http://perl.plover.com/yak/Identity/slide004.html""
 ""Mozilla/4.6 [en] (X11; I; SunOS 5.8 sun4u)""
199.93.193.10 - - [13/Aug/2001:13:04:39 -0400]
 ""GET /yak/dirty/miller_glenn_r.jpg HTTP/1.0"" 200 4376
 ""http://perl.plover.com/yak/dirty/slide009.html""
 ""Mozilla/4.77 [en] (X11; U; SunOS 5.6 sun4u)""
216.175.77.248 - - [15/Aug/2001:14:25:20 -0400]
 ""GET /yak/handson/examples/wordsort.pl HTTP/1.0"" 200 125
 ""http://perl.plover.com:80/yak/handson/examples/""
 ""Wget/1.5.3""
194.39.218.254 - - [16/Aug/2001:07:44:02 -0400]
 ""GET /pics/medium-sigils.gif HTTP/1.0"" 304
 ""http://perl.plover.com/local.html""
 ""Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)""
210.239.93.70 - msdw [22/Aug/2001:01:29:28 -0400]
 ""GET /class/msdw-tokyo/ HTTP/1.0"" 401 469
 ""http://perl.plover.com/class/""
 ""Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)""
151.204.38.119 - - [25/Aug/2001:13:48:01 -0400]
 ""GET /yak/path/hanoi06.gif HTTP/1.0"" 200 239
 ""http://perl.plover.com/yak/path/""
 ""Mozilla/4.77 [en] (WinNT; U)""
    One of the common tasks of system administrators is to search through the log files looking for certain matching records; for example, the last time a certain user visited, or the last time a certain page was fetched. In fact, Perl itself first rose to prominence as a tool for helping system administrators answer exactly these sorts of questions. A typical query will look something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
00:00|0|"Similarly, $BRANCH will record where in the function we left off to make a recursive call. This is another thing Perl normally tracks internally. Initially, it’s 0, indicating that we want to start at the top of the body. When we simulate a return from a recursive call, it will be 1 or 2, telling us to pick up later on in the body where we left off:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 01:00"|1|"Similarly, $BRANCH will record where in the function we left off to make a recursive call. This is another thing Perl normally tracks internally. Initially, it’s 0, indicating that we want to start at the top of the body. When we simulate a return from a recursive call, it will be 1 or 2, telling us to pick up later on in the body where we left off:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 02:00"|2|"Similarly, $BRANCH will record where in the function we left off to make a recursive call. This is another thing Perl normally tracks internally. Initially, it’s 0, indicating that we want to start at the top of the body. When we simulate a return from a recursive call, it will be 1 or 2, telling us to pick up later on in the body where we left off:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 01:00"|1|"1 Doubling 1
2 Doubling 1
Doubling 2
4 Doubling 1
Doubling 2
Doubling 4
8 Doubling 1
Doubling 2
Doubling 4
Doubling 8
16 Doubling 1
...
    The show() method starts by printing the head of the stream, which is 1. Then it goes to get the tail, using the tail() method:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 01:00"|1|"sub tail {
  my ($s) = @_;
  if (is_promise($s->[1])) {
    return $s->[1]->();
  }
  $s->[1];
}
    Since the tail is a promise, this forces the promise, which calls transform {...} $powers_of_2. transform() gets the head of $powers_of_2, which is 1, and doubles it, yielding a stream whose head is 2 and whose tail is a promise to double the rest of the elements of $powers_of_2. This stream is the tail of $powers_of_2, and show() prints its head, which is 2."|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 02:00"|2|"sub tail {
  my ($s) = @_;
  if (is_promise($s->[1])) {
    return $s->[1]->();
  }
  $s->[1];
}
    Since the tail is a promise, this forces the promise, which calls transform {...} $powers_of_2. transform() gets the head of $powers_of_2, which is 1, and doubles it, yielding a stream whose head is 2 and whose tail is a promise to double the rest of the elements of $powers_of_2. This stream is the tail of $powers_of_2, and show() prints its head, which is 2."|"Higher-Order Perl"|"Mark Jason Dominus"
14:18|14:18|"706430 29/Jan/2003:14:18:30 29/Jan/2003:14:18:32 <boehm5@email.com> 1 1 0 0
    This records the message ID number, the times at which the message was inserted into and removed from the queue, the sender, the total number of delivery attempts, and the number of attempts that were respectively successful, permanent failures, and temporary failures."|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 00:10"|12:10|"...
707045 28/Jan/2003:12:10:03 28/Jan/2003:12:10:03 <Paulmc@371.net> 1 1 0 0
707292 28/Jan/2003:12:10:03 28/Jan/2003:12:10:06 <Paulmc@371.net> 1 1 0 0
707046 28/Jan/2003:12:10:06 28/Jan/2003:12:10:07 <Paulmc@371.net> 4 3 1 0
707293 28/Jan/2003:12:10:07 28/Jan/2003:12:10:07 <guido@odiug.zope.com> 1 1 0 0
707670 28/Jan/2003:12:10:06 28/Jan/2003:12:10:08 <spam-return-133409-@plover.com-@[]> 2 2 0 0
707045 28/Jan/2003:12:10:07 28/Jan/2003:12:10:11 <guido@odiug.zope.com> 1 1 0 0
707294 28/Jan/2003:12:10:11 28/Jan/2003:12:10:11 <guido@odiug.zope.com> 1 1 0 0
707047 28/Jan/2003:12:10:22 28/Jan/2003:12:10:23 <ezmlm-return-10817-mjd-ezmlm=plover.com@list.cr.yp.to> 1 1 0 0
707048 28/Jan/2003:12:11:02 28/Jan/2003:12:11:02 <perl5-porters-return-71265-mjd-p5p2=plover.com@perl.org> 1 1 0 0
707503 24/Jan/2003:11:29:49 28/Jan/2003:12:11:35 <perl-qotw-discuss-return-1200-@plover.com-@[]> 388 322 2 64
707049 28/Jan/2003:12:11:35 28/Jan/2003:12:11:45 <> 1 1 0 0
707295 28/Jan/2003:12:11:41 28/Jan/2003:12:11:46 <perl6-internals-return-14784-mjd-perl6-internals=plover.com@perl.org> 1 1 0 0
...
    That was all a lot of work, and at this point it’s probably not clear why the stream method has any advantage over the more usual method of reading the file one record at a time, tracking the same data structures, and printing output records as we go, something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 00:11"|12:11|"...
707045 28/Jan/2003:12:10:03 28/Jan/2003:12:10:03 <Paulmc@371.net> 1 1 0 0
707292 28/Jan/2003:12:10:03 28/Jan/2003:12:10:06 <Paulmc@371.net> 1 1 0 0
707046 28/Jan/2003:12:10:06 28/Jan/2003:12:10:07 <Paulmc@371.net> 4 3 1 0
707293 28/Jan/2003:12:10:07 28/Jan/2003:12:10:07 <guido@odiug.zope.com> 1 1 0 0
707670 28/Jan/2003:12:10:06 28/Jan/2003:12:10:08 <spam-return-133409-@plover.com-@[]> 2 2 0 0
707045 28/Jan/2003:12:10:07 28/Jan/2003:12:10:11 <guido@odiug.zope.com> 1 1 0 0
707294 28/Jan/2003:12:10:11 28/Jan/2003:12:10:11 <guido@odiug.zope.com> 1 1 0 0
707047 28/Jan/2003:12:10:22 28/Jan/2003:12:10:23 <ezmlm-return-10817-mjd-ezmlm=plover.com@list.cr.yp.to> 1 1 0 0
707048 28/Jan/2003:12:11:02 28/Jan/2003:12:11:02 <perl5-porters-return-71265-mjd-p5p2=plover.com@perl.org> 1 1 0 0
707503 24/Jan/2003:11:29:49 28/Jan/2003:12:11:35 <perl-qotw-discuss-return-1200-@plover.com-@[]> 388 322 2 64
707049 28/Jan/2003:12:11:35 28/Jan/2003:12:11:45 <> 1 1 0 0
707295 28/Jan/2003:12:11:41 28/Jan/2003:12:11:46 <perl6-internals-return-14784-mjd-perl6-internals=plover.com@perl.org> 1 1 0 0
...
    That was all a lot of work, and at this point it’s probably not clear why the stream method has any advantage over the more usual method of reading the file one record at a time, tracking the same data structures, and printing output records as we go, something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 11:29"|11:29|"...
707045 28/Jan/2003:12:10:03 28/Jan/2003:12:10:03 <Paulmc@371.net> 1 1 0 0
707292 28/Jan/2003:12:10:03 28/Jan/2003:12:10:06 <Paulmc@371.net> 1 1 0 0
707046 28/Jan/2003:12:10:06 28/Jan/2003:12:10:07 <Paulmc@371.net> 4 3 1 0
707293 28/Jan/2003:12:10:07 28/Jan/2003:12:10:07 <guido@odiug.zope.com> 1 1 0 0
707670 28/Jan/2003:12:10:06 28/Jan/2003:12:10:08 <spam-return-133409-@plover.com-@[]> 2 2 0 0
707045 28/Jan/2003:12:10:07 28/Jan/2003:12:10:11 <guido@odiug.zope.com> 1 1 0 0
707294 28/Jan/2003:12:10:11 28/Jan/2003:12:10:11 <guido@odiug.zope.com> 1 1 0 0
707047 28/Jan/2003:12:10:22 28/Jan/2003:12:10:23 <ezmlm-return-10817-mjd-ezmlm=plover.com@list.cr.yp.to> 1 1 0 0
707048 28/Jan/2003:12:11:02 28/Jan/2003:12:11:02 <perl5-porters-return-71265-mjd-p5p2=plover.com@perl.org> 1 1 0 0
707503 24/Jan/2003:11:29:49 28/Jan/2003:12:11:35 <perl-qotw-discuss-return-1200-@plover.com-@[]> 388 322 2 64
707049 28/Jan/2003:12:11:35 28/Jan/2003:12:11:45 <> 1 1 0 0
707295 28/Jan/2003:12:11:41 28/Jan/2003:12:11:46 <perl6-internals-return-14784-mjd-perl6-internals=plover.com@perl.org> 1 1 0 0
...
    That was all a lot of work, and at this point it’s probably not clear why the stream method has any advantage over the more usual method of reading the file one record at a time, tracking the same data structures, and printing output records as we go, something like this:"|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 00:11"|12:11|"A bigger advantage of the stream approach comes if we want to reorder the output records. As written, the output stream contains message records in the order in which the messages were removed from the queue; that is, the output is sorted by the third field. Suppose we want to see the messages sorted by the second field, the time at which each message was first sent. In the preceding example output, notice the line for message 707503. Although the time at which it was removed from the queue (12:11:35 on 28 January) is in line with the surrounding messages, the time it was sent (11:29:49 on 24 January) is quite different. Most messages are delivered almost immediately, but this one took more than four days to complete. It represents a message that was sent to a mailing list with 324 subscribers. Two of the subscribers had full mailboxes, causing their mail systems to temporarily refuse new message for these subscribers. After four days, the mail system finally gave up and removed the message from the queue. Similarly, message 707670 arrived a second earlier but was delivered (to India) a second later than message 707293, which was delivered (locally) immediately after it arrived."|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 11:29"|11:29|"A bigger advantage of the stream approach comes if we want to reorder the output records. As written, the output stream contains message records in the order in which the messages were removed from the queue; that is, the output is sorted by the third field. Suppose we want to see the messages sorted by the second field, the time at which each message was first sent. In the preceding example output, notice the line for message 707503. Although the time at which it was removed from the queue (12:11:35 on 28 January) is in line with the surrounding messages, the time it was sent (11:29:49 on 24 January) is quite different. Most messages are delivered almost immediately, but this one took more than four days to complete. It represents a message that was sent to a mailing list with 324 subscribers. Two of the subscribers had full mailboxes, causing their mail systems to temporarily refuse new message for these subscribers. After four days, the mail system finally gave up and removed the message from the queue. Similarly, message 707670 arrived a second earlier but was delivered (to India) a second later than message 707293, which was delivered (locally) immediately after it arrived."|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 11:29"|11:29|"...
707503 24/Jan/2003:11:29:49 28/Jan/2003:12:11:35 <perl-qotw-discuss-return-1200-@plover.com-@[]> 388 322 2 64

... (many records omitted) ...

707045 28/Jan/2003:12:10:03 28/Jan/2003:12:10:03 <Paulmc@371.net> 1 1 0 0
707292 28/Jan/2003:12:10:03 28/Jan/2003:12:10:06 <Paulmc@371.net> 1 1 0 0
707046 28/Jan/2003:12:10:06 28/Jan/2003:12:10:07 <Paulmc@371.net> 4 3 1 0
707670 28/Jan/2003:12:10:06 28/Jan/2003:12:10:08 <spam-return-133409-@plover.com-@[]> 2 2 0 0
707293 28/Jan/2003:12:10:07 28/Jan/2003:12:10:07 <guido@odiug.zope.com> 1 1 0 0
707045 28/Jan/2003:12:10:07 28/Jan/2003:12:10:11 <guido@odiug.zope.com> 1 1 0 0
...
    Even on a finite segment of the log file, cutsorting offers advantages over a regular sort. To use regular sort, the program must first read the entire log file into memory. With cutsorting, the program can begin producing output after only $QUEUE_LIFETIME days worth of records have been read in."|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 00:11"|12:11|"...
707503 24/Jan/2003:11:29:49 28/Jan/2003:12:11:35 <perl-qotw-discuss-return-1200-@plover.com-@[]> 388 322 2 64

... (many records omitted) ...

707045 28/Jan/2003:12:10:03 28/Jan/2003:12:10:03 <Paulmc@371.net> 1 1 0 0
707292 28/Jan/2003:12:10:03 28/Jan/2003:12:10:06 <Paulmc@371.net> 1 1 0 0
707046 28/Jan/2003:12:10:06 28/Jan/2003:12:10:07 <Paulmc@371.net> 4 3 1 0
707670 28/Jan/2003:12:10:06 28/Jan/2003:12:10:08 <spam-return-133409-@plover.com-@[]> 2 2 0 0
707293 28/Jan/2003:12:10:07 28/Jan/2003:12:10:07 <guido@odiug.zope.com> 1 1 0 0
707045 28/Jan/2003:12:10:07 28/Jan/2003:12:10:11 <guido@odiug.zope.com> 1 1 0 0
...
    Even on a finite segment of the log file, cutsorting offers advantages over a regular sort. To use regular sort, the program must first read the entire log file into memory. With cutsorting, the program can begin producing output after only $QUEUE_LIFETIME days worth of records have been read in."|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 00:10"|12:10|"...
707503 24/Jan/2003:11:29:49 28/Jan/2003:12:11:35 <perl-qotw-discuss-return-1200-@plover.com-@[]> 388 322 2 64

... (many records omitted) ...

707045 28/Jan/2003:12:10:03 28/Jan/2003:12:10:03 <Paulmc@371.net> 1 1 0 0
707292 28/Jan/2003:12:10:03 28/Jan/2003:12:10:06 <Paulmc@371.net> 1 1 0 0
707046 28/Jan/2003:12:10:06 28/Jan/2003:12:10:07 <Paulmc@371.net> 4 3 1 0
707670 28/Jan/2003:12:10:06 28/Jan/2003:12:10:08 <spam-return-133409-@plover.com-@[]> 2 2 0 0
707293 28/Jan/2003:12:10:07 28/Jan/2003:12:10:07 <guido@odiug.zope.com> 1 1 0 0
707045 28/Jan/2003:12:10:07 28/Jan/2003:12:10:11 <guido@odiug.zope.com> 1 1 0 0
...
    Even on a finite segment of the log file, cutsorting offers advantages over a regular sort. To use regular sort, the program must first read the entire log file into memory. With cutsorting, the program can begin producing output after only $QUEUE_LIFETIME days worth of records have been read in."|"Higher-Order Perl"|"Mark Jason Dominus"
"ap 02:19"|2.19|"Delivered-To: mjd-filter-deliver2@plover.com
Received: from localhost [127.0.0.1] by plover.com
        with SpamAssassin (2.55 1.174.2.19-2003-05-19-exp);
        Mon, 11 Aug 2003 16:22:12 -0400
From: ""Doris Bower"" <yij447mrx@yahoo.com.hk>
To: webmaster@plover.com
Subject: LoseWeight Now with Pphentermine,Aadipex,Bontriil,PrescribedOnline,shipped
  to Your Door fltynzlfoybv kie
    There are five fields here; the second one, with the Received tag, consists of three physical lines. Lines that begin with whitespace are continuations of the previous line. So if the records we want are email header fields, the terminator pattern is /\n(?!\s)/. That is, it’s a newline that is not followed by a whitespace."|"Higher-Order Perl"|"Mark Jason Dominus"
16:22|16:22|"Delivered-To: mjd-filter-deliver2@plover.com
Received: from localhost [127.0.0.1] by plover.com
        with SpamAssassin (2.55 1.174.2.19-2003-05-19-exp);
        Mon, 11 Aug 2003 16:22:12 -0400
From: ""Doris Bower"" <yij447mrx@yahoo.com.hk>
To: webmaster@plover.com
Subject: LoseWeight Now with Pphentermine,Aadipex,Bontriil,PrescribedOnline,shipped
  to Your Door fltynzlfoybv kie
    There are five fields here; the second one, with the Received tag, consists of three physical lines. Lines that begin with whitespace are continuations of the previous line. So if the records we want are email header fields, the terminator pattern is /\n(?!\s)/. That is, it’s a newline that is not followed by a whitespace."|"Higher-Order Perl"|"Mark Jason Dominus"

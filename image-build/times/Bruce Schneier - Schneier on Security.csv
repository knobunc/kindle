20:39|"21 of 21"|"It seems like every time someone tests airport security, airport security fails. In tests between November 2001 and February 2002, screeners missed 70% of knives, 30% of guns, and 60% of (fake) bombs. And recently, testers were able to smuggle bomb-making parts through airport security in 21 of 21 attempts. It makes you wonder why we’re all putting our laptops in a separate bin and taking off our shoes. (Although we should all be glad that Richard Reid wasn’t the “underwear bomber.”)"|"Schneier on Security"|"Bruce Schneier"
23:30|"11:30 PM"|"I landed in Los Angeles at 11:30 PM, and it took me another hour to get to my hotel. The city was booked, and I had been lucky to get a reservation where I did. When I checked in, the clerk insisted on making a photocopy of my driver’s license. I tried fighting, but it was no use. I needed the hotel room. There was nowhere else I could go. The night clerk didn’t really care if he rented the room to me or not. He had rules to follow, and he was going to follow them."|"Schneier on Security"|"Bruce Schneier"
"ap > 09:00"|"just after 9"|"Still, most Americans have been and continue to be opposed to a national ID card. Even just after 9/11, polls showed a bare majority (51%) in favor—and that quickly became a minority opinion again. As such, both political parties came out against the card, which meant that the only way it could become law was to sneak it through."|"Schneier on Security"|"Bruce Schneier"
16:00|"4:00 p.m."|"On August 14 at 4:00 p.m., the power went out in New York City and across much of the Northeast. As many as 50 million people were without power, some for days. Although there were some initial rumors of terrorism—only a few, thankfully—it was an accident."|"Schneier on Security"|"Bruce Schneier"
14:14|14:14|"This is where I think Blaster may have been involved. The report gives a specific timeline for the failures. At 14:14 EDT, the “alarm and logging software” at FirstEnergy’s control room failed. This alarm software “provided audible and visual indications when a significant piece of equipment changed from an acceptable to problematic condition.” Of course, no one knew that it failed."|"Schneier on Security"|"Bruce Schneier"
14:41|14:41|"Six minutes later, “several” remote control consoles failed. At 14:41, the primary server computer that hosted the alarm function failed. Its functions were passed to a backup computer, which failed at 14:54."|"Schneier on Security"|"Bruce Schneier"
14:54|14:54|"Six minutes later, “several” remote control consoles failed. At 14:41, the primary server computer that hosted the alarm function failed. Its functions were passed to a backup computer, which failed at 14:54."|"Schneier on Security"|"Bruce Schneier"
"> 14:14"|"After 14:14"|"This massive computer failure was critical to the cascading power failure. The report continues: “Power system operators rely heavily on audible and on-screen alarms, plus alarm logs, to reveal any significant changes in their system’s conditions. After 14:14 EDT on August 14, FE’s operators were working under a significant handicap without these tools. However, they were in further jeopardy because they did not know that they were operating without alarms, so that they did not realize that system conditions were changing.”"|"Schneier on Security"|"Bruce Schneier"
"ap 00:15"|12:15|"Other computer glitches are mentioned in the report. At the Midwest Independent Transmission System Operator, a regional agency that oversees power distribution, there’s something called a “state estimator.” It’s a computer used to determine whether the power grid is in trouble. This computer also failed, at 12:15. According to the report, a technician tried to repair it and forgot to turn it back on when he went to lunch."|"Schneier on Security"|"Bruce Schneier"
"ap 01:40"|"1 hour and 40 minutes"|"According to research by Stuart Staniford, Blaster was a random-start sequential-scanner, and scanned at about 11 IPs/second. A given scanner would cover a Class B network in about 1 hour and 40 minutes. The FirstEnergy computer-failure times are fairly consistent with a series of computers with addresses dotted around a class B being compromised by a scan of the class B, probably by an infected instance on the same network. (Note that it was not necessary for the FirstEnergy network to be on the Internet; Blaster infected many internal networks.)"|"Schneier on Security"|"Bruce Schneier"
14:14|14:14|"The coincidence of the timing is too obvious to ignore. At 14:14 EDT, the Blaster Worm was dropping systems all across North America. The report doesn’t explain why so many computers—both primary and backup systems—at FirstEnergy were failing at around the same time, but Blaster is certainly a reasonable suspect."|"Schneier on Security"|"Bruce Schneier"
"ap 02:00"|two|"What all of this means is that any bird flu pandemic will very likely fall outside the corporate disaster-planning sweet spot. We’re just guessing on its infectiousness, of course, but (despite the alarmism from two and three years ago), likely scenarios are either moderate to severe absenteeism because people are staying home for a few weeks—any organization ought to be able to deal with that—or a major disaster of proportions that dwarf the concerns of any organization. There’s not much in between."|"Schneier on Security"|"Bruce Schneier"
"ap 11:00"|11|"• Storm is patient. A worm that attacks all the time is much easier to detect; a worm that attacks and then shuts off for a while hides much more easily.• Storm is designed like an ant colony, with separation of duties. Only a small fraction of infected hosts spread the worm. A much smaller fraction are C2: command-and-control servers. The rest stand by to receive orders. By only allowing a small number of hosts to propagate the virus and act as command-and-control servers, Storm is resilient against attack. Even if those hosts shut down, the network remains largely intact, and other hosts can take over those duties.• Storm doesn’t cause any damage, or noticeable performance impact, to the hosts. Like a parasite, it needs its host to be intact and healthy for its own survival. This makes it harder to detect, because users and network administrators won’t notice any abnormal behavior most of the time.• Rather than having all hosts communicate to a central server or set of servers, Storm uses a peer-to-peer network for C2. This makes the Storm botnet much harder to disable. The most common way to disable a botnet is to shut down the centralized control point. Storm doesn’t have a centralized control point, and thus can’t be shut down that way.This technique has other advantages, too. Companies that monitor net activity can detect traffic anomalies with a centralized C2 point, but distributed C2 doesn’t show up as a spike. Communications are much harder to detect.One standard method of tracking root C2 servers is to put an infected host through a memory debugger and figure out where its orders are coming from. This won’t work with Storm: An infected host may only know about a small fraction of infected hosts—25 to 30 at a time—and those hosts are an unknown number of hops away from the primary C2 servers.And even if a C2 node is taken down, the system doesn’t suffer. Like a hydra with many heads, Storm’s C2 structure is distributed.• Not only are the C2 servers distributed, but they also hide behind a constantly changing DNS technique called “fast flux.” So even if a compromised host is isolated and debugged, and a C2 server identified through the cloud, by that time it may no longer be active.• Storm’s payload—the code it uses to spread—morphs every 30 minutes or so, making typical AV (antivirus) and IDS techniques less effective.• Storm’s delivery mechanism also changes regularly. Storm started out as PDF spam, then its programmers started using e-cards and YouTube invites—anything to entice users to click on a phony link. Storm also started posting blog-comment spam, again trying to trick viewers into clicking infected links. While these sorts of things are pretty standard worm tactics, it does highlight how Storm is constantly shifting at all levels.• The Storm e-mail also changes all the time, leveraging social engineering techniques. There are always new subject lines and new enticing text: “A killer at 11, he’s free at 21 and …,” “football tracking program” on NFL opening weekend, and major storm and hurricane warnings. Storm’s programmers are very good at preying on human nature.• Last month, Storm began attacking anti-spam sites focused on identifying it—spamhaus.org, 419eater, and so on—and the personal website of Joe Stewart, who published an analysis of Storm. I am reminded of a basic theory of war: Take out your enemy’s reconnaissance. Or a basic theory of urban gangs and some governments: Make sure others know not to mess with you.Not that we really have any idea how to mess with Storm. Storm has been around for almost a year, and the antivirus companies are pretty much powerless to do anything about it. Inoculating infected machines individually is simply not going to work, and I can’t imagine forcing ISPs to quarantine infected hosts. A quarantine wouldn’t work in any case: Storm’s creators could easily design another worm—and we know that users can’t keep themselves from clicking on enticing attachments and links."|"Schneier on Security"|"Bruce Schneier"
21:00|21|"• Storm is patient. A worm that attacks all the time is much easier to detect; a worm that attacks and then shuts off for a while hides much more easily.• Storm is designed like an ant colony, with separation of duties. Only a small fraction of infected hosts spread the worm. A much smaller fraction are C2: command-and-control servers. The rest stand by to receive orders. By only allowing a small number of hosts to propagate the virus and act as command-and-control servers, Storm is resilient against attack. Even if those hosts shut down, the network remains largely intact, and other hosts can take over those duties.• Storm doesn’t cause any damage, or noticeable performance impact, to the hosts. Like a parasite, it needs its host to be intact and healthy for its own survival. This makes it harder to detect, because users and network administrators won’t notice any abnormal behavior most of the time.• Rather than having all hosts communicate to a central server or set of servers, Storm uses a peer-to-peer network for C2. This makes the Storm botnet much harder to disable. The most common way to disable a botnet is to shut down the centralized control point. Storm doesn’t have a centralized control point, and thus can’t be shut down that way.This technique has other advantages, too. Companies that monitor net activity can detect traffic anomalies with a centralized C2 point, but distributed C2 doesn’t show up as a spike. Communications are much harder to detect.One standard method of tracking root C2 servers is to put an infected host through a memory debugger and figure out where its orders are coming from. This won’t work with Storm: An infected host may only know about a small fraction of infected hosts—25 to 30 at a time—and those hosts are an unknown number of hops away from the primary C2 servers.And even if a C2 node is taken down, the system doesn’t suffer. Like a hydra with many heads, Storm’s C2 structure is distributed.• Not only are the C2 servers distributed, but they also hide behind a constantly changing DNS technique called “fast flux.” So even if a compromised host is isolated and debugged, and a C2 server identified through the cloud, by that time it may no longer be active.• Storm’s payload—the code it uses to spread—morphs every 30 minutes or so, making typical AV (antivirus) and IDS techniques less effective.• Storm’s delivery mechanism also changes regularly. Storm started out as PDF spam, then its programmers started using e-cards and YouTube invites—anything to entice users to click on a phony link. Storm also started posting blog-comment spam, again trying to trick viewers into clicking infected links. While these sorts of things are pretty standard worm tactics, it does highlight how Storm is constantly shifting at all levels.• The Storm e-mail also changes all the time, leveraging social engineering techniques. There are always new subject lines and new enticing text: “A killer at 11, he’s free at 21 and …,” “football tracking program” on NFL opening weekend, and major storm and hurricane warnings. Storm’s programmers are very good at preying on human nature.• Last month, Storm began attacking anti-spam sites focused on identifying it—spamhaus.org, 419eater, and so on—and the personal website of Joe Stewart, who published an analysis of Storm. I am reminded of a basic theory of war: Take out your enemy’s reconnaissance. Or a basic theory of urban gangs and some governments: Make sure others know not to mess with you.Not that we really have any idea how to mess with Storm. Storm has been around for almost a year, and the antivirus companies are pretty much powerless to do anything about it. Inoculating infected machines individually is simply not going to work, and I can’t imagine forcing ISPs to quarantine infected hosts. A quarantine wouldn’t work in any case: Storm’s creators could easily design another worm—and we know that users can’t keep themselves from clicking on enticing attachments and links."|"Schneier on Security"|"Bruce Schneier"

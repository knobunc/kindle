"ap 02:21"|2.21|"Listing 2.21. search/search.go: lines 31–35
      
      31         // Retrieve a matcher for the search.
32         matcher, exists := matchers[feed.Type]

33         if !exists {
34             matcher = matchers[""default""]
35         }
      
      We haven’t talked about how this map gets its values yet. You’ll see later on how the program initializes itself and populates
         this map. On line 32 we check the map for a key that matches the feed type. When looking up a key in a map, you have two options:
         you can assign a single variable or two variables for the lookup call. The first variable is always the value returned for
         the key lookup, and the second value, if specified, is a Boolean flag that reports whether the key exists or not. When a key
         doesn’t exist, the map will return the zero value for the type of value being stored in the map. When the key does exist,
         the map will return a copy of the value for that key."|"Go in Action"|"William Kennedy"
"ap 02:29"|2.29|"Listing 2.29. feed.go: lines 17–36
      
      17 // RetrieveFeeds reads and unmarshals the feed data file.
18 func RetrieveFeeds() ([]*Feed, error) {
19    // Open the file.
20    file, err := os.Open(dataFile)
21    if err != nil {
22        return nil, err
23    }
24
25    // Schedule the file to be closed once
26    // the function returns.
27    defer file.Close()
28
29    // Decode the file into a slice of pointers
30    // to Feed values.
31    var feeds []*Feed
32    err = json.NewDecoder(file).Decode(&feeds)
33
34    // We don't need to check for errors, the caller can do this.
35    return feeds, err
36 }
      
      Let’s start with the declaration of the function on line 18. The function takes no parameters and returns two values. The
         first return value is a slice of pointers to Feed type values. The second return value is an error value that reports back if the function call was successful. As you’ll continue
         to see, returning error values is common practice in this code example and throughout the standard library."|"Go in Action"|"William Kennedy"
"ap 04:41"|4.41|"Listing 4.41. Iterating over a slice using a traditional for loop
      
      // Create a slice of integers.
// Contains a length and capacity of 4 elements.
slice := []int{10, 20, 30, 40}

// Iterate over each element starting at element 3.
for index := 2; index < len(slice); index++ {
    fmt.Printf(""Index: %d  Value: %d\n"", index, slice[index])
}

Output:
Index: 2  Value: 30
Index: 3  Value: 40
      
      There are two special built-in functions called len and cap that work with arrays, slices, and channels. For slices, the len function returns the length of the slice, and the cap function returns the capacity. In listing 4.41, we used the len function to determine when to stop iterating over the slice."|"Go in Action"|"William Kennedy"
"ap 05:28"|5.28|"Listing 5.28. golang.org/src/time/time.go: lines 39–55
      
      39 type Time struct {
40     // sec gives the number of seconds elapsed since
41     // January 1, year 1 00:00:00 UTC.
42     sec int64
43
44     // nsec specifies a non-negative nanosecond
45     // offset within the second named by Seconds.
46     // It must be in the range [0, 999999999].
47     nsec int32
48
49     // loc specifies the Location that should be used to
50     // determine the minute, hour, month, day, and year
51     // that correspond to this Time.
52     // Only the zero Time has a nil Location.
53     // In that case it is interpreted to mean UTC.
54     loc *Location
55 }
      
      The Time struct in listing 5.28 comes from the time package. When you think about time, you realize that any given point in time is not something that can change. This is exactly
         how the standard library implements the Time type. Let’s look at the Now function that creates values of type Time."|"Go in Action"|"William Kennedy"
00:00|00:00|"Listing 5.28. golang.org/src/time/time.go: lines 39–55
      
      39 type Time struct {
40     // sec gives the number of seconds elapsed since
41     // January 1, year 1 00:00:00 UTC.
42     sec int64
43
44     // nsec specifies a non-negative nanosecond
45     // offset within the second named by Seconds.
46     // It must be in the range [0, 999999999].
47     nsec int32
48
49     // loc specifies the Location that should be used to
50     // determine the minute, hour, month, day, and year
51     // that correspond to this Time.
52     // Only the zero Time has a nil Location.
53     // In that case it is interpreted to mean UTC.
54     loc *Location
55 }
      
      The Time struct in listing 5.28 comes from the time package. When you think about time, you realize that any given point in time is not something that can change. This is exactly
         how the standard library implements the Time type. Let’s look at the Now function that creates values of type Time."|"Go in Action"|"William Kennedy"
"ap 06:15"|6.15|"Listing 6.15. listing15.go
      
      01 // This sample program demonstrates how to use the atomic
02 // package functions Store and Load to provide safe access
03 // to numeric types.
04 package main
05
06 import (
07     ""fmt""
08     ""sync""
09     ""sync/atomic""
10     ""time""
11 )
12
13 var (
14     // shutdown is a flag to alert running goroutines to shutdown.
15     shutdown int64
16
17     // wg is used to wait for the program to finish.
18     wg sync.WaitGroup
19 )
20
21 // main is the entry point for all Go programs.
22 func main() {
23     // Add a count of two, one for each goroutine.
24     wg.Add(2)
25
26     // Create two goroutines.
27     go doWork(""A"")
28     go doWork(""B"")
29
30     // Give the goroutines time to run.
31     time.Sleep(1 * time.Second)
32
33     // Safely flag it is time to shutdown.
34     fmt.Println(""Shutdown Now"")
35     atomic.StoreInt64(&shutdown, 1)
36
37     // Wait for the goroutines to finish.
38     wg.Wait()
39 }
40
41 // doWork simulates a goroutine performing work and
42 // checking the Shutdown flag to terminate early.
43 func doWork(name string) {
44     // Schedule the call to Done to tell main we are done.

45     defer wg.Done()
46
47     for {
48         fmt.Printf(""Doing %s Work\n"", name)
49         time.Sleep(250 * time.Millisecond)
50
51         // Do we need to shutdown.
52         if atomic.LoadInt64(&shutdown) == 1 {
53             fmt.Printf(""Shutting %s Down\n"", name)
54             break
55         }
56     }
57 }
      
      In this example two goroutines are launched and begin to perform some work. After every iteration of their respective loop,
         the goroutines check the value of the shutdown variable by using the LoadInt64 function on line 52. This function returns a safe copy of the shutdown variable. If the value equals 1, the goroutine breaks out of the loop and terminates."|"Go in Action"|"William Kennedy"
"ap 07:22"|7.22|"Listing 7.22. pool/main/main.go: lines 21–32
      
      21 // dbConnection simulates a resource to share.
22 type dbConnection struct {
23     ID int32
24 }
25
26 // Close implements the io.Closer interface so dbConnection
27 // can be managed by the pool. Close performs any resource
28 // release management.
29 func (dbConn *dbConnection) Close() error {
30     log.Println(""Close: Connection"", dbConn.ID)
31     return nil
32 }
      
      Listing 7.22 shows the declaration of the dbConnection struct and its implementation of the io.Closer interface. The dbConnection type simulates a struct that’s managing a database connection and currently has one field, ID, that contains a unique ID for each connection. The Close method just reports that the connection is being closed and displays its ID."|"Go in Action"|"William Kennedy"
23:00|23:00|"Listing 8.2. Sample trace line
      
      TRACE: 2009/11/10 23:00:00.000000 /tmpfs/gosandbox-/prog.go:14: message
      
      In listing 8.2 you see a log entry produced by the log package. This log entry contains a prefix, a datetime stamp, the full path to the source code writing to the log, the line
         of code performing the write, and finally the message. Let’s look at a program that allows you to configure the log package to write such a line."|"Go in Action"|"William Kennedy"
"ap 08:34"|8.34|"Listing 8.34. Documentation for the io.Writer interface
      
      Write writes len(p) bytes from p to the underlying data stream. It
returns the number of bytes written from p (0 <= n <= len(p)) and any
error encountered that caused the write to stop early. Write must
return a non-nil error if it returns n < len(p). Write must not modify
the slice data, even temporarily.
      
      The rules in listing 8.34 come from the standard library. They mean that the implementation of the Write method should attempt to write the entire length of the byte slice that’s passed in. But if that isn’t possible, then the method must return an error. The number of bytes reported as
         written can be less than the length of the byte slice, but never more. Finally, the byte slice must never be modified in any way."|"Go in Action"|"William Kennedy"
15:04|15:04|"Listing 9.12. listing12_test.go: lines 01–41
      
      01 // Sample test to show how to mock an HTTP GET call internally.
02 // Differs slightly from the book to show more.
03 package listing12
04
05 import (
06     ""encoding/xml""
07     ""fmt""
08     ""net/http""
09     ""net/http/httptest""
10     ""testing""
11 )
12
13 const checkMark = ""\u2713""
14 const ballotX = ""\u2717""
15
16 // feed is mocking the XML document we except to receive.
17 var feed = `<?xml version=""1.0"" encoding=""UTF-8""?>
18 <rss>
19 <channel>
20     <title>Going Go Programming</title>
21     <description>Golang : https://github.com/goinggo</description>
22     <link>http://www.goinggo.net/</link>
23     <item>
24         <pubDate>Sun, 15 Mar 2015 15:04:00 +0000</pubDate>
25         <title>Object Oriented Programming Mechanics</title>
26         <description>Go is an object oriented language.</description>
27         <link>http://www.goinggo.net/2015/03/object-oriented</link>
28     </item>
29 </channel>
30 </rss>`
31
32 // mockServer returns a pointer to a server to handle the get call.
33 func mockServer() *httptest.Server {

34     f := func(w http.ResponseWriter, r *http.Request) {
35         w.WriteHeader(200)
36         w.Header().Set(""Content-Type"", ""application/xml"")
37         fmt.Fprintln(w, feed)
38     }
39
40     return httptest.NewServer(http.HandlerFunc(f))
41 }
      
      Listing 9.12 shows how we can mock a call to the goinggo.net website to simulate the downloading of the RSS feed. On line 17 a package-level
         variable named feed is declared and initialized with a literal string that represents the RSS XML document we’ll receive from our mock server
         call. It’s a small snippet of the actual RSS feed document and is enough to conduct our test. On line 32 we have the declaration
         of a function named mockServer that leverages the support inside the httptest package to simulate a call to a real server on the internet."|"Go in Action"|"William Kennedy"
